{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\nconst Pool = require('./pool');\nconst ConnectionPromise = require('./connection-promise');\nconst CommandParameter = require('./command-parameter');\nconst Errors = require('./misc/errors');\nclass PoolPromise extends EventEmitter {\n  #pool;\n  constructor(options) {\n    super();\n    this.pool = new Pool(options);\n    this.pool.on('acquire', this.emit.bind(this, 'acquire'));\n    this.pool.on('connection', this.emit.bind(this, 'connection'));\n    this.pool.on('enqueue', this.emit.bind(this, 'enqueue'));\n    this.pool.on('release', this.emit.bind(this, 'release'));\n    this.pool.on('error', this.emit.bind(this, 'error'));\n  }\n  get closed() {\n    return this.pool.closed;\n  }\n\n  /**\n   * Get current total connection number.\n   * @return {number}\n   */\n  totalConnections() {\n    return this.pool.totalConnections();\n  }\n\n  /**\n   * Get current active connections.\n   * @return {number}\n   */\n  activeConnections() {\n    return this.pool.activeConnections();\n  }\n\n  /**\n   * Get current idle connection number.\n   * @return {number}\n   */\n  idleConnections() {\n    return this.pool.idleConnections();\n  }\n\n  /**\n   * Get current stacked connection request.\n   * @return {number}\n   */\n  taskQueueSize() {\n    return this.pool.taskQueueSize();\n  }\n  escape(value) {\n    return this.pool.escape(value);\n  }\n  escapeId(value) {\n    return this.pool.escapeId(value);\n  }\n\n  /**\n   * Ends pool\n   *\n   * @return Promise\n   **/\n  end() {\n    return this.pool.end();\n  }\n\n  /**\n   * Retrieve a connection from pool.\n   * Create a new one, if limit is not reached.\n   * wait until acquireTimeout.\n   *\n   */\n  async getConnection() {\n    const cmdParam = new CommandParameter();\n    if (this.pool.opts.connOptions.trace) Error.captureStackTrace(cmdParam);\n    const baseConn = await this.pool.getConnection(cmdParam);\n    const conn = new ConnectionPromise(baseConn);\n    conn.release = () => new Promise(baseConn.release);\n    conn.end = conn.release;\n    conn.close = conn.release;\n    return conn;\n  }\n\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   */\n  query(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.pool.opts.connOptions, sql, values);\n    return this.pool.getConnection(cmdParam).then(baseConn => {\n      return new Promise(baseConn.query.bind(baseConn, cmdParam)).finally(() => {\n        this.pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * Execute query using binary protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   */\n  execute(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.pool.opts.connOptions, sql, values);\n    return this.pool.getConnection(cmdParam).then(baseConn => {\n      return ConnectionPromise._EXECUTE_CMD(baseConn, cmdParam).finally(() => {\n        this.pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * execute a batch\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  array of placeholder values\n   */\n  batch(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.pool.opts.connOptions, sql, values);\n    return this.pool.getConnection(cmdParam).then(baseConn => {\n      return ConnectionPromise._BATCH_CMD(baseConn, cmdParam).finally(() => {\n        this.pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * Import sql file.\n   *\n   * @param opts JSON array with 2 possible fields: file and database\n   */\n  importFile(opts) {\n    if (!opts) {\n      return Promise.reject(Errors.createError('SQL file parameter is mandatory', Errors.ER_MISSING_SQL_PARAMETER, null, 'HY000', null, false, null));\n    }\n    return this.pool.getConnection({}).then(baseConn => {\n      return new Promise(baseConn.importFile.bind(baseConn, {\n        file: opts.file,\n        database: opts.database\n      })).finally(() => {\n        this.pool.release(baseConn);\n      });\n    });\n  }\n}\nmodule.exports = PoolPromise;","map":{"version":3,"names":["EventEmitter","require","Pool","ConnectionPromise","CommandParameter","Errors","PoolPromise","pool","constructor","options","on","emit","bind","closed","totalConnections","activeConnections","idleConnections","taskQueueSize","escape","value","escapeId","end","getConnection","cmdParam","opts","connOptions","trace","Error","captureStackTrace","baseConn","conn","release","Promise","close","query","sql","values","_PARAM","then","finally","execute","_EXECUTE_CMD","batch","_BATCH_CMD","importFile","reject","createError","ER_MISSING_SQL_PARAMETER","file","database","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/pool-promise.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst { EventEmitter } = require('events');\n\nconst Pool = require('./pool');\nconst ConnectionPromise = require('./connection-promise');\nconst CommandParameter = require('./command-parameter');\nconst Errors = require('./misc/errors');\n\nclass PoolPromise extends EventEmitter {\n  #pool;\n  constructor(options) {\n    super();\n    this.pool = new Pool(options);\n    this.pool.on('acquire', this.emit.bind(this, 'acquire'));\n    this.pool.on('connection', this.emit.bind(this, 'connection'));\n    this.pool.on('enqueue', this.emit.bind(this, 'enqueue'));\n    this.pool.on('release', this.emit.bind(this, 'release'));\n    this.pool.on('error', this.emit.bind(this, 'error'));\n  }\n\n  get closed() {\n    return this.pool.closed;\n  }\n\n  /**\n   * Get current total connection number.\n   * @return {number}\n   */\n  totalConnections() {\n    return this.pool.totalConnections();\n  }\n\n  /**\n   * Get current active connections.\n   * @return {number}\n   */\n  activeConnections() {\n    return this.pool.activeConnections();\n  }\n\n  /**\n   * Get current idle connection number.\n   * @return {number}\n   */\n  idleConnections() {\n    return this.pool.idleConnections();\n  }\n\n  /**\n   * Get current stacked connection request.\n   * @return {number}\n   */\n  taskQueueSize() {\n    return this.pool.taskQueueSize();\n  }\n\n  escape(value) {\n    return this.pool.escape(value);\n  }\n\n  escapeId(value) {\n    return this.pool.escapeId(value);\n  }\n\n  /**\n   * Ends pool\n   *\n   * @return Promise\n   **/\n  end() {\n    return this.pool.end();\n  }\n\n  /**\n   * Retrieve a connection from pool.\n   * Create a new one, if limit is not reached.\n   * wait until acquireTimeout.\n   *\n   */\n  async getConnection() {\n    const cmdParam = new CommandParameter();\n    if (this.pool.opts.connOptions.trace) Error.captureStackTrace(cmdParam);\n    const baseConn = await this.pool.getConnection(cmdParam);\n    const conn = new ConnectionPromise(baseConn);\n    conn.release = () => new Promise(baseConn.release);\n    conn.end = conn.release;\n    conn.close = conn.release;\n    return conn;\n  }\n\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   */\n  query(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.pool.opts.connOptions, sql, values);\n    return this.pool.getConnection(cmdParam).then((baseConn) => {\n      return new Promise(baseConn.query.bind(baseConn, cmdParam)).finally(() => {\n        this.pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * Execute query using binary protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   */\n  execute(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.pool.opts.connOptions, sql, values);\n    return this.pool.getConnection(cmdParam).then((baseConn) => {\n      return ConnectionPromise._EXECUTE_CMD(baseConn, cmdParam).finally(() => {\n        this.pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * execute a batch\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  array of placeholder values\n   */\n  batch(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.pool.opts.connOptions, sql, values);\n    return this.pool.getConnection(cmdParam).then((baseConn) => {\n      return ConnectionPromise._BATCH_CMD(baseConn, cmdParam).finally(() => {\n        this.pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * Import sql file.\n   *\n   * @param opts JSON array with 2 possible fields: file and database\n   */\n  importFile(opts) {\n    if (!opts) {\n      return Promise.reject(\n        Errors.createError(\n          'SQL file parameter is mandatory',\n          Errors.ER_MISSING_SQL_PARAMETER,\n          null,\n          'HY000',\n          null,\n          false,\n          null\n        )\n      );\n    }\n\n    return this.pool.getConnection({}).then((baseConn) => {\n      return new Promise(baseConn.importFile.bind(baseConn, { file: opts.file, database: opts.database })).finally(\n        () => {\n          this.pool.release(baseConn);\n        }\n      );\n    });\n  }\n}\n\nmodule.exports = PoolPromise;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
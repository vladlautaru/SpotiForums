{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst ErrorCodes = require('../const/error-code');\nclass SqlError extends Error {\n  constructor(msg, sql, fatal, info, sqlState, errno, additionalStack, addHeader = undefined, cause) {\n    super((addHeader !== false ? `(conn:${info && info.threadId ? info.threadId : -1}, no: ${errno ? errno : -1}, SQLState: ${sqlState}) ` : '') + msg + (sql ? '\\nsql: ' + sql : ''), cause);\n    this.name = 'SqlError';\n    this.sqlMessage = msg;\n    this.sql = sql;\n    this.fatal = fatal;\n    this.errno = errno;\n    this.sqlState = sqlState;\n    if (errno > 45000 && errno < 46000) {\n      //driver error\n      this.code = errByNo[errno] || 'UNKNOWN';\n    } else {\n      this.code = ErrorCodes.codes[this.errno] || 'UNKNOWN';\n    }\n    if (additionalStack) {\n      //adding caller stack, removing initial \"Error:\\n\"\n      this.stack += '\\n From event:\\n' + additionalStack.substring(additionalStack.indexOf('\\n') + 1);\n    }\n  }\n  get text() {\n    return this.sqlMessage;\n  }\n}\n\n/**\n * Error factory, so error get connection information.\n *\n * @param msg               current error message\n * @param errno             error number\n * @param info              connection information\n * @param sqlState          sql state\n * @param sql               sql command\n * @param fatal             is error fatal\n * @param additionalStack   additional stack trace to see\n * @param addHeader         add connection information\n * @param cause             add cause\n * @returns {Error} the error\n */\nmodule.exports.createError = function (msg, errno, info = null, sqlState = 'HY000', sql = null, fatal = false, additionalStack = undefined, addHeader = undefined, cause = undefined) {\n  if (cause) return new SqlError(msg, sql, fatal, info, sqlState, errno, additionalStack, addHeader, {\n    cause: cause\n  });\n  return new SqlError(msg, sql, fatal, info, sqlState, errno, additionalStack, addHeader, cause);\n};\n\n/**\n * Fatal error factory, so error get connection information.\n *\n * @param msg               current error message\n * @param errno             error number\n * @param info              connection information\n * @param sqlState          sql state\n * @param sql               sql command\n * @param additionalStack   additional stack trace to see\n * @param addHeader         add connection information\n * @returns {Error} the error\n */\nmodule.exports.createFatalError = function (msg, errno, info = null, sqlState = '08S01', sql = null, additionalStack = undefined, addHeader = undefined) {\n  return new SqlError(msg, sql, true, info, sqlState, errno, additionalStack, addHeader);\n};\n\n/********************************************************************************\n * Driver specific errors\n ********************************************************************************/\n\nmodule.exports.ER_CONNECTION_ALREADY_CLOSED = 45001;\nmodule.exports.ER_MYSQL_CHANGE_USER_BUG = 45003;\nmodule.exports.ER_CMD_NOT_EXECUTED_DESTROYED = 45004;\nmodule.exports.ER_NULL_CHAR_ESCAPEID = 45005;\nmodule.exports.ER_NULL_ESCAPEID = 45006;\nmodule.exports.ER_NOT_IMPLEMENTED_FORMAT = 45007;\nmodule.exports.ER_NODE_NOT_SUPPORTED_TLS = 45008;\nmodule.exports.ER_SOCKET_UNEXPECTED_CLOSE = 45009;\nmodule.exports.ER_UNEXPECTED_PACKET = 45011;\nmodule.exports.ER_CONNECTION_TIMEOUT = 45012;\nmodule.exports.ER_CMD_CONNECTION_CLOSED = 45013;\nmodule.exports.ER_CHANGE_USER_BAD_PACKET = 45014;\nmodule.exports.ER_PING_BAD_PACKET = 45015;\nmodule.exports.ER_MISSING_PARAMETER = 45016;\nmodule.exports.ER_PARAMETER_UNDEFINED = 45017;\nmodule.exports.ER_PLACEHOLDER_UNDEFINED = 45018;\nmodule.exports.ER_SOCKET = 45019;\nmodule.exports.ER_EOF_EXPECTED = 45020;\nmodule.exports.ER_LOCAL_INFILE_DISABLED = 45021;\nmodule.exports.ER_LOCAL_INFILE_NOT_READABLE = 45022;\nmodule.exports.ER_SERVER_SSL_DISABLED = 45023;\nmodule.exports.ER_AUTHENTICATION_BAD_PACKET = 45024;\nmodule.exports.ER_AUTHENTICATION_PLUGIN_NOT_SUPPORTED = 45025;\nmodule.exports.ER_SOCKET_TIMEOUT = 45026;\nmodule.exports.ER_POOL_ALREADY_CLOSED = 45027;\nmodule.exports.ER_GET_CONNECTION_TIMEOUT = 45028;\nmodule.exports.ER_SETTING_SESSION_ERROR = 45029;\nmodule.exports.ER_INITIAL_SQL_ERROR = 45030;\nmodule.exports.ER_BATCH_WITH_NO_VALUES = 45031;\nmodule.exports.ER_RESET_BAD_PACKET = 45032;\nmodule.exports.ER_WRONG_IANA_TIMEZONE = 45033;\nmodule.exports.ER_LOCAL_INFILE_WRONG_FILENAME = 45034;\nmodule.exports.ER_ADD_CONNECTION_CLOSED_POOL = 45035;\nmodule.exports.ER_WRONG_AUTO_TIMEZONE = 45036;\nmodule.exports.ER_CLOSING_POOL = 45037;\nmodule.exports.ER_TIMEOUT_NOT_SUPPORTED = 45038;\nmodule.exports.ER_INITIAL_TIMEOUT_ERROR = 45039;\nmodule.exports.ER_DUPLICATE_FIELD = 45040;\nmodule.exports.ER_PING_TIMEOUT = 45042;\nmodule.exports.ER_BAD_PARAMETER_VALUE = 45043;\nmodule.exports.ER_CANNOT_RETRIEVE_RSA_KEY = 45044;\nmodule.exports.ER_MINIMUM_NODE_VERSION_REQUIRED = 45045;\nmodule.exports.ER_MAX_ALLOWED_PACKET = 45046;\nmodule.exports.ER_NOT_SUPPORTED_AUTH_PLUGIN = 45047;\nmodule.exports.ER_COMPRESSION_NOT_SUPPORTED = 45048;\nmodule.exports.ER_UNDEFINED_SQL = 45049;\nmodule.exports.ER_PARSING_PRECISION = 45050;\nmodule.exports.ER_PREPARE_CLOSED = 45051;\nmodule.exports.ER_MISSING_SQL_PARAMETER = 45052;\nmodule.exports.ER_MISSING_SQL_FILE = 45053;\nmodule.exports.ER_SQL_FILE_ERROR = 45054;\nmodule.exports.ER_MISSING_DATABASE_PARAMETER = 45055;\nmodule.exports.ER_SELF_SIGNED = 45056;\nmodule.exports.ER_SELF_SIGNED_NO_PWD = 45057;\nconst keys = Object.keys(module.exports);\nconst errByNo = {};\nfor (let i = 0; i < keys.length; i++) {\n  const keyName = keys[i];\n  if (keyName !== 'createError') {\n    errByNo[module.exports[keyName]] = keyName;\n  }\n}\nmodule.exports.SqlError = SqlError;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst QUOTE = 0x27;\nconst formatDigit = function (val, significantDigit) {\n  let res = '' + val;\n  while (res.length < significantDigit) res = '0' + res;\n  return res;\n};\nclass TextEncoder {\n  /**\n   * Write (and escape) current parameter value to output writer\n   *\n   * @param out     output writer\n   * @param value   current parameter\n   * @param opts    connection options\n   * @param info    connection information\n   */\n  static writeParam(out, value, opts, info) {\n    switch (typeof value) {\n      case 'boolean':\n        out.writeStringAscii(value ? 'true' : 'false');\n        break;\n      case 'bigint':\n      case 'number':\n        out.writeStringAscii('' + value);\n        break;\n      case 'object':\n        if (value == null) {\n          out.writeStringAscii('NULL');\n        } else if (value instanceof Date) {\n          out.writeStringAscii(TextEncoder.getLocalDate(value));\n        } else if (Buffer.isBuffer(value)) {\n          out.writeStringAscii(\"_BINARY '\");\n          out.writeBufferEscape(value);\n          out.writeInt8(QUOTE);\n        } else if (typeof value.toSqlString === 'function') {\n          out.writeStringEscapeQuote(String(value.toSqlString()));\n        } else if (Array.isArray(value)) {\n          if (opts.arrayParenthesis) {\n            out.writeStringAscii('(');\n          }\n          for (let i = 0; i < value.length; i++) {\n            if (i !== 0) out.writeStringAscii(',');\n            TextEncoder.writeParam(out, value[i], opts, info);\n          }\n          if (opts.arrayParenthesis) {\n            out.writeStringAscii(')');\n          }\n        } else {\n          if (value.type != null && ['Point', 'LineString', 'Polygon', 'MultiPoint', 'MultiLineString', 'MultiPolygon', 'GeometryCollection'].includes(value.type)) {\n            //GeoJSON format.\n            let prefix = info.isMariaDB() && info.hasMinVersion(10, 1, 4) || !info.isMariaDB() && info.hasMinVersion(5, 7, 6) ? 'ST_' : '';\n            switch (value.type) {\n              case 'Point':\n                out.writeStringAscii(prefix + \"PointFromText('POINT(\" + TextEncoder.geoPointToString(value.coordinates) + \")')\");\n                break;\n              case 'LineString':\n                out.writeStringAscii(prefix + \"LineFromText('LINESTRING(\" + TextEncoder.geoArrayPointToString(value.coordinates) + \")')\");\n                break;\n              case 'Polygon':\n                out.writeStringAscii(prefix + \"PolygonFromText('POLYGON(\" + TextEncoder.geoMultiArrayPointToString(value.coordinates) + \")')\");\n                break;\n              case 'MultiPoint':\n                out.writeStringAscii(prefix + \"MULTIPOINTFROMTEXT('MULTIPOINT(\" + TextEncoder.geoArrayPointToString(value.coordinates) + \")')\");\n                break;\n              case 'MultiLineString':\n                out.writeStringAscii(prefix + \"MLineFromText('MULTILINESTRING(\" + TextEncoder.geoMultiArrayPointToString(value.coordinates) + \")')\");\n                break;\n              case 'MultiPolygon':\n                out.writeStringAscii(prefix + \"MPolyFromText('MULTIPOLYGON(\" + TextEncoder.geoMultiPolygonToString(value.coordinates) + \")')\");\n                break;\n              case 'GeometryCollection':\n                out.writeStringAscii(prefix + \"GeomCollFromText('GEOMETRYCOLLECTION(\" + TextEncoder.geometricCollectionToString(value.geometries) + \")')\");\n                break;\n            }\n          } else {\n            if (opts.permitSetMultiParamEntries) {\n              let first = true;\n              for (let key in value) {\n                const val = value[key];\n                if (typeof val === 'function') continue;\n                if (first) {\n                  first = false;\n                } else {\n                  out.writeStringAscii(',');\n                }\n                out.writeString('`' + key + '`');\n                out.writeStringAscii('=');\n                TextEncoder.writeParam(out, val, opts, info);\n              }\n              if (first) out.writeStringEscapeQuote(JSON.stringify(value));\n            } else {\n              out.writeStringEscapeQuote(JSON.stringify(value));\n            }\n          }\n        }\n        break;\n      default:\n        if (value == null) {\n          out.writeStringAscii('NULL');\n        } else {\n          out.writeStringEscapeQuote(value);\n        }\n    }\n  }\n  static geometricCollectionToString(geo) {\n    if (!geo) return '';\n    let st = '';\n    for (let i = 0; i < geo.length; i++) {\n      //GeoJSON format.\n      st += i !== 0 ? ',' : '';\n      switch (geo[i].type) {\n        case 'Point':\n          st += `POINT(${TextEncoder.geoPointToString(geo[i].coordinates)})`;\n          break;\n        case 'LineString':\n          st += `LINESTRING(${TextEncoder.geoArrayPointToString(geo[i].coordinates)})`;\n          break;\n        case 'Polygon':\n          st += `POLYGON(${TextEncoder.geoMultiArrayPointToString(geo[i].coordinates)})`;\n          break;\n        case 'MultiPoint':\n          st += `MULTIPOINT(${TextEncoder.geoArrayPointToString(geo[i].coordinates)})`;\n          break;\n        case 'MultiLineString':\n          st += `MULTILINESTRING(${TextEncoder.geoMultiArrayPointToString(geo[i].coordinates)})`;\n          break;\n        case 'MultiPolygon':\n          st += `MULTIPOLYGON(${TextEncoder.geoMultiPolygonToString(geo[i].coordinates)})`;\n          break;\n      }\n    }\n    return st;\n  }\n  static geoMultiPolygonToString(coords) {\n    if (!coords) return '';\n    let st = '';\n    for (let i = 0; i < coords.length; i++) {\n      st += (i !== 0 ? ',(' : '(') + TextEncoder.geoMultiArrayPointToString(coords[i]) + ')';\n    }\n    return st;\n  }\n  static geoMultiArrayPointToString(coords) {\n    if (!coords) return '';\n    let st = '';\n    for (let i = 0; i < coords.length; i++) {\n      st += (i !== 0 ? ',(' : '(') + TextEncoder.geoArrayPointToString(coords[i]) + ')';\n    }\n    return st;\n  }\n  static geoArrayPointToString(coords) {\n    if (!coords) return '';\n    let st = '';\n    for (let i = 0; i < coords.length; i++) {\n      st += (i !== 0 ? ',' : '') + TextEncoder.geoPointToString(coords[i]);\n    }\n    return st;\n  }\n  static geoPointToString(coords) {\n    if (!coords) return '';\n    return (isNaN(coords[0]) ? '' : coords[0]) + ' ' + (isNaN(coords[1]) ? '' : coords[1]);\n  }\n  static getLocalDate(date) {\n    const ms = date.getMilliseconds();\n\n    //return 'YYYY-MM-DD HH:MM:SS' datetime format\n    //see https://mariadb.com/kb/en/library/datetime/\n    let d = \"'\" + date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n    if (ms === 0) return d + \"'\";\n    let res = '' + ms;\n    while (res.length < 3) res = '0' + res;\n    return d + '.' + res + \"'\";\n  }\n  static getFixedFormatDate(date) {\n    const year = date.getFullYear();\n    const mon = date.getMonth() + 1;\n    const day = date.getDate();\n    const hour = date.getHours();\n    const min = date.getMinutes();\n    const sec = date.getSeconds();\n    const ms = date.getMilliseconds();\n\n    //return 'YYYY-MM-DD HH:MM:SS' datetime format\n    //see https://mariadb.com/kb/en/library/datetime/\n    return \"'\" + formatDigit(year, 4) + '-' + formatDigit(mon, 2) + '-' + formatDigit(day, 2) + ' ' + formatDigit(hour, 2) + ':' + formatDigit(min, 2) + ':' + formatDigit(sec, 2) + (ms > 0 ? '.' + formatDigit(ms, 3) : '') + \"'\";\n  }\n}\nmodule.exports = TextEncoder;","map":{"version":3,"names":["QUOTE","formatDigit","val","significantDigit","res","length","TextEncoder","writeParam","out","value","opts","info","writeStringAscii","Date","getLocalDate","Buffer","isBuffer","writeBufferEscape","writeInt8","toSqlString","writeStringEscapeQuote","String","Array","isArray","arrayParenthesis","i","type","includes","prefix","isMariaDB","hasMinVersion","geoPointToString","coordinates","geoArrayPointToString","geoMultiArrayPointToString","geoMultiPolygonToString","geometricCollectionToString","geometries","permitSetMultiParamEntries","first","key","writeString","JSON","stringify","geo","st","coords","isNaN","date","ms","getMilliseconds","d","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getFixedFormatDate","year","mon","day","hour","min","sec","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/cmd/encoder/text-encoder.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst QUOTE = 0x27;\n\nconst formatDigit = function (val, significantDigit) {\n  let res = '' + val;\n  while (res.length < significantDigit) res = '0' + res;\n  return res;\n};\n\nclass TextEncoder {\n  /**\n   * Write (and escape) current parameter value to output writer\n   *\n   * @param out     output writer\n   * @param value   current parameter\n   * @param opts    connection options\n   * @param info    connection information\n   */\n  static writeParam(out, value, opts, info) {\n    switch (typeof value) {\n      case 'boolean':\n        out.writeStringAscii(value ? 'true' : 'false');\n        break;\n      case 'bigint':\n      case 'number':\n        out.writeStringAscii('' + value);\n        break;\n      case 'object':\n        if (value == null) {\n          out.writeStringAscii('NULL');\n        } else if (value instanceof Date) {\n          out.writeStringAscii(TextEncoder.getLocalDate(value));\n        } else if (Buffer.isBuffer(value)) {\n          out.writeStringAscii(\"_BINARY '\");\n          out.writeBufferEscape(value);\n          out.writeInt8(QUOTE);\n        } else if (typeof value.toSqlString === 'function') {\n          out.writeStringEscapeQuote(String(value.toSqlString()));\n        } else if (Array.isArray(value)) {\n          if (opts.arrayParenthesis) {\n            out.writeStringAscii('(');\n          }\n          for (let i = 0; i < value.length; i++) {\n            if (i !== 0) out.writeStringAscii(',');\n            TextEncoder.writeParam(out, value[i], opts, info);\n          }\n          if (opts.arrayParenthesis) {\n            out.writeStringAscii(')');\n          }\n        } else {\n          if (\n            value.type != null &&\n            [\n              'Point',\n              'LineString',\n              'Polygon',\n              'MultiPoint',\n              'MultiLineString',\n              'MultiPolygon',\n              'GeometryCollection'\n            ].includes(value.type)\n          ) {\n            //GeoJSON format.\n            let prefix =\n              (info.isMariaDB() && info.hasMinVersion(10, 1, 4)) || (!info.isMariaDB() && info.hasMinVersion(5, 7, 6))\n                ? 'ST_'\n                : '';\n            switch (value.type) {\n              case 'Point':\n                out.writeStringAscii(\n                  prefix + \"PointFromText('POINT(\" + TextEncoder.geoPointToString(value.coordinates) + \")')\"\n                );\n                break;\n\n              case 'LineString':\n                out.writeStringAscii(\n                  prefix + \"LineFromText('LINESTRING(\" + TextEncoder.geoArrayPointToString(value.coordinates) + \")')\"\n                );\n                break;\n\n              case 'Polygon':\n                out.writeStringAscii(\n                  prefix +\n                    \"PolygonFromText('POLYGON(\" +\n                    TextEncoder.geoMultiArrayPointToString(value.coordinates) +\n                    \")')\"\n                );\n                break;\n\n              case 'MultiPoint':\n                out.writeStringAscii(\n                  prefix +\n                    \"MULTIPOINTFROMTEXT('MULTIPOINT(\" +\n                    TextEncoder.geoArrayPointToString(value.coordinates) +\n                    \")')\"\n                );\n                break;\n\n              case 'MultiLineString':\n                out.writeStringAscii(\n                  prefix +\n                    \"MLineFromText('MULTILINESTRING(\" +\n                    TextEncoder.geoMultiArrayPointToString(value.coordinates) +\n                    \")')\"\n                );\n                break;\n\n              case 'MultiPolygon':\n                out.writeStringAscii(\n                  prefix +\n                    \"MPolyFromText('MULTIPOLYGON(\" +\n                    TextEncoder.geoMultiPolygonToString(value.coordinates) +\n                    \")')\"\n                );\n                break;\n\n              case 'GeometryCollection':\n                out.writeStringAscii(\n                  prefix +\n                    \"GeomCollFromText('GEOMETRYCOLLECTION(\" +\n                    TextEncoder.geometricCollectionToString(value.geometries) +\n                    \")')\"\n                );\n                break;\n            }\n          } else {\n            if (opts.permitSetMultiParamEntries) {\n              let first = true;\n              for (let key in value) {\n                const val = value[key];\n                if (typeof val === 'function') continue;\n                if (first) {\n                  first = false;\n                } else {\n                  out.writeStringAscii(',');\n                }\n                out.writeString('`' + key + '`');\n                out.writeStringAscii('=');\n                TextEncoder.writeParam(out, val, opts, info);\n              }\n              if (first) out.writeStringEscapeQuote(JSON.stringify(value));\n            } else {\n              out.writeStringEscapeQuote(JSON.stringify(value));\n            }\n          }\n        }\n        break;\n      default:\n        if (value == null) {\n          out.writeStringAscii('NULL');\n        } else {\n          out.writeStringEscapeQuote(value);\n        }\n    }\n  }\n\n  static geometricCollectionToString(geo) {\n    if (!geo) return '';\n    let st = '';\n    for (let i = 0; i < geo.length; i++) {\n      //GeoJSON format.\n      st += i !== 0 ? ',' : '';\n      switch (geo[i].type) {\n        case 'Point':\n          st += `POINT(${TextEncoder.geoPointToString(geo[i].coordinates)})`;\n          break;\n\n        case 'LineString':\n          st += `LINESTRING(${TextEncoder.geoArrayPointToString(geo[i].coordinates)})`;\n          break;\n\n        case 'Polygon':\n          st += `POLYGON(${TextEncoder.geoMultiArrayPointToString(geo[i].coordinates)})`;\n          break;\n\n        case 'MultiPoint':\n          st += `MULTIPOINT(${TextEncoder.geoArrayPointToString(geo[i].coordinates)})`;\n          break;\n\n        case 'MultiLineString':\n          st += `MULTILINESTRING(${TextEncoder.geoMultiArrayPointToString(geo[i].coordinates)})`;\n          break;\n\n        case 'MultiPolygon':\n          st += `MULTIPOLYGON(${TextEncoder.geoMultiPolygonToString(geo[i].coordinates)})`;\n          break;\n      }\n    }\n    return st;\n  }\n\n  static geoMultiPolygonToString(coords) {\n    if (!coords) return '';\n    let st = '';\n    for (let i = 0; i < coords.length; i++) {\n      st += (i !== 0 ? ',(' : '(') + TextEncoder.geoMultiArrayPointToString(coords[i]) + ')';\n    }\n    return st;\n  }\n\n  static geoMultiArrayPointToString(coords) {\n    if (!coords) return '';\n    let st = '';\n    for (let i = 0; i < coords.length; i++) {\n      st += (i !== 0 ? ',(' : '(') + TextEncoder.geoArrayPointToString(coords[i]) + ')';\n    }\n    return st;\n  }\n\n  static geoArrayPointToString(coords) {\n    if (!coords) return '';\n    let st = '';\n    for (let i = 0; i < coords.length; i++) {\n      st += (i !== 0 ? ',' : '') + TextEncoder.geoPointToString(coords[i]);\n    }\n    return st;\n  }\n\n  static geoPointToString(coords) {\n    if (!coords) return '';\n    return (isNaN(coords[0]) ? '' : coords[0]) + ' ' + (isNaN(coords[1]) ? '' : coords[1]);\n  }\n\n  static getLocalDate(date) {\n    const ms = date.getMilliseconds();\n\n    //return 'YYYY-MM-DD HH:MM:SS' datetime format\n    //see https://mariadb.com/kb/en/library/datetime/\n    let d =\n      \"'\" +\n      date.getFullYear() +\n      '-' +\n      (date.getMonth() + 1) +\n      '-' +\n      date.getDate() +\n      ' ' +\n      date.getHours() +\n      ':' +\n      date.getMinutes() +\n      ':' +\n      date.getSeconds();\n    if (ms === 0) return d + \"'\";\n\n    let res = '' + ms;\n    while (res.length < 3) res = '0' + res;\n    return d + '.' + res + \"'\";\n  }\n\n  static getFixedFormatDate(date) {\n    const year = date.getFullYear();\n    const mon = date.getMonth() + 1;\n    const day = date.getDate();\n    const hour = date.getHours();\n    const min = date.getMinutes();\n    const sec = date.getSeconds();\n    const ms = date.getMilliseconds();\n\n    //return 'YYYY-MM-DD HH:MM:SS' datetime format\n    //see https://mariadb.com/kb/en/library/datetime/\n    return (\n      \"'\" +\n      formatDigit(year, 4) +\n      '-' +\n      formatDigit(mon, 2) +\n      '-' +\n      formatDigit(day, 2) +\n      ' ' +\n      formatDigit(hour, 2) +\n      ':' +\n      formatDigit(min, 2) +\n      ':' +\n      formatDigit(sec, 2) +\n      (ms > 0 ? '.' + formatDigit(ms, 3) : '') +\n      \"'\"\n    );\n  }\n}\n\nmodule.exports = TextEncoder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
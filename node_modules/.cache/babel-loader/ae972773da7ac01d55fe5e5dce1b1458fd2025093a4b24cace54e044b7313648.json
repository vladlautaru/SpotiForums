{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Command = require('./command');\nconst ServerStatus = require('../const/server-status');\nconst ColumnDefinition = require('./column-definition');\nconst Errors = require('../misc/errors');\nconst fs = require('fs');\nconst Parse = require('../misc/parse');\nconst BinaryDecoder = require('./decoder/binary-decoder');\nconst TextDecoder = require('./decoder/text-decoder');\nconst OkPacket = require('./class/ok-packet');\nconst StateChange = require('../const/state-change');\nconst Collations = require('../const/collations');\n\n/**\n * handle COM_QUERY / COM_STMT_EXECUTE results\n * see : https://mariadb.com/kb/en/library/4-server-response-packets/\n */\nclass Parser extends Command {\n  constructor(resolve, reject, connOpts, cmdParam) {\n    super(cmdParam, resolve, reject);\n    this._responseIndex = 0;\n    this._rows = [];\n    this.opts = cmdParam.opts ? Object.assign({}, connOpts, cmdParam.opts) : connOpts;\n    this.sql = cmdParam.sql;\n    this.initialValues = cmdParam.values;\n    this.canSkipMeta = false;\n  }\n\n  /**\n   * Read Query response packet.\n   * packet can be :\n   * - a result-set\n   * - an ERR_Packet\n   * - a OK_Packet\n   * - LOCAL_INFILE Packet\n   *\n   * @param packet  query response\n   * @param out     output writer\n   * @param opts    connection options\n   * @param info    connection info\n   */\n  readResponsePacket(packet, out, opts, info) {\n    switch (packet.peek()) {\n      //*********************************************************************************************************\n      //* OK response\n      //*********************************************************************************************************\n      case 0x00:\n        return this.readOKPacket(packet, out, opts, info);\n\n      //*********************************************************************************************************\n      //* ERROR response\n      //*********************************************************************************************************\n      case 0xff:\n        // in case of timeout, free accumulated rows\n        this._columns = null;\n        this._rows = [];\n        const err = packet.readError(info, opts.logParam ? this.displaySql() : this.sql, this.cmdParam.stack);\n        //force in transaction status, since query will have created a transaction if autocommit is off\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        return this.throwError(err, info);\n\n      //*********************************************************************************************************\n      //* LOCAL INFILE response\n      //*********************************************************************************************************\n      case 0xfb:\n        return this.readLocalInfile(packet, out, opts, info);\n\n      //*********************************************************************************************************\n      //* Parser\n      //*********************************************************************************************************\n      default:\n        return this.readResultSet(packet, info);\n    }\n  }\n\n  /**\n   * Read result-set packets :\n   * see https://mariadb.com/kb/en/library/resultset/\n   *\n   * @param packet    Column count packet\n   * @param info      current connection information\n   * @returns {Parser.readColumn} next packet handler\n   */\n  readResultSet(packet, info) {\n    this._columnCount = packet.readUnsignedLength();\n    this._rows.push([]);\n    if (this.canSkipMeta && info.serverPermitSkipMeta && packet.readUInt8() === 0) {\n      // command support skipping meta\n      // server permits it\n      // and tells that no columns follows, using prepare results\n      this._columns = this.prepare.columns;\n      this.emit('fields', this._columns);\n      this.setParser();\n      return this.onPacketReceive = info.eofDeprecated ? this.readResultSetRow : this.readIntermediateEOF;\n    }\n    this._columns = [];\n    this.onPacketReceive = this.readColumn;\n  }\n\n  /**\n   * Read OK_Packet.\n   * see https://mariadb.com/kb/en/library/ok_packet/\n   *\n   * @param packet    OK_Packet\n   * @param opts      connection options\n   * @param info      connection information\n   * @param out       output writer\n   * @returns {*}     null or {Result.readResponsePacket} in case of multi-result-set\n   */\n  readOKPacket(packet, out, opts, info) {\n    packet.skip(1); //skip header\n\n    const affectedRows = packet.readUnsignedLength();\n    let insertId = packet.readSignedLengthBigInt();\n    info.status = packet.readUInt16();\n    if (insertId != null && (this.opts.supportBigNumbers || this.opts.insertIdAsNumber)) {\n      if (this.opts.insertIdAsNumber && this.opts.checkNumberRange && !Number.isSafeInteger(Number(insertId))) {\n        this.onPacketReceive = info.status & ServerStatus.MORE_RESULTS_EXISTS ? this.readResponsePacket : null;\n        this.throwUnexpectedError(`last insert id value ${insertId} can't safely be converted to number`, false, info, '42000', Errors.ER_PARSING_PRECISION);\n        return;\n      }\n      if (this.opts.supportBigNumbers && (this.opts.bigNumberStrings || !Number.isSafeInteger(Number(insertId)))) {\n        insertId = insertId.toString();\n      } else insertId = Number(insertId);\n    }\n    const okPacket = new OkPacket(affectedRows, insertId, packet.readUInt16());\n    let mustRedirect = false;\n    if (info.status & ServerStatus.SESSION_STATE_CHANGED) {\n      packet.skipLengthCodedNumber();\n      while (packet.remaining()) {\n        const len = packet.readUnsignedLength();\n        if (len > 0) {\n          const subPacket = packet.subPacketLengthEncoded(len);\n          while (subPacket.remaining()) {\n            const type = subPacket.readUInt8();\n            switch (type) {\n              case StateChange.SESSION_TRACK_SYSTEM_VARIABLES:\n                let subSubPacket;\n                do {\n                  subSubPacket = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                  const variable = subSubPacket.readStringLengthEncoded();\n                  const value = subSubPacket.readStringLengthEncoded();\n                  switch (variable) {\n                    case 'character_set_client':\n                      info.collation = Collations.fromCharset(value);\n                      if (info.collation === undefined) {\n                        this.throwError(new Error(\"unknown charset : '\" + value + \"'\"), info);\n                        return;\n                      }\n                      opts.emit('collation', info.collation);\n                      break;\n                    case 'redirect_url':\n                      mustRedirect = true;\n                      info.redirect(value, this.okPacketSuccess.bind(this, okPacket, info));\n                      break;\n                    case 'connection_id':\n                      info.threadId = parseInt(value);\n                      break;\n                    default:\n                    //variable not used by driver\n                  }\n                } while (subSubPacket.remaining() > 0);\n                break;\n              case StateChange.SESSION_TRACK_SCHEMA:\n                const subSubPacket2 = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                info.database = subSubPacket2.readStringLengthEncoded();\n                break;\n            }\n          }\n        }\n      }\n    }\n    if (!mustRedirect) {\n      if (info.redirectRequest && (info.status & ServerStatus.STATUS_IN_TRANS) === 0 && (info.status & ServerStatus.MORE_RESULTS_EXISTS) === 0) {\n        info.redirect(info.redirectRequest, this.okPacketSuccess.bind(this, okPacket, info));\n      } else {\n        this.okPacketSuccess(okPacket, info);\n      }\n    }\n  }\n  okPacketSuccess(okPacket, info) {\n    if (this._responseIndex === 0) {\n      // fast path for standard single result\n      if (info.status & ServerStatus.MORE_RESULTS_EXISTS) {\n        this._rows.push(okPacket);\n        this._responseIndex++;\n        return this.onPacketReceive = this.readResponsePacket;\n      }\n      return this.success(this.opts.metaAsArray ? [okPacket, []] : okPacket);\n    }\n    this._rows.push(okPacket);\n    if (info.status & ServerStatus.MORE_RESULTS_EXISTS) {\n      this._responseIndex++;\n      return this.onPacketReceive = this.readResponsePacket;\n    }\n    if (this.opts.metaAsArray) {\n      if (!this._meta) {\n        this._meta = new Array(this._responseIndex);\n      }\n      this._meta[this._responseIndex] = null;\n      this.success([this._rows, this._meta]);\n    } else {\n      this.success(this._rows);\n    }\n  }\n  success(val) {\n    this.successEnd(val);\n    this._columns = null;\n    this._rows = [];\n  }\n\n  /**\n   * Read column information metadata\n   * see https://mariadb.com/kb/en/library/resultset/#column-definition-packet\n   *\n   * @param packet    column definition packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */\n  readColumn(packet, out, opts, info) {\n    this._columns.push(new ColumnDefinition(packet, info, this.opts.rowsAsArray));\n\n    // last column\n    if (this._columns.length === this._columnCount) {\n      this.setParser();\n      if (this.canSkipMeta && info.serverPermitSkipMeta && this.prepare != null) {\n        // server can skip meta, but have force sending it.\n        // metadata have changed, updating prepare result accordingly\n        this.prepare.columns = this._columns;\n      }\n      this.emit('fields', this._columns);\n      return this.onPacketReceive = info.eofDeprecated ? this.readResultSetRow : this.readIntermediateEOF;\n    }\n  }\n  setParser() {\n    this._parseFunction = new Array(this._columnCount);\n    if (this.opts.typeCast) {\n      for (let i = 0; i < this._columnCount; i++) {\n        this._parseFunction[i] = this.readCastValue.bind(this, this._columns[i]);\n      }\n    } else {\n      const dataParser = this.binary ? BinaryDecoder.parser : TextDecoder.parser;\n      for (let i = 0; i < this._columnCount; i++) {\n        this._parseFunction[i] = dataParser(this._columns[i], this.opts);\n      }\n    }\n    if (this.opts.rowsAsArray) {\n      this.parseRow = this.parseRowAsArray;\n    } else {\n      this.tableHeader = new Array(this._columnCount);\n      this.parseRow = this.binary ? this.parseRowStdBinary : this.parseRowStdText;\n      if (this.opts.nestTables) {\n        if (typeof this.opts.nestTables === 'string') {\n          for (let i = 0; i < this._columnCount; i++) {\n            this.tableHeader[i] = this._columns[i].table() + this.opts.nestTables + this._columns[i].name();\n          }\n          this.checkDuplicates();\n        } else if (this.opts.nestTables === true) {\n          this.parseRow = this.parseRowNested;\n          for (let i = 0; i < this._columnCount; i++) {\n            this.tableHeader[i] = [this._columns[i].table(), this._columns[i].name()];\n          }\n          this.checkNestTablesDuplicates();\n        }\n      } else {\n        for (let i = 0; i < this._columnCount; i++) {\n          this.tableHeader[i] = this._columns[i].name();\n        }\n        this.checkDuplicates();\n      }\n    }\n  }\n  checkDuplicates() {\n    if (this.opts.checkDuplicate) {\n      for (let i = 0; i < this._columnCount; i++) {\n        if (this.tableHeader.indexOf(this.tableHeader[i], i + 1) > 0) {\n          const dupes = this.tableHeader.reduce((acc, v, i, arr) => arr.indexOf(v) !== i && acc.indexOf(v) === -1 ? acc.concat(v) : acc, []);\n          this.throwUnexpectedError(`Error in results, duplicate field name \\`${dupes[0]}\\`.\\n(see option \\`checkDuplicate\\`)`, false, null, '42000', Errors.ER_DUPLICATE_FIELD);\n        }\n      }\n    }\n  }\n  checkNestTablesDuplicates() {\n    if (this.opts.checkDuplicate) {\n      for (let i = 0; i < this._columnCount; i++) {\n        for (let j = 0; j < i; j++) {\n          if (this.tableHeader[j][0] === this.tableHeader[i][0] && this.tableHeader[j][1] === this.tableHeader[i][1]) {\n            this.throwUnexpectedError(`Error in results, duplicate field name \\`${this.tableHeader[i][0]}\\`.\\`${this.tableHeader[i][1]}\\`\\n(see option \\`checkDuplicate\\`)`, false, null, '42000', Errors.ER_DUPLICATE_FIELD);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Read intermediate EOF.\n   * _only for server before MariaDB 10.2 / MySQL 5.7 that doesn't have CLIENT_DEPRECATE_EOF capability_\n   * see https://mariadb.com/kb/en/library/eof_packet/\n   *\n   * @param packet    EOF Packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */\n  readIntermediateEOF(packet, out, opts, info) {\n    if (packet.peek() !== 0xfe) {\n      return this.throwNewError('Error in protocol, expected EOF packet', true, info, '42000', Errors.ER_EOF_EXPECTED);\n    }\n\n    //before MySQL 5.7.5, last EOF doesn't contain the good flag SERVER_MORE_RESULTS_EXISTS\n    //for OUT parameters. It must be checked here\n    //(5.7.5 does have the CLIENT_DEPRECATE_EOF capability, so this packet in not even send)\n    packet.skip(3);\n    info.status = packet.readUInt16();\n    this.isOutParameter = info.status & ServerStatus.PS_OUT_PARAMS;\n    this.onPacketReceive = this.readResultSetRow;\n  }\n  handleNewRows(row) {\n    this._rows[this._responseIndex].push(row);\n  }\n\n  /**\n   * Check if packet is result-set end = EOF of OK_Packet with EOF header according to CLIENT_DEPRECATE_EOF capability\n   * or a result-set row\n   *\n   * @param packet    current packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */\n  readResultSetRow(packet, out, opts, info) {\n    if (packet.peek() >= 0xfe) {\n      if (packet.peek() === 0xff) {\n        //force in transaction status, since query will have created a transaction if autocommit is off\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        return this.throwError(packet.readError(info, this.opts.logParam ? this.displaySql() : this.sql, this.cmdParam.err), info);\n      }\n      if (!info.eofDeprecated && packet.length() < 13 || info.eofDeprecated && packet.length() < 0xffffff) {\n        if (!info.eofDeprecated) {\n          packet.skip(3);\n          info.status = packet.readUInt16();\n        } else {\n          packet.skip(1); //skip header\n          packet.skipLengthCodedNumber(); //skip update count\n          packet.skipLengthCodedNumber(); //skip insert id\n          info.status = packet.readUInt16();\n        }\n        if (info.redirectRequest && (info.status & ServerStatus.STATUS_IN_TRANS) === 0 && (info.status & ServerStatus.MORE_RESULTS_EXISTS) === 0) {\n          info.redirect(info.redirectRequest, this.resultSetEndingPacketResult.bind(this, info));\n        } else {\n          this.resultSetEndingPacketResult(info);\n        }\n        return;\n      }\n    }\n    this.handleNewRows(this.parseRow(packet));\n  }\n  resultSetEndingPacketResult(info) {\n    if (this.opts.metaAsArray) {\n      //return promise object as array :\n      // example for SELECT 1 =>\n      // [\n      //   [ {\"1\": 1} ],      //rows\n      //   [ColumnDefinition] //meta\n      // ]\n\n      if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\n        if (!this._meta) this._meta = [];\n        this._meta[this._responseIndex] = this._columns;\n        this._responseIndex++;\n        return this.onPacketReceive = this.readResponsePacket;\n      }\n      if (this._responseIndex === 0) {\n        this.success([this._rows[0], this._columns]);\n      } else {\n        if (!this._meta) this._meta = [];\n        this._meta[this._responseIndex] = this._columns;\n        this.success([this._rows, this._meta]);\n      }\n    } else {\n      //return promise object as rows that have meta property :\n      // example for SELECT 1 =>\n      // [\n      //   {\"1\": 1},\n      //   meta: [ColumnDefinition]\n      // ]\n      Object.defineProperty(this._rows[this._responseIndex], 'meta', {\n        value: this._columns,\n        writable: true,\n        enumerable: this.opts.metaEnumerable\n      });\n      if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\n        this._responseIndex++;\n        return this.onPacketReceive = this.readResponsePacket;\n      }\n      this.success(this._responseIndex === 0 ? this._rows[0] : this._rows);\n    }\n  }\n\n  /**\n   * Display current SQL with parameters (truncated if too big)\n   *\n   * @returns {string}\n   */\n  displaySql() {\n    if (this.opts && this.initialValues) {\n      if (this.sql.length > this.opts.debugLen) {\n        return this.sql.substring(0, this.opts.debugLen) + '...';\n      }\n      let sqlMsg = this.sql + ' - parameters:';\n      return Parser.logParameters(this.opts, sqlMsg, this.initialValues);\n    }\n    if (this.sql.length > this.opts.debugLen) {\n      return this.sql.substring(0, this.opts.debugLen) + '... - parameters:[]';\n    }\n    return this.sql + ' - parameters:[]';\n  }\n  static logParameters(opts, sqlMsg, values) {\n    if (opts.namedPlaceholders) {\n      sqlMsg += '{';\n      let first = true;\n      for (let key in values) {\n        if (first) {\n          first = false;\n        } else {\n          sqlMsg += ',';\n        }\n        sqlMsg += \"'\" + key + \"':\";\n        let param = values[key];\n        sqlMsg = Parser.logParam(sqlMsg, param);\n        if (sqlMsg.length > opts.debugLen) {\n          return sqlMsg.substring(0, opts.debugLen) + '...';\n        }\n      }\n      sqlMsg += '}';\n    } else {\n      sqlMsg += '[';\n      if (Array.isArray(values)) {\n        for (let i = 0; i < values.length; i++) {\n          if (i !== 0) sqlMsg += ',';\n          let param = values[i];\n          sqlMsg = Parser.logParam(sqlMsg, param);\n          if (sqlMsg.length > opts.debugLen) {\n            return sqlMsg.substring(0, opts.debugLen) + '...';\n          }\n        }\n      } else {\n        sqlMsg = Parser.logParam(sqlMsg, values);\n        if (sqlMsg.length > opts.debugLen) {\n          return sqlMsg.substring(0, opts.debugLen) + '...';\n        }\n      }\n      sqlMsg += ']';\n    }\n    return sqlMsg;\n  }\n  parseRowAsArray(packet) {\n    const row = new Array(this._columnCount);\n    const nullBitMap = this.binary ? BinaryDecoder.newRow(packet, this._columns) : null;\n    for (let i = 0; i < this._columnCount; i++) {\n      row[i] = this._parseFunction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n    }\n    return row;\n  }\n  parseRowNested(packet) {\n    const row = {};\n    const nullBitMap = this.binary ? BinaryDecoder.newRow(packet, this._columns) : null;\n    for (let i = 0; i < this._columnCount; i++) {\n      if (!row[this.tableHeader[i][0]]) row[this.tableHeader[i][0]] = {};\n      row[this.tableHeader[i][0]][this.tableHeader[i][1]] = this._parseFunction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n    }\n    return row;\n  }\n  parseRowStdText(packet) {\n    const row = {};\n    for (let i = 0; i < this._columnCount; i++) {\n      row[this.tableHeader[i]] = this._parseFunction[i](packet, this.opts, this.unexpectedError);\n    }\n    return row;\n  }\n  parseRowStdBinary(packet) {\n    const nullBitMap = BinaryDecoder.newRow(packet, this._columns);\n    const row = {};\n    for (let i = 0; i < this._columnCount; i++) {\n      row[this.tableHeader[i]] = this._parseFunction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n    }\n    return row;\n  }\n  readCastValue(column, packet, opts, unexpectedError, nullBitmap, index) {\n    if (this.binary) {\n      BinaryDecoder.castWrapper(column, packet, opts, nullBitmap, index);\n    } else {\n      TextDecoder.castWrapper(column, packet, opts, nullBitmap, index);\n    }\n    const dataParser = this.binary ? BinaryDecoder.parser : TextDecoder.parser;\n    return opts.typeCast(column, dataParser(column, opts).bind(null, packet, opts, unexpectedError, nullBitmap, index));\n  }\n  readLocalInfile(packet, out, opts, info) {\n    packet.skip(1); //skip header\n    out.startPacket(this);\n    const fileName = packet.readStringRemaining();\n    if (!Parse.validateFileName(this.sql, this.initialValues, fileName)) {\n      out.writeEmptyPacket();\n      const error = Errors.createError(\"LOCAL INFILE wrong filename. '\" + fileName + \"' doesn't correspond to query \" + this.sql + '. Query cancelled. Check for malicious server / proxy', Errors.ER_LOCAL_INFILE_WRONG_FILENAME, info, 'HY000', this.sql);\n      process.nextTick(this.reject, error);\n      this.reject = null;\n      this.resolve = null;\n      return this.onPacketReceive = this.readResponsePacket;\n    }\n\n    // this.sequenceNo = 2;\n    // this.compressSequenceNo = 2;\n    let stream;\n    try {\n      stream = this.opts.infileStreamFactory ? this.opts.infileStreamFactory(fileName) : fs.createReadStream(fileName);\n    } catch (e) {\n      out.writeEmptyPacket();\n      const error = Errors.createError(`LOCAL INFILE infileStreamFactory failed`, Errors.ER_LOCAL_INFILE_NOT_READABLE, info, '22000', this.opts.logParam ? this.displaySql() : this.sql);\n      error.cause = e;\n      process.nextTick(this.reject, error);\n      this.reject = null;\n      this.resolve = null;\n      return this.onPacketReceive = this.readResponsePacket;\n    }\n    stream.on('error', function (err) {\n      out.writeEmptyPacket();\n      const error = Errors.createError(`LOCAL INFILE command failed: ${err.message}`, Errors.ER_LOCAL_INFILE_NOT_READABLE, info, '22000', this.sql);\n      process.nextTick(this.reject, error);\n      this.reject = null;\n      this.resolve = null;\n    }.bind(this));\n    stream.on('data', chunk => {\n      out.writeBuffer(chunk, 0, chunk.length);\n    });\n    stream.on('end', () => {\n      if (!out.isEmpty()) {\n        out.flushBuffer(false);\n      }\n      out.writeEmptyPacket();\n    });\n    this.onPacketReceive = this.readResponsePacket;\n  }\n  static logParam(sqlMsg, param) {\n    if (param == null) {\n      sqlMsg += param === undefined ? 'undefined' : 'null';\n    } else {\n      switch (param.constructor.name) {\n        case 'Buffer':\n          sqlMsg += '0x' + param.toString('hex', 0, Math.min(1024, param.length)) + '';\n          break;\n        case 'String':\n          sqlMsg += \"'\" + param + \"'\";\n          break;\n        case 'Date':\n          sqlMsg += getStringDate(param);\n          break;\n        case 'Object':\n          sqlMsg += JSON.stringify(param);\n          break;\n        default:\n          sqlMsg += param.toString();\n      }\n    }\n    return sqlMsg;\n  }\n}\nfunction getStringDate(param) {\n  return \"'\" + ('00' + (param.getMonth() + 1)).slice(-2) + '/' + ('00' + param.getDate()).slice(-2) + '/' + param.getFullYear() + ' ' + ('00' + param.getHours()).slice(-2) + ':' + ('00' + param.getMinutes()).slice(-2) + ':' + ('00' + param.getSeconds()).slice(-2) + '.' + ('000' + param.getMilliseconds()).slice(-3) + \"'\";\n}\nmodule.exports = Parser;","map":{"version":3,"names":["Command","require","ServerStatus","ColumnDefinition","Errors","fs","Parse","BinaryDecoder","TextDecoder","OkPacket","StateChange","Collations","Parser","constructor","resolve","reject","connOpts","cmdParam","_responseIndex","_rows","opts","Object","assign","sql","initialValues","values","canSkipMeta","readResponsePacket","packet","out","info","peek","readOKPacket","_columns","err","readError","logParam","displaySql","stack","status","STATUS_IN_TRANS","throwError","readLocalInfile","readResultSet","_columnCount","readUnsignedLength","push","serverPermitSkipMeta","readUInt8","prepare","columns","emit","setParser","onPacketReceive","eofDeprecated","readResultSetRow","readIntermediateEOF","readColumn","skip","affectedRows","insertId","readSignedLengthBigInt","readUInt16","supportBigNumbers","insertIdAsNumber","checkNumberRange","Number","isSafeInteger","MORE_RESULTS_EXISTS","throwUnexpectedError","ER_PARSING_PRECISION","bigNumberStrings","toString","okPacket","mustRedirect","SESSION_STATE_CHANGED","skipLengthCodedNumber","remaining","len","subPacket","subPacketLengthEncoded","type","SESSION_TRACK_SYSTEM_VARIABLES","subSubPacket","variable","readStringLengthEncoded","value","collation","fromCharset","undefined","Error","redirect","okPacketSuccess","bind","threadId","parseInt","SESSION_TRACK_SCHEMA","subSubPacket2","database","redirectRequest","success","metaAsArray","_meta","Array","val","successEnd","rowsAsArray","length","_parseFunction","typeCast","i","readCastValue","dataParser","binary","parser","parseRow","parseRowAsArray","tableHeader","parseRowStdBinary","parseRowStdText","nestTables","table","name","checkDuplicates","parseRowNested","checkNestTablesDuplicates","checkDuplicate","indexOf","dupes","reduce","acc","v","arr","concat","ER_DUPLICATE_FIELD","j","throwNewError","ER_EOF_EXPECTED","isOutParameter","PS_OUT_PARAMS","handleNewRows","row","resultSetEndingPacketResult","defineProperty","writable","enumerable","metaEnumerable","debugLen","substring","sqlMsg","logParameters","namedPlaceholders","first","key","param","isArray","nullBitMap","newRow","unexpectedError","column","nullBitmap","index","castWrapper","startPacket","fileName","readStringRemaining","validateFileName","writeEmptyPacket","error","createError","ER_LOCAL_INFILE_WRONG_FILENAME","process","nextTick","stream","infileStreamFactory","createReadStream","e","ER_LOCAL_INFILE_NOT_READABLE","cause","on","message","chunk","writeBuffer","isEmpty","flushBuffer","Math","min","getStringDate","JSON","stringify","getMonth","slice","getDate","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/cmd/parser.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Command = require('./command');\nconst ServerStatus = require('../const/server-status');\nconst ColumnDefinition = require('./column-definition');\nconst Errors = require('../misc/errors');\nconst fs = require('fs');\nconst Parse = require('../misc/parse');\nconst BinaryDecoder = require('./decoder/binary-decoder');\nconst TextDecoder = require('./decoder/text-decoder');\nconst OkPacket = require('./class/ok-packet');\nconst StateChange = require('../const/state-change');\nconst Collations = require('../const/collations');\n\n/**\n * handle COM_QUERY / COM_STMT_EXECUTE results\n * see : https://mariadb.com/kb/en/library/4-server-response-packets/\n */\nclass Parser extends Command {\n  constructor(resolve, reject, connOpts, cmdParam) {\n    super(cmdParam, resolve, reject);\n    this._responseIndex = 0;\n    this._rows = [];\n    this.opts = cmdParam.opts ? Object.assign({}, connOpts, cmdParam.opts) : connOpts;\n    this.sql = cmdParam.sql;\n    this.initialValues = cmdParam.values;\n    this.canSkipMeta = false;\n  }\n\n  /**\n   * Read Query response packet.\n   * packet can be :\n   * - a result-set\n   * - an ERR_Packet\n   * - a OK_Packet\n   * - LOCAL_INFILE Packet\n   *\n   * @param packet  query response\n   * @param out     output writer\n   * @param opts    connection options\n   * @param info    connection info\n   */\n  readResponsePacket(packet, out, opts, info) {\n    switch (packet.peek()) {\n      //*********************************************************************************************************\n      //* OK response\n      //*********************************************************************************************************\n      case 0x00:\n        return this.readOKPacket(packet, out, opts, info);\n\n      //*********************************************************************************************************\n      //* ERROR response\n      //*********************************************************************************************************\n      case 0xff:\n        // in case of timeout, free accumulated rows\n        this._columns = null;\n        this._rows = [];\n\n        const err = packet.readError(info, opts.logParam ? this.displaySql() : this.sql, this.cmdParam.stack);\n        //force in transaction status, since query will have created a transaction if autocommit is off\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        return this.throwError(err, info);\n\n      //*********************************************************************************************************\n      //* LOCAL INFILE response\n      //*********************************************************************************************************\n      case 0xfb:\n        return this.readLocalInfile(packet, out, opts, info);\n\n      //*********************************************************************************************************\n      //* Parser\n      //*********************************************************************************************************\n      default:\n        return this.readResultSet(packet, info);\n    }\n  }\n\n  /**\n   * Read result-set packets :\n   * see https://mariadb.com/kb/en/library/resultset/\n   *\n   * @param packet    Column count packet\n   * @param info      current connection information\n   * @returns {Parser.readColumn} next packet handler\n   */\n  readResultSet(packet, info) {\n    this._columnCount = packet.readUnsignedLength();\n\n    this._rows.push([]);\n    if (this.canSkipMeta && info.serverPermitSkipMeta && packet.readUInt8() === 0) {\n      // command support skipping meta\n      // server permits it\n      // and tells that no columns follows, using prepare results\n      this._columns = this.prepare.columns;\n      this.emit('fields', this._columns);\n      this.setParser();\n      return (this.onPacketReceive = info.eofDeprecated ? this.readResultSetRow : this.readIntermediateEOF);\n    }\n\n    this._columns = [];\n    this.onPacketReceive = this.readColumn;\n  }\n\n  /**\n   * Read OK_Packet.\n   * see https://mariadb.com/kb/en/library/ok_packet/\n   *\n   * @param packet    OK_Packet\n   * @param opts      connection options\n   * @param info      connection information\n   * @param out       output writer\n   * @returns {*}     null or {Result.readResponsePacket} in case of multi-result-set\n   */\n  readOKPacket(packet, out, opts, info) {\n    packet.skip(1); //skip header\n\n    const affectedRows = packet.readUnsignedLength();\n    let insertId = packet.readSignedLengthBigInt();\n    info.status = packet.readUInt16();\n    if (insertId != null && (this.opts.supportBigNumbers || this.opts.insertIdAsNumber)) {\n      if (this.opts.insertIdAsNumber && this.opts.checkNumberRange && !Number.isSafeInteger(Number(insertId))) {\n        this.onPacketReceive = info.status & ServerStatus.MORE_RESULTS_EXISTS ? this.readResponsePacket : null;\n        this.throwUnexpectedError(\n          `last insert id value ${insertId} can't safely be converted to number`,\n          false,\n          info,\n          '42000',\n          Errors.ER_PARSING_PRECISION\n        );\n        return;\n      }\n      if (this.opts.supportBigNumbers && (this.opts.bigNumberStrings || !Number.isSafeInteger(Number(insertId)))) {\n        insertId = insertId.toString();\n      } else insertId = Number(insertId);\n    }\n\n    const okPacket = new OkPacket(affectedRows, insertId, packet.readUInt16());\n    let mustRedirect = false;\n    if (info.status & ServerStatus.SESSION_STATE_CHANGED) {\n      packet.skipLengthCodedNumber();\n      while (packet.remaining()) {\n        const len = packet.readUnsignedLength();\n        if (len > 0) {\n          const subPacket = packet.subPacketLengthEncoded(len);\n          while (subPacket.remaining()) {\n            const type = subPacket.readUInt8();\n            switch (type) {\n              case StateChange.SESSION_TRACK_SYSTEM_VARIABLES:\n                let subSubPacket;\n                do {\n                  subSubPacket = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                  const variable = subSubPacket.readStringLengthEncoded();\n                  const value = subSubPacket.readStringLengthEncoded();\n\n                  switch (variable) {\n                    case 'character_set_client':\n                      info.collation = Collations.fromCharset(value);\n                      if (info.collation === undefined) {\n                        this.throwError(new Error(\"unknown charset : '\" + value + \"'\"), info);\n                        return;\n                      }\n                      opts.emit('collation', info.collation);\n                      break;\n\n                    case 'redirect_url':\n                      mustRedirect = true;\n                      info.redirect(value, this.okPacketSuccess.bind(this, okPacket, info));\n                      break;\n\n                    case 'connection_id':\n                      info.threadId = parseInt(value);\n                      break;\n\n                    default:\n                    //variable not used by driver\n                  }\n                } while (subSubPacket.remaining() > 0);\n                break;\n\n              case StateChange.SESSION_TRACK_SCHEMA:\n                const subSubPacket2 = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                info.database = subSubPacket2.readStringLengthEncoded();\n                break;\n            }\n          }\n        }\n      }\n    }\n    if (!mustRedirect) {\n      if (\n        info.redirectRequest &&\n        (info.status & ServerStatus.STATUS_IN_TRANS) === 0 &&\n        (info.status & ServerStatus.MORE_RESULTS_EXISTS) === 0\n      ) {\n        info.redirect(info.redirectRequest, this.okPacketSuccess.bind(this, okPacket, info));\n      } else {\n        this.okPacketSuccess(okPacket, info);\n      }\n    }\n  }\n\n  okPacketSuccess(okPacket, info) {\n    if (this._responseIndex === 0) {\n      // fast path for standard single result\n      if (info.status & ServerStatus.MORE_RESULTS_EXISTS) {\n        this._rows.push(okPacket);\n        this._responseIndex++;\n        return (this.onPacketReceive = this.readResponsePacket);\n      }\n      return this.success(this.opts.metaAsArray ? [okPacket, []] : okPacket);\n    }\n\n    this._rows.push(okPacket);\n\n    if (info.status & ServerStatus.MORE_RESULTS_EXISTS) {\n      this._responseIndex++;\n      return (this.onPacketReceive = this.readResponsePacket);\n    }\n\n    if (this.opts.metaAsArray) {\n      if (!this._meta) {\n        this._meta = new Array(this._responseIndex);\n      }\n      this._meta[this._responseIndex] = null;\n      this.success([this._rows, this._meta]);\n    } else {\n      this.success(this._rows);\n    }\n  }\n\n  success(val) {\n    this.successEnd(val);\n    this._columns = null;\n    this._rows = [];\n  }\n\n  /**\n   * Read column information metadata\n   * see https://mariadb.com/kb/en/library/resultset/#column-definition-packet\n   *\n   * @param packet    column definition packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */\n  readColumn(packet, out, opts, info) {\n    this._columns.push(new ColumnDefinition(packet, info, this.opts.rowsAsArray));\n\n    // last column\n    if (this._columns.length === this._columnCount) {\n      this.setParser();\n      if (this.canSkipMeta && info.serverPermitSkipMeta && this.prepare != null) {\n        // server can skip meta, but have force sending it.\n        // metadata have changed, updating prepare result accordingly\n        this.prepare.columns = this._columns;\n      }\n      this.emit('fields', this._columns);\n\n      return (this.onPacketReceive = info.eofDeprecated ? this.readResultSetRow : this.readIntermediateEOF);\n    }\n  }\n\n  setParser() {\n    this._parseFunction = new Array(this._columnCount);\n    if (this.opts.typeCast) {\n      for (let i = 0; i < this._columnCount; i++) {\n        this._parseFunction[i] = this.readCastValue.bind(this, this._columns[i]);\n      }\n    } else {\n      const dataParser = this.binary ? BinaryDecoder.parser : TextDecoder.parser;\n      for (let i = 0; i < this._columnCount; i++) {\n        this._parseFunction[i] = dataParser(this._columns[i], this.opts);\n      }\n    }\n\n    if (this.opts.rowsAsArray) {\n      this.parseRow = this.parseRowAsArray;\n    } else {\n      this.tableHeader = new Array(this._columnCount);\n      this.parseRow = this.binary ? this.parseRowStdBinary : this.parseRowStdText;\n      if (this.opts.nestTables) {\n        if (typeof this.opts.nestTables === 'string') {\n          for (let i = 0; i < this._columnCount; i++) {\n            this.tableHeader[i] = this._columns[i].table() + this.opts.nestTables + this._columns[i].name();\n          }\n          this.checkDuplicates();\n        } else if (this.opts.nestTables === true) {\n          this.parseRow = this.parseRowNested;\n          for (let i = 0; i < this._columnCount; i++) {\n            this.tableHeader[i] = [this._columns[i].table(), this._columns[i].name()];\n          }\n          this.checkNestTablesDuplicates();\n        }\n      } else {\n        for (let i = 0; i < this._columnCount; i++) {\n          this.tableHeader[i] = this._columns[i].name();\n        }\n        this.checkDuplicates();\n      }\n    }\n  }\n\n  checkDuplicates() {\n    if (this.opts.checkDuplicate) {\n      for (let i = 0; i < this._columnCount; i++) {\n        if (this.tableHeader.indexOf(this.tableHeader[i], i + 1) > 0) {\n          const dupes = this.tableHeader.reduce(\n            (acc, v, i, arr) => (arr.indexOf(v) !== i && acc.indexOf(v) === -1 ? acc.concat(v) : acc),\n            []\n          );\n          this.throwUnexpectedError(\n            `Error in results, duplicate field name \\`${dupes[0]}\\`.\\n(see option \\`checkDuplicate\\`)`,\n            false,\n            null,\n            '42000',\n            Errors.ER_DUPLICATE_FIELD\n          );\n        }\n      }\n    }\n  }\n\n  checkNestTablesDuplicates() {\n    if (this.opts.checkDuplicate) {\n      for (let i = 0; i < this._columnCount; i++) {\n        for (let j = 0; j < i; j++) {\n          if (this.tableHeader[j][0] === this.tableHeader[i][0] && this.tableHeader[j][1] === this.tableHeader[i][1]) {\n            this.throwUnexpectedError(\n              `Error in results, duplicate field name \\`${this.tableHeader[i][0]}\\`.\\`${this.tableHeader[i][1]}\\`\\n(see option \\`checkDuplicate\\`)`,\n              false,\n              null,\n              '42000',\n              Errors.ER_DUPLICATE_FIELD\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Read intermediate EOF.\n   * _only for server before MariaDB 10.2 / MySQL 5.7 that doesn't have CLIENT_DEPRECATE_EOF capability_\n   * see https://mariadb.com/kb/en/library/eof_packet/\n   *\n   * @param packet    EOF Packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */\n  readIntermediateEOF(packet, out, opts, info) {\n    if (packet.peek() !== 0xfe) {\n      return this.throwNewError('Error in protocol, expected EOF packet', true, info, '42000', Errors.ER_EOF_EXPECTED);\n    }\n\n    //before MySQL 5.7.5, last EOF doesn't contain the good flag SERVER_MORE_RESULTS_EXISTS\n    //for OUT parameters. It must be checked here\n    //(5.7.5 does have the CLIENT_DEPRECATE_EOF capability, so this packet in not even send)\n    packet.skip(3);\n    info.status = packet.readUInt16();\n    this.isOutParameter = info.status & ServerStatus.PS_OUT_PARAMS;\n    this.onPacketReceive = this.readResultSetRow;\n  }\n\n  handleNewRows(row) {\n    this._rows[this._responseIndex].push(row);\n  }\n\n  /**\n   * Check if packet is result-set end = EOF of OK_Packet with EOF header according to CLIENT_DEPRECATE_EOF capability\n   * or a result-set row\n   *\n   * @param packet    current packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */\n  readResultSetRow(packet, out, opts, info) {\n    if (packet.peek() >= 0xfe) {\n      if (packet.peek() === 0xff) {\n        //force in transaction status, since query will have created a transaction if autocommit is off\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        return this.throwError(\n          packet.readError(info, this.opts.logParam ? this.displaySql() : this.sql, this.cmdParam.err),\n          info\n        );\n      }\n\n      if ((!info.eofDeprecated && packet.length() < 13) || (info.eofDeprecated && packet.length() < 0xffffff)) {\n        if (!info.eofDeprecated) {\n          packet.skip(3);\n          info.status = packet.readUInt16();\n        } else {\n          packet.skip(1); //skip header\n          packet.skipLengthCodedNumber(); //skip update count\n          packet.skipLengthCodedNumber(); //skip insert id\n          info.status = packet.readUInt16();\n        }\n\n        if (\n          info.redirectRequest &&\n          (info.status & ServerStatus.STATUS_IN_TRANS) === 0 &&\n          (info.status & ServerStatus.MORE_RESULTS_EXISTS) === 0\n        ) {\n          info.redirect(info.redirectRequest, this.resultSetEndingPacketResult.bind(this, info));\n        } else {\n          this.resultSetEndingPacketResult(info);\n        }\n        return;\n      }\n    }\n\n    this.handleNewRows(this.parseRow(packet));\n  }\n\n  resultSetEndingPacketResult(info) {\n    if (this.opts.metaAsArray) {\n      //return promise object as array :\n      // example for SELECT 1 =>\n      // [\n      //   [ {\"1\": 1} ],      //rows\n      //   [ColumnDefinition] //meta\n      // ]\n\n      if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\n        if (!this._meta) this._meta = [];\n        this._meta[this._responseIndex] = this._columns;\n        this._responseIndex++;\n        return (this.onPacketReceive = this.readResponsePacket);\n      }\n      if (this._responseIndex === 0) {\n        this.success([this._rows[0], this._columns]);\n      } else {\n        if (!this._meta) this._meta = [];\n        this._meta[this._responseIndex] = this._columns;\n        this.success([this._rows, this._meta]);\n      }\n    } else {\n      //return promise object as rows that have meta property :\n      // example for SELECT 1 =>\n      // [\n      //   {\"1\": 1},\n      //   meta: [ColumnDefinition]\n      // ]\n      Object.defineProperty(this._rows[this._responseIndex], 'meta', {\n        value: this._columns,\n        writable: true,\n        enumerable: this.opts.metaEnumerable\n      });\n\n      if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\n        this._responseIndex++;\n        return (this.onPacketReceive = this.readResponsePacket);\n      }\n      this.success(this._responseIndex === 0 ? this._rows[0] : this._rows);\n    }\n  }\n\n  /**\n   * Display current SQL with parameters (truncated if too big)\n   *\n   * @returns {string}\n   */\n  displaySql() {\n    if (this.opts && this.initialValues) {\n      if (this.sql.length > this.opts.debugLen) {\n        return this.sql.substring(0, this.opts.debugLen) + '...';\n      }\n\n      let sqlMsg = this.sql + ' - parameters:';\n      return Parser.logParameters(this.opts, sqlMsg, this.initialValues);\n    }\n    if (this.sql.length > this.opts.debugLen) {\n      return this.sql.substring(0, this.opts.debugLen) + '... - parameters:[]';\n    }\n    return this.sql + ' - parameters:[]';\n  }\n\n  static logParameters(opts, sqlMsg, values) {\n    if (opts.namedPlaceholders) {\n      sqlMsg += '{';\n      let first = true;\n      for (let key in values) {\n        if (first) {\n          first = false;\n        } else {\n          sqlMsg += ',';\n        }\n        sqlMsg += \"'\" + key + \"':\";\n        let param = values[key];\n        sqlMsg = Parser.logParam(sqlMsg, param);\n        if (sqlMsg.length > opts.debugLen) {\n          return sqlMsg.substring(0, opts.debugLen) + '...';\n        }\n      }\n      sqlMsg += '}';\n    } else {\n      sqlMsg += '[';\n      if (Array.isArray(values)) {\n        for (let i = 0; i < values.length; i++) {\n          if (i !== 0) sqlMsg += ',';\n          let param = values[i];\n          sqlMsg = Parser.logParam(sqlMsg, param);\n          if (sqlMsg.length > opts.debugLen) {\n            return sqlMsg.substring(0, opts.debugLen) + '...';\n          }\n        }\n      } else {\n        sqlMsg = Parser.logParam(sqlMsg, values);\n        if (sqlMsg.length > opts.debugLen) {\n          return sqlMsg.substring(0, opts.debugLen) + '...';\n        }\n      }\n      sqlMsg += ']';\n    }\n    return sqlMsg;\n  }\n\n  parseRowAsArray(packet) {\n    const row = new Array(this._columnCount);\n    const nullBitMap = this.binary ? BinaryDecoder.newRow(packet, this._columns) : null;\n    for (let i = 0; i < this._columnCount; i++) {\n      row[i] = this._parseFunction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n    }\n    return row;\n  }\n\n  parseRowNested(packet) {\n    const row = {};\n    const nullBitMap = this.binary ? BinaryDecoder.newRow(packet, this._columns) : null;\n    for (let i = 0; i < this._columnCount; i++) {\n      if (!row[this.tableHeader[i][0]]) row[this.tableHeader[i][0]] = {};\n      row[this.tableHeader[i][0]][this.tableHeader[i][1]] = this._parseFunction[i](\n        packet,\n        this.opts,\n        this.unexpectedError,\n        nullBitMap,\n        i\n      );\n    }\n    return row;\n  }\n\n  parseRowStdText(packet) {\n    const row = {};\n    for (let i = 0; i < this._columnCount; i++) {\n      row[this.tableHeader[i]] = this._parseFunction[i](packet, this.opts, this.unexpectedError);\n    }\n    return row;\n  }\n\n  parseRowStdBinary(packet) {\n    const nullBitMap = BinaryDecoder.newRow(packet, this._columns);\n    const row = {};\n    for (let i = 0; i < this._columnCount; i++) {\n      row[this.tableHeader[i]] = this._parseFunction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n    }\n    return row;\n  }\n\n  readCastValue(column, packet, opts, unexpectedError, nullBitmap, index) {\n    if (this.binary) {\n      BinaryDecoder.castWrapper(column, packet, opts, nullBitmap, index);\n    } else {\n      TextDecoder.castWrapper(column, packet, opts, nullBitmap, index);\n    }\n    const dataParser = this.binary ? BinaryDecoder.parser : TextDecoder.parser;\n    return opts.typeCast(column, dataParser(column, opts).bind(null, packet, opts, unexpectedError, nullBitmap, index));\n  }\n\n  readLocalInfile(packet, out, opts, info) {\n    packet.skip(1); //skip header\n    out.startPacket(this);\n\n    const fileName = packet.readStringRemaining();\n\n    if (!Parse.validateFileName(this.sql, this.initialValues, fileName)) {\n      out.writeEmptyPacket();\n      const error = Errors.createError(\n        \"LOCAL INFILE wrong filename. '\" +\n          fileName +\n          \"' doesn't correspond to query \" +\n          this.sql +\n          '. Query cancelled. Check for malicious server / proxy',\n        Errors.ER_LOCAL_INFILE_WRONG_FILENAME,\n        info,\n        'HY000',\n        this.sql\n      );\n      process.nextTick(this.reject, error);\n      this.reject = null;\n      this.resolve = null;\n      return (this.onPacketReceive = this.readResponsePacket);\n    }\n\n    // this.sequenceNo = 2;\n    // this.compressSequenceNo = 2;\n    let stream;\n    try {\n      stream = this.opts.infileStreamFactory ? this.opts.infileStreamFactory(fileName) : fs.createReadStream(fileName);\n    } catch (e) {\n      out.writeEmptyPacket();\n      const error = Errors.createError(\n        `LOCAL INFILE infileStreamFactory failed`,\n        Errors.ER_LOCAL_INFILE_NOT_READABLE,\n        info,\n        '22000',\n        this.opts.logParam ? this.displaySql() : this.sql\n      );\n      error.cause = e;\n      process.nextTick(this.reject, error);\n      this.reject = null;\n      this.resolve = null;\n      return (this.onPacketReceive = this.readResponsePacket);\n    }\n\n    stream.on(\n      'error',\n      function (err) {\n        out.writeEmptyPacket();\n        const error = Errors.createError(\n          `LOCAL INFILE command failed: ${err.message}`,\n          Errors.ER_LOCAL_INFILE_NOT_READABLE,\n          info,\n          '22000',\n          this.sql\n        );\n        process.nextTick(this.reject, error);\n        this.reject = null;\n        this.resolve = null;\n      }.bind(this)\n    );\n    stream.on('data', (chunk) => {\n      out.writeBuffer(chunk, 0, chunk.length);\n    });\n    stream.on('end', () => {\n      if (!out.isEmpty()) {\n        out.flushBuffer(false);\n      }\n      out.writeEmptyPacket();\n    });\n    this.onPacketReceive = this.readResponsePacket;\n  }\n\n  static logParam(sqlMsg, param) {\n    if (param == null) {\n      sqlMsg += param === undefined ? 'undefined' : 'null';\n    } else {\n      switch (param.constructor.name) {\n        case 'Buffer':\n          sqlMsg += '0x' + param.toString('hex', 0, Math.min(1024, param.length)) + '';\n          break;\n\n        case 'String':\n          sqlMsg += \"'\" + param + \"'\";\n          break;\n\n        case 'Date':\n          sqlMsg += getStringDate(param);\n          break;\n\n        case 'Object':\n          sqlMsg += JSON.stringify(param);\n          break;\n\n        default:\n          sqlMsg += param.toString();\n      }\n    }\n    return sqlMsg;\n  }\n}\n\nfunction getStringDate(param) {\n  return (\n    \"'\" +\n    ('00' + (param.getMonth() + 1)).slice(-2) +\n    '/' +\n    ('00' + param.getDate()).slice(-2) +\n    '/' +\n    param.getFullYear() +\n    ' ' +\n    ('00' + param.getHours()).slice(-2) +\n    ':' +\n    ('00' + param.getMinutes()).slice(-2) +\n    ':' +\n    ('00' + param.getSeconds()).slice(-2) +\n    '.' +\n    ('000' + param.getMilliseconds()).slice(-3) +\n    \"'\"\n  );\n}\n\nmodule.exports = Parser;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\nconst PluginAuth = require('./plugin-auth');\n\n/**\n * Send password in clear.\n * (used only when SSL is active)\n */\nclass ClearPasswordAuth extends PluginAuth {\n  constructor(packSeq, compressPackSeq, pluginData, cmdParam, reject, multiAuthResolver) {\n    super(cmdParam, multiAuthResolver, reject);\n    this.sequenceNo = packSeq;\n    this.compressSequenceNo = compressPackSeq;\n    this.counter = 0;\n    this.multiAuthResolver = multiAuthResolver;\n  }\n  start(out, opts, info) {\n    out.startPacket(this);\n    const pwd = opts.password;\n    if (pwd) {\n      if (Array.isArray(pwd)) {\n        out.writeString(pwd[this.counter++]);\n      } else {\n        out.writeString(pwd);\n      }\n    }\n    out.writeInt8(0);\n    out.flushPacket();\n    this.onPacketReceive = this.response;\n  }\n  response(packet, out, opts, info) {\n    const marker = packet.peek();\n    switch (marker) {\n      //*********************************************************************************************************\n      //* OK_Packet and Err_Packet ending packet\n      //*********************************************************************************************************\n      case 0x00:\n      case 0xff:\n        this.emit('send_end');\n        return this.multiAuthResolver(packet, out, opts, info);\n      default:\n        packet.readBuffer(); // prompt\n        out.startPacket(this);\n        out.writeString('password');\n        out.writeInt8(0);\n        out.flushPacket();\n    }\n  }\n}\nmodule.exports = ClearPasswordAuth;","map":{"version":3,"names":["PluginAuth","require","ClearPasswordAuth","constructor","packSeq","compressPackSeq","pluginData","cmdParam","reject","multiAuthResolver","sequenceNo","compressSequenceNo","counter","start","out","opts","info","startPacket","pwd","password","Array","isArray","writeString","writeInt8","flushPacket","onPacketReceive","response","packet","marker","peek","emit","readBuffer","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/cmd/handshake/auth/clear-password-auth.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\nconst PluginAuth = require('./plugin-auth');\n\n/**\n * Send password in clear.\n * (used only when SSL is active)\n */\nclass ClearPasswordAuth extends PluginAuth {\n  constructor(packSeq, compressPackSeq, pluginData, cmdParam, reject, multiAuthResolver) {\n    super(cmdParam, multiAuthResolver, reject);\n    this.sequenceNo = packSeq;\n    this.compressSequenceNo = compressPackSeq;\n    this.counter = 0;\n    this.multiAuthResolver = multiAuthResolver;\n  }\n\n  start(out, opts, info) {\n    out.startPacket(this);\n    const pwd = opts.password;\n    if (pwd) {\n      if (Array.isArray(pwd)) {\n        out.writeString(pwd[this.counter++]);\n      } else {\n        out.writeString(pwd);\n      }\n    }\n    out.writeInt8(0);\n    out.flushPacket();\n    this.onPacketReceive = this.response;\n  }\n\n  response(packet, out, opts, info) {\n    const marker = packet.peek();\n    switch (marker) {\n      //*********************************************************************************************************\n      //* OK_Packet and Err_Packet ending packet\n      //*********************************************************************************************************\n      case 0x00:\n      case 0xff:\n        this.emit('send_end');\n        return this.multiAuthResolver(packet, out, opts, info);\n\n      default:\n        packet.readBuffer(); // prompt\n        out.startPacket(this);\n\n        out.writeString('password');\n        out.writeInt8(0);\n        out.flushPacket();\n    }\n  }\n}\n\nmodule.exports = ClearPasswordAuth;\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;;AAE3C;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,SAASF,UAAU,CAAC;EACzCG,WAAWA,CAACC,OAAO,EAAEC,eAAe,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,iBAAiB,EAAE;IACrF,KAAK,CAACF,QAAQ,EAAEE,iBAAiB,EAAED,MAAM,CAAC;IAC1C,IAAI,CAACE,UAAU,GAAGN,OAAO;IACzB,IAAI,CAACO,kBAAkB,GAAGN,eAAe;IACzC,IAAI,CAACO,OAAO,GAAG,CAAC;IAChB,IAAI,CAACH,iBAAiB,GAAGA,iBAAiB;EAC5C;EAEAI,KAAKA,CAACC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACrBF,GAAG,CAACG,WAAW,CAAC,IAAI,CAAC;IACrB,MAAMC,GAAG,GAAGH,IAAI,CAACI,QAAQ;IACzB,IAAID,GAAG,EAAE;MACP,IAAIE,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;QACtBJ,GAAG,CAACQ,WAAW,CAACJ,GAAG,CAAC,IAAI,CAACN,OAAO,EAAE,CAAC,CAAC;MACtC,CAAC,MAAM;QACLE,GAAG,CAACQ,WAAW,CAACJ,GAAG,CAAC;MACtB;IACF;IACAJ,GAAG,CAACS,SAAS,CAAC,CAAC,CAAC;IAChBT,GAAG,CAACU,WAAW,CAAC,CAAC;IACjB,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,QAAQ;EACtC;EAEAA,QAAQA,CAACC,MAAM,EAAEb,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAE;IAChC,MAAMY,MAAM,GAAGD,MAAM,CAACE,IAAI,CAAC,CAAC;IAC5B,QAAQD,MAAM;MACZ;MACA;MACA;MACA,KAAK,IAAI;MACT,KAAK,IAAI;QACP,IAAI,CAACE,IAAI,CAAC,UAAU,CAAC;QACrB,OAAO,IAAI,CAACrB,iBAAiB,CAACkB,MAAM,EAAEb,GAAG,EAAEC,IAAI,EAAEC,IAAI,CAAC;MAExD;QACEW,MAAM,CAACI,UAAU,CAAC,CAAC,CAAC,CAAC;QACrBjB,GAAG,CAACG,WAAW,CAAC,IAAI,CAAC;QAErBH,GAAG,CAACQ,WAAW,CAAC,UAAU,CAAC;QAC3BR,GAAG,CAACS,SAAS,CAAC,CAAC,CAAC;QAChBT,GAAG,CAACU,WAAW,CAAC,CAAC;IACrB;EACF;AACF;AAEAQ,MAAM,CAACC,OAAO,GAAG/B,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nrequire('./check-node');\nconst Connection = require('./lib/connection');\nconst ConnectionPromise = require('./lib/connection-promise');\nconst PoolPromise = require('./lib/pool-promise');\nconst Cluster = require('./lib/cluster');\nconst ConnOptions = require('./lib/config/connection-options');\nconst PoolOptions = require('./lib/config/pool-options');\nconst ClusterOptions = require('./lib/config/cluster-options');\nconst CommandParameter = require('./lib/command-parameter');\nmodule.exports.version = require('./package.json').version;\nmodule.exports.SqlError = require('./lib/misc/errors').SqlError;\nmodule.exports.defaultOptions = function defaultOptions(opts) {\n  const connOpts = new ConnOptions(opts);\n  const res = {};\n  for (const [key, value] of Object.entries(connOpts)) {\n    if (!key.startsWith('_')) {\n      res[key] = value;\n    }\n  }\n  return res;\n};\nmodule.exports.createConnection = function createConnection(opts) {\n  try {\n    const options = new ConnOptions(opts);\n    const conn = new Connection(options);\n    const connPromise = new ConnectionPromise(conn);\n    return conn.connect().then(() => Promise.resolve(connPromise));\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};\nmodule.exports.createPool = function createPool(opts) {\n  const options = new PoolOptions(opts);\n  const pool = new PoolPromise(options);\n  // adding a default error handler to avoid exiting application on connection error.\n  pool.on('error', err => {});\n  return pool;\n};\nmodule.exports.createPoolCluster = function createPoolCluster(opts) {\n  const options = new ClusterOptions(opts);\n  return new Cluster(options);\n};\nmodule.exports.importFile = function importFile(opts) {\n  try {\n    const options = new ConnOptions(opts);\n    const conn = new Connection(options);\n    return conn.connect().then(() => {\n      return new Promise(conn.importFile.bind(conn, Object.assign({\n        skipDbCheck: true\n      }, opts)));\n    }).finally(() => {\n      new Promise(conn.end.bind(conn, new CommandParameter())).catch(console.log);\n    });\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};","map":{"version":3,"names":["require","Connection","ConnectionPromise","PoolPromise","Cluster","ConnOptions","PoolOptions","ClusterOptions","CommandParameter","module","exports","version","SqlError","defaultOptions","opts","connOpts","res","key","value","Object","entries","startsWith","createConnection","options","conn","connPromise","connect","then","Promise","resolve","err","reject","createPool","pool","on","createPoolCluster","importFile","bind","assign","skipDbCheck","finally","end","catch","console","log"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/promise.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nrequire('./check-node');\n\nconst Connection = require('./lib/connection');\nconst ConnectionPromise = require('./lib/connection-promise');\nconst PoolPromise = require('./lib/pool-promise');\nconst Cluster = require('./lib/cluster');\n\nconst ConnOptions = require('./lib/config/connection-options');\nconst PoolOptions = require('./lib/config/pool-options');\nconst ClusterOptions = require('./lib/config/cluster-options');\nconst CommandParameter = require('./lib/command-parameter');\n\nmodule.exports.version = require('./package.json').version;\nmodule.exports.SqlError = require('./lib/misc/errors').SqlError;\n\nmodule.exports.defaultOptions = function defaultOptions(opts) {\n  const connOpts = new ConnOptions(opts);\n  const res = {};\n  for (const [key, value] of Object.entries(connOpts)) {\n    if (!key.startsWith('_')) {\n      res[key] = value;\n    }\n  }\n  return res;\n};\n\nmodule.exports.createConnection = function createConnection(opts) {\n  try {\n    const options = new ConnOptions(opts);\n    const conn = new Connection(options);\n    const connPromise = new ConnectionPromise(conn);\n\n    return conn.connect().then(() => Promise.resolve(connPromise));\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};\n\nmodule.exports.createPool = function createPool(opts) {\n  const options = new PoolOptions(opts);\n  const pool = new PoolPromise(options);\n  // adding a default error handler to avoid exiting application on connection error.\n  pool.on('error', (err) => {});\n  return pool;\n};\n\nmodule.exports.createPoolCluster = function createPoolCluster(opts) {\n  const options = new ClusterOptions(opts);\n  return new Cluster(options);\n};\n\nmodule.exports.importFile = function importFile(opts) {\n  try {\n    const options = new ConnOptions(opts);\n    const conn = new Connection(options);\n\n    return conn\n      .connect()\n      .then(() => {\n        return new Promise(conn.importFile.bind(conn, Object.assign({ skipDbCheck: true }, opts)));\n      })\n      .finally(() => {\n        new Promise(conn.end.bind(conn, new CommandParameter())).catch(console.log);\n      });\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
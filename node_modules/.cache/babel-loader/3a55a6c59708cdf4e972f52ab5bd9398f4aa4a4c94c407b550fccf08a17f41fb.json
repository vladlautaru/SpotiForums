{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Parser = require('./parser');\nconst Errors = require('../misc/errors');\nconst Parse = require('../misc/parse');\nconst TextEncoder = require('./encoder/text-encoder');\nconst {\n  Readable\n} = require('stream');\nconst QUOTE = 0x27;\n\n/**\n * Protocol COM_QUERY\n * see : https://mariadb.com/kb/en/library/com_query/\n */\nclass Query extends Parser {\n  constructor(resolve, reject, connOpts, cmdParam) {\n    super(resolve, reject, connOpts, cmdParam);\n    this.writeParam = TextEncoder.writeParam;\n    this.binary = false;\n  }\n\n  /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    if (opts.logger.query) opts.logger.query(`QUERY: ${opts.logParam ? this.displaySql() : this.sql}`);\n    this.onPacketReceive = this.readResponsePacket;\n    if (this.initialValues === undefined) {\n      //shortcut if no parameters\n      out.startPacket(this);\n      out.writeInt8(0x03);\n      if (!this.handleTimeout(out, info)) return;\n      out.writeString(this.sql);\n      out.flush();\n      this.emit('send_end');\n      return;\n    }\n    this.encodedSql = out.encodeString(this.sql);\n    if (this.opts.namedPlaceholders) {\n      try {\n        const parsed = Parse.splitQueryPlaceholder(this.encodedSql, info, this.initialValues, this.opts.logParam ? this.displaySql.bind(this) : () => this.sql);\n        this.paramPositions = parsed.paramPositions;\n        this.values = parsed.values;\n      } catch (err) {\n        this.emit('send_end');\n        return this.throwError(err, info);\n      }\n    } else {\n      this.paramPositions = Parse.splitQuery(this.encodedSql);\n      this.values = Array.isArray(this.initialValues) ? this.initialValues : [this.initialValues];\n      if (!this.validateParameters(info)) return;\n    }\n    out.startPacket(this);\n    out.writeInt8(0x03);\n    if (!this.handleTimeout(out, info)) return;\n    this.paramPos = 0;\n    this.sqlPos = 0;\n\n    //********************************************\n    // send params\n    //********************************************\n    const len = this.paramPositions.length / 2;\n    for (this.valueIdx = 0; this.valueIdx < len;) {\n      out.writeBuffer(this.encodedSql, this.sqlPos, this.paramPositions[this.paramPos++] - this.sqlPos);\n      this.sqlPos = this.paramPositions[this.paramPos++];\n      const value = this.values[this.valueIdx++];\n      if (value != null && typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') {\n        this.sending = true;\n        //********************************************\n        // param is stream,\n        // now all params will be written by event\n        //********************************************\n        this.paramWritten = this._paramWritten.bind(this, out, info);\n        out.writeInt8(QUOTE); //'\n        value.on('data', out.writeBufferEscape.bind(out));\n        value.on('end', function () {\n          out.writeInt8(QUOTE); //'\n          this.paramWritten();\n        }.bind(this));\n        return;\n      } else {\n        //********************************************\n        // param isn't stream. directly write in buffer\n        //********************************************\n        this.writeParam(out, value, this.opts, info);\n      }\n    }\n    out.writeBuffer(this.encodedSql, this.sqlPos, this.encodedSql.length - this.sqlPos);\n    out.flush();\n    this.emit('send_end');\n  }\n\n  /**\n   * If timeout is set, prepend query with SET STATEMENT max_statement_time=xx FOR, or throw an error\n   * @param out buffer\n   * @param info server information\n   * @returns {boolean} false if an error has been thrown\n   */\n  handleTimeout(out, info) {\n    if (this.opts.timeout) {\n      if (info.isMariaDB()) {\n        if (info.hasMinVersion(10, 1, 2)) {\n          out.writeString(`SET STATEMENT max_statement_time=${this.opts.timeout / 1000} FOR `);\n          return true;\n        } else {\n          this.sendCancelled(`Cannot use timeout for xpand/MariaDB server before 10.1.2. timeout value: ${this.opts.timeout}`, Errors.ER_TIMEOUT_NOT_SUPPORTED, info);\n          return false;\n        }\n      } else {\n        //not available for MySQL\n        // max_execution time exist, but only for select, and as hint\n        this.sendCancelled(`Cannot use timeout for MySQL server. timeout value: ${this.opts.timeout}`, Errors.ER_TIMEOUT_NOT_SUPPORTED, info);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */\n  validateParameters(info) {\n    //validate parameter size.\n    if (this.paramPositions.length / 2 > this.values.length) {\n      this.sendCancelled(`Parameter at position ${this.values.length + 1} is not set`, Errors.ER_MISSING_PARAMETER, info);\n      return false;\n    }\n    return true;\n  }\n  _paramWritten(out, info) {\n    while (true) {\n      if (this.valueIdx === this.paramPositions.length / 2) {\n        //********************************************\n        // all parameters are written.\n        // flush packet\n        //********************************************\n        out.writeBuffer(this.encodedSql, this.sqlPos, this.encodedSql.length - this.sqlPos);\n        out.flush();\n        this.sending = false;\n        this.emit('send_end');\n        return;\n      } else {\n        const value = this.values[this.valueIdx++];\n        out.writeBuffer(this.encodedSql, this.sqlPos, this.paramPositions[this.paramPos++] - this.sqlPos);\n        this.sqlPos = this.paramPositions[this.paramPos++];\n        if (value == null) {\n          out.writeStringAscii('NULL');\n          continue;\n        }\n        if (typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') {\n          //********************************************\n          // param is stream,\n          //********************************************\n          out.writeInt8(QUOTE);\n          value.once('end', function () {\n            out.writeInt8(QUOTE);\n            this._paramWritten(out, info);\n          }.bind(this));\n          value.on('data', out.writeBufferEscape.bind(out));\n          return;\n        }\n\n        //********************************************\n        // param isn't stream. directly write in buffer\n        //********************************************\n        this.writeParam(out, value, this.opts, info);\n      }\n    }\n  }\n  _stream(socket, options) {\n    this.socket = socket;\n    options = options || {};\n    options.objectMode = true;\n    options.read = () => {\n      this.socket.resume();\n    };\n    this.inStream = new Readable(options);\n    this.on('fields', function (meta) {\n      this.inStream.emit('fields', meta);\n    });\n    this.on('error', function (err) {\n      this.inStream.emit('error', err);\n    });\n    this.on('close', function (err) {\n      this.inStream.emit('error', err);\n    });\n    this.on('end', function (err) {\n      if (err) this.inStream.emit('error', err);\n      this.socket.resume();\n      this.inStream.push(null);\n    });\n    this.inStream.close = function () {\n      this.handleNewRows = () => {};\n      this.socket.resume();\n    }.bind(this);\n    this.handleNewRows = function (row) {\n      if (!this.inStream.push(row)) {\n        this.socket.pause();\n      }\n    };\n    return this.inStream;\n  }\n}\nmodule.exports = Query;","map":{"version":3,"names":["Parser","require","Errors","Parse","TextEncoder","Readable","QUOTE","Query","constructor","resolve","reject","connOpts","cmdParam","writeParam","binary","start","out","opts","info","logger","query","logParam","displaySql","sql","onPacketReceive","readResponsePacket","initialValues","undefined","startPacket","writeInt8","handleTimeout","writeString","flush","emit","encodedSql","encodeString","namedPlaceholders","parsed","splitQueryPlaceholder","bind","paramPositions","values","err","throwError","splitQuery","Array","isArray","validateParameters","paramPos","sqlPos","len","length","valueIdx","writeBuffer","value","pipe","read","sending","paramWritten","_paramWritten","on","writeBufferEscape","timeout","isMariaDB","hasMinVersion","sendCancelled","ER_TIMEOUT_NOT_SUPPORTED","ER_MISSING_PARAMETER","writeStringAscii","once","_stream","socket","options","objectMode","resume","inStream","meta","push","close","handleNewRows","row","pause","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/cmd/query.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Parser = require('./parser');\nconst Errors = require('../misc/errors');\nconst Parse = require('../misc/parse');\nconst TextEncoder = require('./encoder/text-encoder');\nconst { Readable } = require('stream');\nconst QUOTE = 0x27;\n\n/**\n * Protocol COM_QUERY\n * see : https://mariadb.com/kb/en/library/com_query/\n */\nclass Query extends Parser {\n  constructor(resolve, reject, connOpts, cmdParam) {\n    super(resolve, reject, connOpts, cmdParam);\n    this.writeParam = TextEncoder.writeParam;\n    this.binary = false;\n  }\n\n  /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    if (opts.logger.query) opts.logger.query(`QUERY: ${opts.logParam ? this.displaySql() : this.sql}`);\n    this.onPacketReceive = this.readResponsePacket;\n    if (this.initialValues === undefined) {\n      //shortcut if no parameters\n      out.startPacket(this);\n      out.writeInt8(0x03);\n      if (!this.handleTimeout(out, info)) return;\n      out.writeString(this.sql);\n      out.flush();\n      this.emit('send_end');\n      return;\n    }\n\n    this.encodedSql = out.encodeString(this.sql);\n\n    if (this.opts.namedPlaceholders) {\n      try {\n        const parsed = Parse.splitQueryPlaceholder(\n          this.encodedSql,\n          info,\n          this.initialValues,\n          this.opts.logParam ? this.displaySql.bind(this) : () => this.sql\n        );\n        this.paramPositions = parsed.paramPositions;\n        this.values = parsed.values;\n      } catch (err) {\n        this.emit('send_end');\n        return this.throwError(err, info);\n      }\n    } else {\n      this.paramPositions = Parse.splitQuery(this.encodedSql);\n      this.values = Array.isArray(this.initialValues) ? this.initialValues : [this.initialValues];\n      if (!this.validateParameters(info)) return;\n    }\n\n    out.startPacket(this);\n    out.writeInt8(0x03);\n    if (!this.handleTimeout(out, info)) return;\n\n    this.paramPos = 0;\n    this.sqlPos = 0;\n\n    //********************************************\n    // send params\n    //********************************************\n    const len = this.paramPositions.length / 2;\n    for (this.valueIdx = 0; this.valueIdx < len; ) {\n      out.writeBuffer(this.encodedSql, this.sqlPos, this.paramPositions[this.paramPos++] - this.sqlPos);\n      this.sqlPos = this.paramPositions[this.paramPos++];\n\n      const value = this.values[this.valueIdx++];\n\n      if (\n        value != null &&\n        typeof value === 'object' &&\n        typeof value.pipe === 'function' &&\n        typeof value.read === 'function'\n      ) {\n        this.sending = true;\n        //********************************************\n        // param is stream,\n        // now all params will be written by event\n        //********************************************\n        this.paramWritten = this._paramWritten.bind(this, out, info);\n        out.writeInt8(QUOTE); //'\n        value.on('data', out.writeBufferEscape.bind(out));\n\n        value.on(\n          'end',\n          function () {\n            out.writeInt8(QUOTE); //'\n            this.paramWritten();\n          }.bind(this)\n        );\n\n        return;\n      } else {\n        //********************************************\n        // param isn't stream. directly write in buffer\n        //********************************************\n        this.writeParam(out, value, this.opts, info);\n      }\n    }\n    out.writeBuffer(this.encodedSql, this.sqlPos, this.encodedSql.length - this.sqlPos);\n    out.flush();\n    this.emit('send_end');\n  }\n\n  /**\n   * If timeout is set, prepend query with SET STATEMENT max_statement_time=xx FOR, or throw an error\n   * @param out buffer\n   * @param info server information\n   * @returns {boolean} false if an error has been thrown\n   */\n  handleTimeout(out, info) {\n    if (this.opts.timeout) {\n      if (info.isMariaDB()) {\n        if (info.hasMinVersion(10, 1, 2)) {\n          out.writeString(`SET STATEMENT max_statement_time=${this.opts.timeout / 1000} FOR `);\n          return true;\n        } else {\n          this.sendCancelled(\n            `Cannot use timeout for xpand/MariaDB server before 10.1.2. timeout value: ${this.opts.timeout}`,\n            Errors.ER_TIMEOUT_NOT_SUPPORTED,\n            info\n          );\n          return false;\n        }\n      } else {\n        //not available for MySQL\n        // max_execution time exist, but only for select, and as hint\n        this.sendCancelled(\n          `Cannot use timeout for MySQL server. timeout value: ${this.opts.timeout}`,\n          Errors.ER_TIMEOUT_NOT_SUPPORTED,\n          info\n        );\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */\n  validateParameters(info) {\n    //validate parameter size.\n    if (this.paramPositions.length / 2 > this.values.length) {\n      this.sendCancelled(\n        `Parameter at position ${this.values.length + 1} is not set`,\n        Errors.ER_MISSING_PARAMETER,\n        info\n      );\n      return false;\n    }\n    return true;\n  }\n\n  _paramWritten(out, info) {\n    while (true) {\n      if (this.valueIdx === this.paramPositions.length / 2) {\n        //********************************************\n        // all parameters are written.\n        // flush packet\n        //********************************************\n        out.writeBuffer(this.encodedSql, this.sqlPos, this.encodedSql.length - this.sqlPos);\n        out.flush();\n        this.sending = false;\n        this.emit('send_end');\n        return;\n      } else {\n        const value = this.values[this.valueIdx++];\n        out.writeBuffer(this.encodedSql, this.sqlPos, this.paramPositions[this.paramPos++] - this.sqlPos);\n        this.sqlPos = this.paramPositions[this.paramPos++];\n\n        if (value == null) {\n          out.writeStringAscii('NULL');\n          continue;\n        }\n\n        if (typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') {\n          //********************************************\n          // param is stream,\n          //********************************************\n          out.writeInt8(QUOTE);\n          value.once(\n            'end',\n            function () {\n              out.writeInt8(QUOTE);\n              this._paramWritten(out, info);\n            }.bind(this)\n          );\n          value.on('data', out.writeBufferEscape.bind(out));\n          return;\n        }\n\n        //********************************************\n        // param isn't stream. directly write in buffer\n        //********************************************\n        this.writeParam(out, value, this.opts, info);\n      }\n    }\n  }\n\n  _stream(socket, options) {\n    this.socket = socket;\n    options = options || {};\n    options.objectMode = true;\n    options.read = () => {\n      this.socket.resume();\n    };\n    this.inStream = new Readable(options);\n\n    this.on('fields', function (meta) {\n      this.inStream.emit('fields', meta);\n    });\n\n    this.on('error', function (err) {\n      this.inStream.emit('error', err);\n    });\n\n    this.on('close', function (err) {\n      this.inStream.emit('error', err);\n    });\n\n    this.on('end', function (err) {\n      if (err) this.inStream.emit('error', err);\n      this.socket.resume();\n      this.inStream.push(null);\n    });\n\n    this.inStream.close = function () {\n      this.handleNewRows = () => {};\n      this.socket.resume();\n    }.bind(this);\n\n    this.handleNewRows = function (row) {\n      if (!this.inStream.push(row)) {\n        this.socket.pause();\n      }\n    };\n\n    return this.inStream;\n  }\n}\n\nmodule.exports = Query;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
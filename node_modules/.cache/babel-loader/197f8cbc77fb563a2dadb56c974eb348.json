{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nrequire('./check-node');\nconst Connection = require('./lib/connection');\nconst ConnectionPromise = require('./lib/connection-promise');\nconst PoolPromise = require('./lib/pool-promise');\nconst Cluster = require('./lib/cluster');\nconst ConnOptions = require('./lib/config/connection-options');\nconst PoolOptions = require('./lib/config/pool-options');\nconst ClusterOptions = require('./lib/config/cluster-options');\nconst CommandParameter = require('./lib/command-parameter');\nmodule.exports.version = require('./package.json').version;\nmodule.exports.SqlError = require('./lib/misc/errors').SqlError;\nmodule.exports.defaultOptions = function defaultOptions(opts) {\n  const connOpts = new ConnOptions(opts);\n  const res = {};\n  for (const [key, value] of Object.entries(connOpts)) {\n    if (!key.startsWith('_')) {\n      res[key] = value;\n    }\n  }\n  return res;\n};\nmodule.exports.createConnection = function createConnection(opts) {\n  try {\n    const options = new ConnOptions(opts);\n    const conn = new Connection(options);\n    const connPromise = new ConnectionPromise(conn);\n    return conn.connect().then(() => Promise.resolve(connPromise));\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};\nmodule.exports.createPool = function createPool(opts) {\n  const options = new PoolOptions(opts);\n  const pool = new PoolPromise(options);\n  // adding a default error handler to avoid exiting application on connection error.\n  pool.on('error', err => {});\n  return pool;\n};\nmodule.exports.createPoolCluster = function createPoolCluster(opts) {\n  const options = new ClusterOptions(opts);\n  return new Cluster(options);\n};\nmodule.exports.importFile = function importFile(opts) {\n  try {\n    const options = new ConnOptions(opts);\n    const conn = new Connection(options);\n    return conn.connect().then(() => {\n      return new Promise(conn.importFile.bind(conn, Object.assign({\n        skipDbCheck: true\n      }, opts)));\n    }).finally(() => {\n      new Promise(conn.end.bind(conn, new CommandParameter())).catch(console.log);\n    });\n  } catch (err) {\n    return Promise.reject(err);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
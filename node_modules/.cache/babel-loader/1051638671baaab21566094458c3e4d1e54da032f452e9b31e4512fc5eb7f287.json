{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Collations = require('../const/collations.js');\nconst FieldType = require('../const/field-type');\nconst FieldDetails = require('../const/field-detail');\nconst Capabilities = require('../const/capabilities');\n\n// noinspection JSBitwiseOperatorUsage\n/**\n * Column definition\n * see https://mariadb.com/kb/en/library/resultset/#column-definition-packet\n */\nclass ColumnDef {\n  #stringParser;\n  constructor(packet, info, skipName) {\n    this.#stringParser = skipName ? new StringParser(packet) : new StringParserWithName(packet);\n    if (info.clientCapabilities & Capabilities.MARIADB_CLIENT_EXTENDED_TYPE_INFO) {\n      const len = packet.readUnsignedLength();\n      if (len > 0) {\n        const subPacket = packet.subPacketLengthEncoded(len);\n        while (subPacket.remaining()) {\n          switch (subPacket.readUInt8()) {\n            case 0:\n              this.dataTypeName = subPacket.readAsciiStringLengthEncoded();\n              break;\n            case 1:\n              this.dataTypeFormat = subPacket.readAsciiStringLengthEncoded();\n              break;\n            default:\n              subPacket.skip(subPacket.readUnsignedLength());\n              break;\n          }\n        }\n      }\n    }\n    packet.skip(1); // length of fixed fields\n    this.collation = Collations.fromIndex(packet.readUInt16());\n    this.columnLength = packet.readUInt32();\n    this.columnType = packet.readUInt8();\n    this.flags = packet.readUInt16();\n    this.scale = packet.readUInt8();\n    this.type = FieldType.TYPES[this.columnType];\n  }\n  __getDefaultGeomVal() {\n    if (this.dataTypeName) {\n      switch (this.dataTypeName) {\n        case 'point':\n          return {\n            type: 'Point'\n          };\n        case 'linestring':\n          return {\n            type: 'LineString'\n          };\n        case 'polygon':\n          return {\n            type: 'Polygon'\n          };\n        case 'multipoint':\n          return {\n            type: 'MultiPoint'\n          };\n        case 'multilinestring':\n          return {\n            type: 'MultiLineString'\n          };\n        case 'multipolygon':\n          return {\n            type: 'MultiPolygon'\n          };\n        default:\n          return {\n            type: this.dataTypeName\n          };\n      }\n    }\n    return null;\n  }\n  db() {\n    return this.#stringParser.db();\n  }\n  schema() {\n    return this.#stringParser.schema();\n  }\n  table() {\n    return this.#stringParser.table();\n  }\n  orgTable() {\n    return this.#stringParser.orgTable();\n  }\n  name() {\n    return this.#stringParser.name();\n  }\n  orgName() {\n    return this.#stringParser.orgName();\n  }\n  signed() {\n    return (this.flags & FieldDetails.UNSIGNED) === 0;\n  }\n  isSet() {\n    return (this.flags & FieldDetails.SET) !== 0;\n  }\n}\n\n/**\n * String parser.\n * This object permits to avoid listing all private information to metadata object.\n */\n\nclass BaseStringParser {\n  constructor(readFct, saveBuf) {\n    this.buf = saveBuf;\n    this.readString = readFct;\n  }\n  _readIdentifier(skip) {\n    let pos = 0;\n    while (skip-- > 0) {\n      const type = this.buf[pos++];\n      pos += type < 0xfb ? type : 2 + this.buf[pos] + this.buf[pos + 1] * 2 ** 8;\n    }\n    let len;\n    const type = this.buf[pos++];\n    len = type < 0xfb ? type : this.buf[pos++] + this.buf[pos++] * 2 ** 8;\n    return this.readString(this.buf, pos, len);\n  }\n  name() {\n    return this._readIdentifier(3);\n  }\n  db() {\n    return this._readIdentifier(0);\n  }\n  schema() {\n    return this.db();\n  }\n  table() {\n    return this._readIdentifier(1);\n  }\n  orgTable() {\n    return this._readIdentifier(2);\n  }\n  orgName() {\n    return this._readIdentifier(4);\n  }\n}\nclass StringParser extends BaseStringParser {\n  constructor(packet) {\n    packet.skip(4); // skip 'def'\n    const initPos = packet.pos;\n    packet.skip(packet.readMetadataLength()); //schema\n    packet.skip(packet.readMetadataLength()); //table alias\n    packet.skip(packet.readMetadataLength()); //table\n    packet.skip(packet.readMetadataLength()); //column alias\n    packet.skip(packet.readMetadataLength()); //column\n\n    const len = packet.pos - initPos;\n    const saveBuf = Buffer.allocUnsafe(packet.pos - initPos);\n    for (let i = 0; i < len; i++) saveBuf[i] = packet.buf[initPos + i];\n    super(packet.readString.bind(packet), saveBuf);\n  }\n}\n\n/**\n * String parser.\n * This object permits to avoid listing all private information to metadata object.\n */\nclass StringParserWithName extends BaseStringParser {\n  colName;\n  constructor(packet) {\n    packet.skip(4); // skip 'def'\n    const initPos = packet.pos;\n    packet.skip(packet.readMetadataLength()); //schema\n    packet.skip(packet.readMetadataLength()); //table alias\n    packet.skip(packet.readMetadataLength()); //table\n    const colName = packet.readStringLengthEncoded(); //column alias\n    packet.skip(packet.readMetadataLength()); //column\n\n    const len = packet.pos - initPos;\n    const saveBuf = Buffer.allocUnsafe(packet.pos - initPos);\n    for (let i = 0; i < len; i++) saveBuf[i] = packet.buf[initPos + i];\n    super(packet.readString.bind(packet), saveBuf);\n    this.colName = colName;\n  }\n  name() {\n    return this.colName;\n  }\n}\nmodule.exports = ColumnDef;","map":{"version":3,"names":["Collations","require","FieldType","FieldDetails","Capabilities","ColumnDef","stringParser","constructor","packet","info","skipName","StringParser","StringParserWithName","clientCapabilities","MARIADB_CLIENT_EXTENDED_TYPE_INFO","len","readUnsignedLength","subPacket","subPacketLengthEncoded","remaining","readUInt8","dataTypeName","readAsciiStringLengthEncoded","dataTypeFormat","skip","collation","fromIndex","readUInt16","columnLength","readUInt32","columnType","flags","scale","type","TYPES","__getDefaultGeomVal","db","schema","table","orgTable","name","orgName","signed","UNSIGNED","isSet","SET","BaseStringParser","readFct","saveBuf","buf","readString","_readIdentifier","pos","initPos","readMetadataLength","Buffer","allocUnsafe","i","bind","colName","readStringLengthEncoded","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/cmd/column-definition.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Collations = require('../const/collations.js');\nconst FieldType = require('../const/field-type');\nconst FieldDetails = require('../const/field-detail');\nconst Capabilities = require('../const/capabilities');\n\n// noinspection JSBitwiseOperatorUsage\n/**\n * Column definition\n * see https://mariadb.com/kb/en/library/resultset/#column-definition-packet\n */\nclass ColumnDef {\n  #stringParser;\n  constructor(packet, info, skipName) {\n    this.#stringParser = skipName ? new StringParser(packet) : new StringParserWithName(packet);\n    if (info.clientCapabilities & Capabilities.MARIADB_CLIENT_EXTENDED_TYPE_INFO) {\n      const len = packet.readUnsignedLength();\n      if (len > 0) {\n        const subPacket = packet.subPacketLengthEncoded(len);\n        while (subPacket.remaining()) {\n          switch (subPacket.readUInt8()) {\n            case 0:\n              this.dataTypeName = subPacket.readAsciiStringLengthEncoded();\n              break;\n\n            case 1:\n              this.dataTypeFormat = subPacket.readAsciiStringLengthEncoded();\n              break;\n\n            default:\n              subPacket.skip(subPacket.readUnsignedLength());\n              break;\n          }\n        }\n      }\n    }\n\n    packet.skip(1); // length of fixed fields\n    this.collation = Collations.fromIndex(packet.readUInt16());\n    this.columnLength = packet.readUInt32();\n    this.columnType = packet.readUInt8();\n    this.flags = packet.readUInt16();\n    this.scale = packet.readUInt8();\n    this.type = FieldType.TYPES[this.columnType];\n  }\n\n  __getDefaultGeomVal() {\n    if (this.dataTypeName) {\n      switch (this.dataTypeName) {\n        case 'point':\n          return { type: 'Point' };\n        case 'linestring':\n          return { type: 'LineString' };\n        case 'polygon':\n          return { type: 'Polygon' };\n        case 'multipoint':\n          return { type: 'MultiPoint' };\n        case 'multilinestring':\n          return { type: 'MultiLineString' };\n        case 'multipolygon':\n          return { type: 'MultiPolygon' };\n        default:\n          return { type: this.dataTypeName };\n      }\n    }\n    return null;\n  }\n\n  db() {\n    return this.#stringParser.db();\n  }\n\n  schema() {\n    return this.#stringParser.schema();\n  }\n\n  table() {\n    return this.#stringParser.table();\n  }\n\n  orgTable() {\n    return this.#stringParser.orgTable();\n  }\n\n  name() {\n    return this.#stringParser.name();\n  }\n\n  orgName() {\n    return this.#stringParser.orgName();\n  }\n\n  signed() {\n    return (this.flags & FieldDetails.UNSIGNED) === 0;\n  }\n\n  isSet() {\n    return (this.flags & FieldDetails.SET) !== 0;\n  }\n}\n\n/**\n * String parser.\n * This object permits to avoid listing all private information to metadata object.\n */\n\nclass BaseStringParser {\n  constructor(readFct, saveBuf) {\n    this.buf = saveBuf;\n    this.readString = readFct;\n  }\n\n  _readIdentifier(skip) {\n    let pos = 0;\n    while (skip-- > 0) {\n      const type = this.buf[pos++];\n      pos += type < 0xfb ? type : 2 + this.buf[pos] + this.buf[pos + 1] * 2 ** 8;\n    }\n\n    let len;\n    const type = this.buf[pos++];\n    len = type < 0xfb ? type : this.buf[pos++] + this.buf[pos++] * 2 ** 8;\n\n    return this.readString(this.buf, pos, len);\n  }\n\n  name() {\n    return this._readIdentifier(3);\n  }\n\n  db() {\n    return this._readIdentifier(0);\n  }\n\n  schema() {\n    return this.db();\n  }\n\n  table() {\n    return this._readIdentifier(1);\n  }\n\n  orgTable() {\n    return this._readIdentifier(2);\n  }\n\n  orgName() {\n    return this._readIdentifier(4);\n  }\n}\n\nclass StringParser extends BaseStringParser {\n  constructor(packet) {\n    packet.skip(4); // skip 'def'\n    const initPos = packet.pos;\n    packet.skip(packet.readMetadataLength()); //schema\n    packet.skip(packet.readMetadataLength()); //table alias\n    packet.skip(packet.readMetadataLength()); //table\n    packet.skip(packet.readMetadataLength()); //column alias\n    packet.skip(packet.readMetadataLength()); //column\n\n    const len = packet.pos - initPos;\n    const saveBuf = Buffer.allocUnsafe(packet.pos - initPos);\n    for (let i = 0; i < len; i++) saveBuf[i] = packet.buf[initPos + i];\n\n    super(packet.readString.bind(packet), saveBuf);\n  }\n}\n\n/**\n * String parser.\n * This object permits to avoid listing all private information to metadata object.\n */\nclass StringParserWithName extends BaseStringParser {\n  colName;\n  constructor(packet) {\n    packet.skip(4); // skip 'def'\n    const initPos = packet.pos;\n    packet.skip(packet.readMetadataLength()); //schema\n    packet.skip(packet.readMetadataLength()); //table alias\n    packet.skip(packet.readMetadataLength()); //table\n    const colName = packet.readStringLengthEncoded(); //column alias\n    packet.skip(packet.readMetadataLength()); //column\n\n    const len = packet.pos - initPos;\n    const saveBuf = Buffer.allocUnsafe(packet.pos - initPos);\n    for (let i = 0; i < len; i++) saveBuf[i] = packet.buf[initPos + i];\n\n    super(packet.readString.bind(packet), saveBuf);\n    this.colName = colName;\n  }\n\n  name() {\n    return this.colName;\n  }\n}\n\nmodule.exports = ColumnDef;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Errors = require('./misc/errors');\nconst {\n  Status\n} = require('./const/connection_status');\nconst Query = require('./cmd/query');\nconst CommandParameter = require('./command-parameter');\nclass ConnectionCallback {\n  #conn;\n  constructor(conn) {\n    this.#conn = conn;\n  }\n  get threadId() {\n    return this.#conn.info ? this.#conn.info.threadId : null;\n  }\n  get info() {\n    return this.#conn.info;\n  }\n  #noop = () => {};\n  release = cb => {\n    this.#conn.release(() => {\n      if (cb) cb();\n    });\n  };\n\n  /**\n   * Permit to change user during connection.\n   * All user variables will be reset, Prepare commands will be released.\n   * !!! mysql has a bug when CONNECT_ATTRS capability is set, that is default !!!!\n   *\n   * @param options   connection options\n   * @param callback  callback function\n   */\n  changeUser(options, callback) {\n    let _options, _cb;\n    if (typeof options === 'function') {\n      _cb = options;\n      _options = undefined;\n    } else {\n      _options = options;\n      _cb = callback;\n    }\n    const cmdParam = new CommandParameter(null, null, _options, _cb);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    new Promise(this.#conn.changeUser.bind(this.#conn, cmdParam)).then(() => {\n      if (cmdParam.callback) cmdParam.callback(null, null, null);\n    }).catch(cmdParam.callback || this.#noop);\n  }\n\n  /**\n   * Start transaction\n   *\n   * @param callback  callback function\n   */\n  beginTransaction(callback) {\n    this.query(new CommandParameter('START TRANSACTION'), null, callback);\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * @param callback  callback function\n   */\n  commit(callback) {\n    this.#conn.changeTransaction(new CommandParameter('COMMIT'), () => {\n      if (callback) callback(null, null, null);\n    }, callback || this.#noop);\n  }\n\n  /**\n   * Roll back a transaction.\n   *\n   * @param callback  callback function\n   */\n  rollback(callback) {\n    this.#conn.changeTransaction(new CommandParameter('ROLLBACK'), () => {\n      if (callback) callback(null, null, null);\n    }, callback || this.#noop);\n  }\n\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param callback  callback function\n   */\n  query(sql, values, callback) {\n    const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n    return ConnectionCallback._QUERY_CMD(this.#conn, cmdParam);\n  }\n  static _QUERY_CMD(conn, cmdParam) {\n    let cmd;\n    if (cmdParam.callback) {\n      cmdParam.opts = cmdParam.opts ? Object.assign(cmdParam.opts, {\n        metaAsArray: true\n      }) : {\n        metaAsArray: true\n      };\n      cmd = new Query(([rows, meta]) => {\n        cmdParam.callback(null, rows, meta);\n      }, cmdParam.callback, conn.opts, cmdParam);\n    } else {\n      cmd = new Query(() => {}, () => {}, conn.opts, cmdParam);\n    }\n    cmd.handleNewRows = row => {\n      cmd._rows[cmd._responseIndex].push(row);\n      cmd.emit('data', row);\n    };\n    conn.addCommand(cmd);\n    cmd.stream = opt => cmd._stream(conn.socket, opt);\n    return cmd;\n  }\n  execute(sql, values, callback) {\n    const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n    cmdParam.opts = cmdParam.opts ? Object.assign(cmdParam.opts, {\n      metaAsArray: true\n    }) : {\n      metaAsArray: true\n    };\n    this.#conn.prepareExecute(cmdParam).then(([rows, meta]) => {\n      if (cmdParam.callback) {\n        cmdParam.callback(null, rows, meta);\n      }\n    }).catch(err => {\n      if (cmdParam.callback) {\n        cmdParam.callback(err);\n      }\n    });\n  }\n  static _PARAM(options, sql, values, callback) {\n    let _cmdOpt,\n      _sql,\n      _values = values,\n      _cb = callback;\n    if (typeof values === 'function') {\n      _cb = values;\n      _values = undefined;\n    }\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n      if (_cmdOpt.values) _values = _cmdOpt.values;\n    } else {\n      _sql = sql;\n    }\n    const cmdParam = new CommandParameter(_sql, _values, _cmdOpt, _cb);\n    if (options.trace) Error.captureStackTrace(cmdParam, ConnectionCallback._PARAM);\n    return cmdParam;\n  }\n  static _EXECUTE_CMD(conn, cmdParam) {\n    new Promise(conn.prepare.bind(conn, cmdParam)).then(prepare => {\n      const opts = cmdParam.opts ? Object.assign(cmdParam.opts, {\n        metaAsArray: true\n      }) : {\n        metaAsArray: true\n      };\n      return prepare.execute(cmdParam.values, opts, null, cmdParam.stack).then(([rows, meta]) => {\n        if (cmdParam.callback) {\n          cmdParam.callback(null, rows, meta);\n        }\n      }).finally(() => prepare.close());\n    }).catch(err => {\n      if (conn.opts.logger.error) conn.opts.logger.error(err);\n      if (cmdParam.callback) cmdParam.callback(err);\n    });\n  }\n  prepare(sql, callback) {\n    let _cmdOpt, _sql;\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n    } else {\n      _sql = sql;\n    }\n    const cmdParam = new CommandParameter(_sql, null, _cmdOpt, callback);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.prepare.bind(this.#conn, cmdParam)).then(prepare => {\n      if (callback) callback(null, prepare, null);\n    }).catch(callback || this.#noop);\n  }\n\n  /**\n   * Execute a batch\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param callback callback\n   */\n  batch(sql, values, callback) {\n    const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n    return ConnectionCallback._BATCH_CMD(this.#conn, cmdParam);\n  }\n  static _BATCH_CMD(conn, cmdParam) {\n    conn.batch(cmdParam).then(res => {\n      if (cmdParam.callback) cmdParam.callback(null, res);\n    }).catch(err => {\n      if (cmdParam.callback) cmdParam.callback(err);\n    });\n  }\n\n  /**\n   * Import sql file.\n   *\n   * @param opts JSON array with 2 possible fields: file and database\n   * @param cb callback\n   */\n  importFile(opts, cb) {\n    if (!opts || !opts.file) {\n      if (cb) cb(Errors.createError('SQL file parameter is mandatory', Errors.ER_MISSING_SQL_PARAMETER, this.#conn.info, 'HY000', null, false, null));\n      return;\n    }\n    new Promise(this.#conn.importFile.bind(this.#conn, {\n      file: opts.file,\n      database: opts.database\n    })).then(() => {\n      if (cb) cb();\n    }).catch(err => {\n      if (cb) cb(err);\n    });\n  }\n\n  /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param timeout (optional) timeout value in ms. If reached, throw error and close connection\n   * @param callback callback\n   */\n  ping(timeout, callback) {\n    let _cmdOpt = {},\n      _cb;\n    if (typeof timeout === 'function') {\n      _cb = timeout;\n    } else {\n      _cmdOpt.timeout = timeout;\n      _cb = callback;\n    }\n    const cmdParam = new CommandParameter(null, null, _cmdOpt, _cb);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    new Promise(this.#conn.ping.bind(this.#conn, cmdParam)).then(_cb || this.#noop).catch(_cb || this.#noop);\n  }\n\n  /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   *\n   * @param callback callback\n   */\n  reset(callback) {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.reset.bind(this.#conn, cmdParam)).then(callback || this.#noop).catch(callback || this.#noop);\n  }\n\n  /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */\n  isValid() {\n    return this.#conn.isValid();\n  }\n\n  /**\n   * Terminate connection gracefully.\n   *\n   * @param callback callback\n   */\n  end(callback) {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    new Promise(this.#conn.end.bind(this.#conn, cmdParam)).then(() => {\n      if (callback) callback();\n    }).catch(callback || this.#noop);\n  }\n\n  /**\n   * Alias for destroy.\n   */\n  close() {\n    this.destroy();\n  }\n\n  /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */\n  destroy() {\n    this.#conn.destroy();\n  }\n  pause() {\n    this.#conn.pause();\n  }\n  resume() {\n    this.#conn.resume();\n  }\n  format(sql, values) {\n    this.#conn.format(sql, values);\n  }\n\n  /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */\n  serverVersion() {\n    return this.#conn.serverVersion();\n  }\n\n  /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */\n  debug(val) {\n    return this.#conn.debug(val);\n  }\n  debugCompress(val) {\n    return this.#conn.debugCompress(val);\n  }\n  escape(val) {\n    return this.#conn.escape(val);\n  }\n  escapeId(val) {\n    return this.#conn.escapeId(val);\n  }\n\n  //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n  get __tests() {\n    return this.#conn.__tests;\n  }\n  connect(callback) {\n    if (!callback) {\n      throw new Errors.createError('missing mandatory callback parameter', Errors.ER_MISSING_PARAMETER, this.#conn.info);\n    }\n    switch (this.#conn.status) {\n      case Status.NOT_CONNECTED:\n      case Status.CONNECTING:\n      case Status.AUTHENTICATING:\n      case Status.INIT_CMD:\n        this.once('connect', callback);\n        break;\n      case Status.CONNECTED:\n        callback.call(this);\n        break;\n      case Status.CLOSING:\n      case Status.CLOSED:\n        callback.call(this, Errors.createError('Connection closed', Errors.ER_CONNECTION_ALREADY_CLOSED, this.#conn.info, '08S01', null, true));\n        break;\n    }\n  }\n\n  //*****************************************************************\n  // EventEmitter proxy methods\n  //*****************************************************************\n\n  on(eventName, listener) {\n    this.#conn.on.call(this.#conn, eventName, listener);\n    return this;\n  }\n  off(eventName, listener) {\n    this.#conn.off.call(this.#conn, eventName, listener);\n    return this;\n  }\n  once(eventName, listener) {\n    this.#conn.once.call(this.#conn, eventName, listener);\n    return this;\n  }\n  listeners(eventName) {\n    return this.#conn.listeners.call(this.#conn, eventName);\n  }\n  addListener(eventName, listener) {\n    this.#conn.addListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n  eventNames() {\n    return this.#conn.eventNames.call(this.#conn);\n  }\n  getMaxListeners() {\n    return this.#conn.getMaxListeners.call(this.#conn);\n  }\n  listenerCount(eventName, listener) {\n    return this.#conn.listenerCount.call(this.#conn, eventName, listener);\n  }\n  prependListener(eventName, listener) {\n    this.#conn.prependListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n  prependOnceListener(eventName, listener) {\n    this.#conn.prependOnceListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n  removeAllListeners(eventName, listener) {\n    this.#conn.removeAllListeners.call(this.#conn, eventName, listener);\n    return this;\n  }\n  removeListener(eventName, listener) {\n    this.#conn.removeListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n  setMaxListeners(n) {\n    this.#conn.setMaxListeners.call(this.#conn, n);\n    return this;\n  }\n  rawListeners(eventName) {\n    return this.#conn.rawListeners.call(this.#conn, eventName);\n  }\n}\nmodule.exports = ConnectionCallback;","map":{"version":3,"names":["Errors","require","Status","Query","CommandParameter","ConnectionCallback","conn","constructor","threadId","info","noop","#noop","release","cb","changeUser","options","callback","_options","_cb","undefined","cmdParam","opts","trace","Error","captureStackTrace","Promise","bind","then","catch","beginTransaction","query","commit","changeTransaction","rollback","sql","values","_PARAM","_QUERY_CMD","cmd","Object","assign","metaAsArray","rows","meta","handleNewRows","row","_rows","_responseIndex","push","emit","addCommand","stream","opt","_stream","socket","execute","prepareExecute","err","_cmdOpt","_sql","_values","_EXECUTE_CMD","prepare","stack","finally","close","logger","error","batch","_BATCH_CMD","res","importFile","file","createError","ER_MISSING_SQL_PARAMETER","database","ping","timeout","reset","isValid","end","destroy","pause","resume","format","serverVersion","debug","val","debugCompress","escape","escapeId","__tests","connect","ER_MISSING_PARAMETER","status","NOT_CONNECTED","CONNECTING","AUTHENTICATING","INIT_CMD","once","CONNECTED","call","CLOSING","CLOSED","ER_CONNECTION_ALREADY_CLOSED","on","eventName","listener","off","listeners","addListener","eventNames","getMaxListeners","listenerCount","prependListener","prependOnceListener","removeAllListeners","removeListener","setMaxListeners","n","rawListeners","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/connection-callback.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Errors = require('./misc/errors');\nconst { Status } = require('./const/connection_status');\nconst Query = require('./cmd/query');\nconst CommandParameter = require('./command-parameter');\n\nclass ConnectionCallback {\n  #conn;\n\n  constructor(conn) {\n    this.#conn = conn;\n  }\n\n  get threadId() {\n    return this.#conn.info ? this.#conn.info.threadId : null;\n  }\n\n  get info() {\n    return this.#conn.info;\n  }\n\n  #noop = () => {};\n\n  release = (cb) => {\n    this.#conn.release(() => {\n      if (cb) cb();\n    });\n  };\n\n  /**\n   * Permit to change user during connection.\n   * All user variables will be reset, Prepare commands will be released.\n   * !!! mysql has a bug when CONNECT_ATTRS capability is set, that is default !!!!\n   *\n   * @param options   connection options\n   * @param callback  callback function\n   */\n  changeUser(options, callback) {\n    let _options, _cb;\n    if (typeof options === 'function') {\n      _cb = options;\n      _options = undefined;\n    } else {\n      _options = options;\n      _cb = callback;\n    }\n    const cmdParam = new CommandParameter(null, null, _options, _cb);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n\n    new Promise(this.#conn.changeUser.bind(this.#conn, cmdParam))\n      .then(() => {\n        if (cmdParam.callback) cmdParam.callback(null, null, null);\n      })\n      .catch(cmdParam.callback || this.#noop);\n  }\n\n  /**\n   * Start transaction\n   *\n   * @param callback  callback function\n   */\n  beginTransaction(callback) {\n    this.query(new CommandParameter('START TRANSACTION'), null, callback);\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * @param callback  callback function\n   */\n  commit(callback) {\n    this.#conn.changeTransaction(\n      new CommandParameter('COMMIT'),\n      () => {\n        if (callback) callback(null, null, null);\n      },\n      callback || this.#noop\n    );\n  }\n\n  /**\n   * Roll back a transaction.\n   *\n   * @param callback  callback function\n   */\n  rollback(callback) {\n    this.#conn.changeTransaction(\n      new CommandParameter('ROLLBACK'),\n      () => {\n        if (callback) callback(null, null, null);\n      },\n      callback || this.#noop\n    );\n  }\n\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param callback  callback function\n   */\n  query(sql, values, callback) {\n    const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n    return ConnectionCallback._QUERY_CMD(this.#conn, cmdParam);\n  }\n\n  static _QUERY_CMD(conn, cmdParam) {\n    let cmd;\n    if (cmdParam.callback) {\n      cmdParam.opts = cmdParam.opts ? Object.assign(cmdParam.opts, { metaAsArray: true }) : { metaAsArray: true };\n      cmd = new Query(\n        ([rows, meta]) => {\n          cmdParam.callback(null, rows, meta);\n        },\n        cmdParam.callback,\n        conn.opts,\n        cmdParam\n      );\n    } else {\n      cmd = new Query(\n        () => {},\n        () => {},\n        conn.opts,\n        cmdParam\n      );\n    }\n\n    cmd.handleNewRows = (row) => {\n      cmd._rows[cmd._responseIndex].push(row);\n      cmd.emit('data', row);\n    };\n\n    conn.addCommand(cmd);\n    cmd.stream = (opt) => cmd._stream(conn.socket, opt);\n    return cmd;\n  }\n\n  execute(sql, values, callback) {\n    const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n    cmdParam.opts = cmdParam.opts ? Object.assign(cmdParam.opts, { metaAsArray: true }) : { metaAsArray: true };\n    this.#conn\n      .prepareExecute(cmdParam)\n      .then(([rows, meta]) => {\n        if (cmdParam.callback) {\n          cmdParam.callback(null, rows, meta);\n        }\n      })\n      .catch((err) => {\n        if (cmdParam.callback) {\n          cmdParam.callback(err);\n        }\n      });\n  }\n\n  static _PARAM(options, sql, values, callback) {\n    let _cmdOpt,\n      _sql,\n      _values = values,\n      _cb = callback;\n    if (typeof values === 'function') {\n      _cb = values;\n      _values = undefined;\n    }\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n      if (_cmdOpt.values) _values = _cmdOpt.values;\n    } else {\n      _sql = sql;\n    }\n    const cmdParam = new CommandParameter(_sql, _values, _cmdOpt, _cb);\n    if (options.trace) Error.captureStackTrace(cmdParam, ConnectionCallback._PARAM);\n    return cmdParam;\n  }\n\n  static _EXECUTE_CMD(conn, cmdParam) {\n    new Promise(conn.prepare.bind(conn, cmdParam))\n      .then((prepare) => {\n        const opts = cmdParam.opts ? Object.assign(cmdParam.opts, { metaAsArray: true }) : { metaAsArray: true };\n        return prepare\n          .execute(cmdParam.values, opts, null, cmdParam.stack)\n          .then(([rows, meta]) => {\n            if (cmdParam.callback) {\n              cmdParam.callback(null, rows, meta);\n            }\n          })\n          .finally(() => prepare.close());\n      })\n      .catch((err) => {\n        if (conn.opts.logger.error) conn.opts.logger.error(err);\n        if (cmdParam.callback) cmdParam.callback(err);\n      });\n  }\n\n  prepare(sql, callback) {\n    let _cmdOpt, _sql;\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n    } else {\n      _sql = sql;\n    }\n    const cmdParam = new CommandParameter(_sql, null, _cmdOpt, callback);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.prepare.bind(this.#conn, cmdParam))\n      .then((prepare) => {\n        if (callback) callback(null, prepare, null);\n      })\n      .catch(callback || this.#noop);\n  }\n\n  /**\n   * Execute a batch\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param callback callback\n   */\n  batch(sql, values, callback) {\n    const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n    return ConnectionCallback._BATCH_CMD(this.#conn, cmdParam);\n  }\n\n  static _BATCH_CMD(conn, cmdParam) {\n    conn\n      .batch(cmdParam)\n      .then((res) => {\n        if (cmdParam.callback) cmdParam.callback(null, res);\n      })\n      .catch((err) => {\n        if (cmdParam.callback) cmdParam.callback(err);\n      });\n  }\n\n  /**\n   * Import sql file.\n   *\n   * @param opts JSON array with 2 possible fields: file and database\n   * @param cb callback\n   */\n  importFile(opts, cb) {\n    if (!opts || !opts.file) {\n      if (cb)\n        cb(\n          Errors.createError(\n            'SQL file parameter is mandatory',\n            Errors.ER_MISSING_SQL_PARAMETER,\n            this.#conn.info,\n            'HY000',\n            null,\n            false,\n            null\n          )\n        );\n      return;\n    }\n    new Promise(this.#conn.importFile.bind(this.#conn, { file: opts.file, database: opts.database }))\n      .then(() => {\n        if (cb) cb();\n      })\n      .catch((err) => {\n        if (cb) cb(err);\n      });\n  }\n\n  /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param timeout (optional) timeout value in ms. If reached, throw error and close connection\n   * @param callback callback\n   */\n  ping(timeout, callback) {\n    let _cmdOpt = {},\n      _cb;\n    if (typeof timeout === 'function') {\n      _cb = timeout;\n    } else {\n      _cmdOpt.timeout = timeout;\n      _cb = callback;\n    }\n    const cmdParam = new CommandParameter(null, null, _cmdOpt, _cb);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    new Promise(this.#conn.ping.bind(this.#conn, cmdParam)).then(_cb || this.#noop).catch(_cb || this.#noop);\n  }\n\n  /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   *\n   * @param callback callback\n   */\n  reset(callback) {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.reset.bind(this.#conn, cmdParam))\n      .then(callback || this.#noop)\n      .catch(callback || this.#noop);\n  }\n\n  /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */\n  isValid() {\n    return this.#conn.isValid();\n  }\n\n  /**\n   * Terminate connection gracefully.\n   *\n   * @param callback callback\n   */\n  end(callback) {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    new Promise(this.#conn.end.bind(this.#conn, cmdParam))\n      .then(() => {\n        if (callback) callback();\n      })\n      .catch(callback || this.#noop);\n  }\n\n  /**\n   * Alias for destroy.\n   */\n  close() {\n    this.destroy();\n  }\n\n  /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */\n  destroy() {\n    this.#conn.destroy();\n  }\n\n  pause() {\n    this.#conn.pause();\n  }\n\n  resume() {\n    this.#conn.resume();\n  }\n\n  format(sql, values) {\n    this.#conn.format(sql, values);\n  }\n\n  /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */\n  serverVersion() {\n    return this.#conn.serverVersion();\n  }\n\n  /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */\n  debug(val) {\n    return this.#conn.debug(val);\n  }\n\n  debugCompress(val) {\n    return this.#conn.debugCompress(val);\n  }\n\n  escape(val) {\n    return this.#conn.escape(val);\n  }\n\n  escapeId(val) {\n    return this.#conn.escapeId(val);\n  }\n\n  //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n  get __tests() {\n    return this.#conn.__tests;\n  }\n\n  connect(callback) {\n    if (!callback) {\n      throw new Errors.createError(\n        'missing mandatory callback parameter',\n        Errors.ER_MISSING_PARAMETER,\n        this.#conn.info\n      );\n    }\n    switch (this.#conn.status) {\n      case Status.NOT_CONNECTED:\n      case Status.CONNECTING:\n      case Status.AUTHENTICATING:\n      case Status.INIT_CMD:\n        this.once('connect', callback);\n        break;\n      case Status.CONNECTED:\n        callback.call(this);\n        break;\n      case Status.CLOSING:\n      case Status.CLOSED:\n        callback.call(\n          this,\n          Errors.createError(\n            'Connection closed',\n            Errors.ER_CONNECTION_ALREADY_CLOSED,\n            this.#conn.info,\n            '08S01',\n            null,\n            true\n          )\n        );\n        break;\n    }\n  }\n\n  //*****************************************************************\n  // EventEmitter proxy methods\n  //*****************************************************************\n\n  on(eventName, listener) {\n    this.#conn.on.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  off(eventName, listener) {\n    this.#conn.off.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  once(eventName, listener) {\n    this.#conn.once.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  listeners(eventName) {\n    return this.#conn.listeners.call(this.#conn, eventName);\n  }\n\n  addListener(eventName, listener) {\n    this.#conn.addListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  eventNames() {\n    return this.#conn.eventNames.call(this.#conn);\n  }\n\n  getMaxListeners() {\n    return this.#conn.getMaxListeners.call(this.#conn);\n  }\n\n  listenerCount(eventName, listener) {\n    return this.#conn.listenerCount.call(this.#conn, eventName, listener);\n  }\n\n  prependListener(eventName, listener) {\n    this.#conn.prependListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  prependOnceListener(eventName, listener) {\n    this.#conn.prependOnceListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  removeAllListeners(eventName, listener) {\n    this.#conn.removeAllListeners.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  removeListener(eventName, listener) {\n    this.#conn.removeListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  setMaxListeners(n) {\n    this.#conn.setMaxListeners.call(this.#conn, n);\n    return this;\n  }\n\n  rawListeners(eventName) {\n    return this.#conn.rawListeners.call(this.#conn, eventName);\n  }\n}\n\nmodule.exports = ConnectionCallback;\n"],"mappings":"AAAA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC;AACvC,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AACvD,MAAME,KAAK,GAAGF,OAAO,CAAC,aAAa,CAAC;AACpC,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,qBAAqB,CAAC;AAEvD,MAAMI,kBAAkB,CAAC;EACvB,CAACC,IAAI;EAELC,WAAWA,CAACD,IAAI,EAAE;IAChB,IAAI,CAAC,CAACA,IAAI,GAAGA,IAAI;EACnB;EAEA,IAAIE,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI,CAAC,CAACF,IAAI,CAACG,IAAI,GAAG,IAAI,CAAC,CAACH,IAAI,CAACG,IAAI,CAACD,QAAQ,GAAG,IAAI;EAC1D;EAEA,IAAIC,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAAC,CAACH,IAAI,CAACG,IAAI;EACxB;EAEA,CAACC,IAAI,GAAGC,CAAA,KAAM,CAAC,CAAC;EAEhBC,OAAO,GAAIC,EAAE,IAAK;IAChB,IAAI,CAAC,CAACP,IAAI,CAACM,OAAO,CAAC,MAAM;MACvB,IAAIC,EAAE,EAAEA,EAAE,CAAC,CAAC;IACd,CAAC,CAAC;EACJ,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,UAAUA,CAACC,OAAO,EAAEC,QAAQ,EAAE;IAC5B,IAAIC,QAAQ,EAAEC,GAAG;IACjB,IAAI,OAAOH,OAAO,KAAK,UAAU,EAAE;MACjCG,GAAG,GAAGH,OAAO;MACbE,QAAQ,GAAGE,SAAS;IACtB,CAAC,MAAM;MACLF,QAAQ,GAAGF,OAAO;MAClBG,GAAG,GAAGF,QAAQ;IAChB;IACA,MAAMI,QAAQ,GAAG,IAAIhB,gBAAgB,CAAC,IAAI,EAAE,IAAI,EAAEa,QAAQ,EAAEC,GAAG,CAAC;IAChE,IAAI,IAAI,CAAC,CAACZ,IAAI,CAACe,IAAI,CAACC,KAAK,EAAEC,KAAK,CAACC,iBAAiB,CAACJ,QAAQ,CAAC;IAE5D,IAAIK,OAAO,CAAC,IAAI,CAAC,CAACnB,IAAI,CAACQ,UAAU,CAACY,IAAI,CAAC,IAAI,CAAC,CAACpB,IAAI,EAAEc,QAAQ,CAAC,CAAC,CAC1DO,IAAI,CAAC,MAAM;MACV,IAAIP,QAAQ,CAACJ,QAAQ,EAAEI,QAAQ,CAACJ,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAC5D,CAAC,CAAC,CACDY,KAAK,CAACR,QAAQ,CAACJ,QAAQ,IAAI,IAAI,CAAC,CAACN,IAAI,CAAC;EAC3C;;EAEA;AACF;AACA;AACA;AACA;EACEmB,gBAAgBA,CAACb,QAAQ,EAAE;IACzB,IAAI,CAACc,KAAK,CAAC,IAAI1B,gBAAgB,CAAC,mBAAmB,CAAC,EAAE,IAAI,EAAEY,QAAQ,CAAC;EACvE;;EAEA;AACF;AACA;AACA;AACA;EACEe,MAAMA,CAACf,QAAQ,EAAE;IACf,IAAI,CAAC,CAACV,IAAI,CAAC0B,iBAAiB,CAC1B,IAAI5B,gBAAgB,CAAC,QAAQ,CAAC,EAC9B,MAAM;MACJ,IAAIY,QAAQ,EAAEA,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAC1C,CAAC,EACDA,QAAQ,IAAI,IAAI,CAAC,CAACN,IACpB,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;EACEuB,QAAQA,CAACjB,QAAQ,EAAE;IACjB,IAAI,CAAC,CAACV,IAAI,CAAC0B,iBAAiB,CAC1B,IAAI5B,gBAAgB,CAAC,UAAU,CAAC,EAChC,MAAM;MACJ,IAAIY,QAAQ,EAAEA,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAC1C,CAAC,EACDA,QAAQ,IAAI,IAAI,CAAC,CAACN,IACpB,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoB,KAAKA,CAACI,GAAG,EAAEC,MAAM,EAAEnB,QAAQ,EAAE;IAC3B,MAAMI,QAAQ,GAAGf,kBAAkB,CAAC+B,MAAM,CAAC,IAAI,CAAC,CAAC9B,IAAI,CAACe,IAAI,EAAEa,GAAG,EAAEC,MAAM,EAAEnB,QAAQ,CAAC;IAClF,OAAOX,kBAAkB,CAACgC,UAAU,CAAC,IAAI,CAAC,CAAC/B,IAAI,EAAEc,QAAQ,CAAC;EAC5D;EAEA,OAAOiB,UAAUA,CAAC/B,IAAI,EAAEc,QAAQ,EAAE;IAChC,IAAIkB,GAAG;IACP,IAAIlB,QAAQ,CAACJ,QAAQ,EAAE;MACrBI,QAAQ,CAACC,IAAI,GAAGD,QAAQ,CAACC,IAAI,GAAGkB,MAAM,CAACC,MAAM,CAACpB,QAAQ,CAACC,IAAI,EAAE;QAAEoB,WAAW,EAAE;MAAK,CAAC,CAAC,GAAG;QAAEA,WAAW,EAAE;MAAK,CAAC;MAC3GH,GAAG,GAAG,IAAInC,KAAK,CACb,CAAC,CAACuC,IAAI,EAAEC,IAAI,CAAC,KAAK;QAChBvB,QAAQ,CAACJ,QAAQ,CAAC,IAAI,EAAE0B,IAAI,EAAEC,IAAI,CAAC;MACrC,CAAC,EACDvB,QAAQ,CAACJ,QAAQ,EACjBV,IAAI,CAACe,IAAI,EACTD,QACF,CAAC;IACH,CAAC,MAAM;MACLkB,GAAG,GAAG,IAAInC,KAAK,CACb,MAAM,CAAC,CAAC,EACR,MAAM,CAAC,CAAC,EACRG,IAAI,CAACe,IAAI,EACTD,QACF,CAAC;IACH;IAEAkB,GAAG,CAACM,aAAa,GAAIC,GAAG,IAAK;MAC3BP,GAAG,CAACQ,KAAK,CAACR,GAAG,CAACS,cAAc,CAAC,CAACC,IAAI,CAACH,GAAG,CAAC;MACvCP,GAAG,CAACW,IAAI,CAAC,MAAM,EAAEJ,GAAG,CAAC;IACvB,CAAC;IAEDvC,IAAI,CAAC4C,UAAU,CAACZ,GAAG,CAAC;IACpBA,GAAG,CAACa,MAAM,GAAIC,GAAG,IAAKd,GAAG,CAACe,OAAO,CAAC/C,IAAI,CAACgD,MAAM,EAAEF,GAAG,CAAC;IACnD,OAAOd,GAAG;EACZ;EAEAiB,OAAOA,CAACrB,GAAG,EAAEC,MAAM,EAAEnB,QAAQ,EAAE;IAC7B,MAAMI,QAAQ,GAAGf,kBAAkB,CAAC+B,MAAM,CAAC,IAAI,CAAC,CAAC9B,IAAI,CAACe,IAAI,EAAEa,GAAG,EAAEC,MAAM,EAAEnB,QAAQ,CAAC;IAClFI,QAAQ,CAACC,IAAI,GAAGD,QAAQ,CAACC,IAAI,GAAGkB,MAAM,CAACC,MAAM,CAACpB,QAAQ,CAACC,IAAI,EAAE;MAAEoB,WAAW,EAAE;IAAK,CAAC,CAAC,GAAG;MAAEA,WAAW,EAAE;IAAK,CAAC;IAC3G,IAAI,CAAC,CAACnC,IAAI,CACPkD,cAAc,CAACpC,QAAQ,CAAC,CACxBO,IAAI,CAAC,CAAC,CAACe,IAAI,EAAEC,IAAI,CAAC,KAAK;MACtB,IAAIvB,QAAQ,CAACJ,QAAQ,EAAE;QACrBI,QAAQ,CAACJ,QAAQ,CAAC,IAAI,EAAE0B,IAAI,EAAEC,IAAI,CAAC;MACrC;IACF,CAAC,CAAC,CACDf,KAAK,CAAE6B,GAAG,IAAK;MACd,IAAIrC,QAAQ,CAACJ,QAAQ,EAAE;QACrBI,QAAQ,CAACJ,QAAQ,CAACyC,GAAG,CAAC;MACxB;IACF,CAAC,CAAC;EACN;EAEA,OAAOrB,MAAMA,CAACrB,OAAO,EAAEmB,GAAG,EAAEC,MAAM,EAAEnB,QAAQ,EAAE;IAC5C,IAAI0C,OAAO;MACTC,IAAI;MACJC,OAAO,GAAGzB,MAAM;MAChBjB,GAAG,GAAGF,QAAQ;IAChB,IAAI,OAAOmB,MAAM,KAAK,UAAU,EAAE;MAChCjB,GAAG,GAAGiB,MAAM;MACZyB,OAAO,GAAGzC,SAAS;IACrB;IACA,IAAI,OAAOe,GAAG,KAAK,QAAQ,EAAE;MAC3BwB,OAAO,GAAGxB,GAAG;MACbyB,IAAI,GAAGD,OAAO,CAACxB,GAAG;MAClB,IAAIwB,OAAO,CAACvB,MAAM,EAAEyB,OAAO,GAAGF,OAAO,CAACvB,MAAM;IAC9C,CAAC,MAAM;MACLwB,IAAI,GAAGzB,GAAG;IACZ;IACA,MAAMd,QAAQ,GAAG,IAAIhB,gBAAgB,CAACuD,IAAI,EAAEC,OAAO,EAAEF,OAAO,EAAExC,GAAG,CAAC;IAClE,IAAIH,OAAO,CAACO,KAAK,EAAEC,KAAK,CAACC,iBAAiB,CAACJ,QAAQ,EAAEf,kBAAkB,CAAC+B,MAAM,CAAC;IAC/E,OAAOhB,QAAQ;EACjB;EAEA,OAAOyC,YAAYA,CAACvD,IAAI,EAAEc,QAAQ,EAAE;IAClC,IAAIK,OAAO,CAACnB,IAAI,CAACwD,OAAO,CAACpC,IAAI,CAACpB,IAAI,EAAEc,QAAQ,CAAC,CAAC,CAC3CO,IAAI,CAAEmC,OAAO,IAAK;MACjB,MAAMzC,IAAI,GAAGD,QAAQ,CAACC,IAAI,GAAGkB,MAAM,CAACC,MAAM,CAACpB,QAAQ,CAACC,IAAI,EAAE;QAAEoB,WAAW,EAAE;MAAK,CAAC,CAAC,GAAG;QAAEA,WAAW,EAAE;MAAK,CAAC;MACxG,OAAOqB,OAAO,CACXP,OAAO,CAACnC,QAAQ,CAACe,MAAM,EAAEd,IAAI,EAAE,IAAI,EAAED,QAAQ,CAAC2C,KAAK,CAAC,CACpDpC,IAAI,CAAC,CAAC,CAACe,IAAI,EAAEC,IAAI,CAAC,KAAK;QACtB,IAAIvB,QAAQ,CAACJ,QAAQ,EAAE;UACrBI,QAAQ,CAACJ,QAAQ,CAAC,IAAI,EAAE0B,IAAI,EAAEC,IAAI,CAAC;QACrC;MACF,CAAC,CAAC,CACDqB,OAAO,CAAC,MAAMF,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,CACDrC,KAAK,CAAE6B,GAAG,IAAK;MACd,IAAInD,IAAI,CAACe,IAAI,CAAC6C,MAAM,CAACC,KAAK,EAAE7D,IAAI,CAACe,IAAI,CAAC6C,MAAM,CAACC,KAAK,CAACV,GAAG,CAAC;MACvD,IAAIrC,QAAQ,CAACJ,QAAQ,EAAEI,QAAQ,CAACJ,QAAQ,CAACyC,GAAG,CAAC;IAC/C,CAAC,CAAC;EACN;EAEAK,OAAOA,CAAC5B,GAAG,EAAElB,QAAQ,EAAE;IACrB,IAAI0C,OAAO,EAAEC,IAAI;IACjB,IAAI,OAAOzB,GAAG,KAAK,QAAQ,EAAE;MAC3BwB,OAAO,GAAGxB,GAAG;MACbyB,IAAI,GAAGD,OAAO,CAACxB,GAAG;IACpB,CAAC,MAAM;MACLyB,IAAI,GAAGzB,GAAG;IACZ;IACA,MAAMd,QAAQ,GAAG,IAAIhB,gBAAgB,CAACuD,IAAI,EAAE,IAAI,EAAED,OAAO,EAAE1C,QAAQ,CAAC;IACpE,IAAI,IAAI,CAAC,CAACV,IAAI,CAACe,IAAI,CAACC,KAAK,EAAEC,KAAK,CAACC,iBAAiB,CAACJ,QAAQ,CAAC;IAC5D,OAAO,IAAIK,OAAO,CAAC,IAAI,CAAC,CAACnB,IAAI,CAACwD,OAAO,CAACpC,IAAI,CAAC,IAAI,CAAC,CAACpB,IAAI,EAAEc,QAAQ,CAAC,CAAC,CAC9DO,IAAI,CAAEmC,OAAO,IAAK;MACjB,IAAI9C,QAAQ,EAAEA,QAAQ,CAAC,IAAI,EAAE8C,OAAO,EAAE,IAAI,CAAC;IAC7C,CAAC,CAAC,CACDlC,KAAK,CAACZ,QAAQ,IAAI,IAAI,CAAC,CAACN,IAAI,CAAC;EAClC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0D,KAAKA,CAAClC,GAAG,EAAEC,MAAM,EAAEnB,QAAQ,EAAE;IAC3B,MAAMI,QAAQ,GAAGf,kBAAkB,CAAC+B,MAAM,CAAC,IAAI,CAAC,CAAC9B,IAAI,CAACe,IAAI,EAAEa,GAAG,EAAEC,MAAM,EAAEnB,QAAQ,CAAC;IAClF,OAAOX,kBAAkB,CAACgE,UAAU,CAAC,IAAI,CAAC,CAAC/D,IAAI,EAAEc,QAAQ,CAAC;EAC5D;EAEA,OAAOiD,UAAUA,CAAC/D,IAAI,EAAEc,QAAQ,EAAE;IAChCd,IAAI,CACD8D,KAAK,CAAChD,QAAQ,CAAC,CACfO,IAAI,CAAE2C,GAAG,IAAK;MACb,IAAIlD,QAAQ,CAACJ,QAAQ,EAAEI,QAAQ,CAACJ,QAAQ,CAAC,IAAI,EAAEsD,GAAG,CAAC;IACrD,CAAC,CAAC,CACD1C,KAAK,CAAE6B,GAAG,IAAK;MACd,IAAIrC,QAAQ,CAACJ,QAAQ,EAAEI,QAAQ,CAACJ,QAAQ,CAACyC,GAAG,CAAC;IAC/C,CAAC,CAAC;EACN;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEc,UAAUA,CAAClD,IAAI,EAAER,EAAE,EAAE;IACnB,IAAI,CAACQ,IAAI,IAAI,CAACA,IAAI,CAACmD,IAAI,EAAE;MACvB,IAAI3D,EAAE,EACJA,EAAE,CACAb,MAAM,CAACyE,WAAW,CAChB,iCAAiC,EACjCzE,MAAM,CAAC0E,wBAAwB,EAC/B,IAAI,CAAC,CAACpE,IAAI,CAACG,IAAI,EACf,OAAO,EACP,IAAI,EACJ,KAAK,EACL,IACF,CACF,CAAC;MACH;IACF;IACA,IAAIgB,OAAO,CAAC,IAAI,CAAC,CAACnB,IAAI,CAACiE,UAAU,CAAC7C,IAAI,CAAC,IAAI,CAAC,CAACpB,IAAI,EAAE;MAAEkE,IAAI,EAAEnD,IAAI,CAACmD,IAAI;MAAEG,QAAQ,EAAEtD,IAAI,CAACsD;IAAS,CAAC,CAAC,CAAC,CAC9FhD,IAAI,CAAC,MAAM;MACV,IAAId,EAAE,EAAEA,EAAE,CAAC,CAAC;IACd,CAAC,CAAC,CACDe,KAAK,CAAE6B,GAAG,IAAK;MACd,IAAI5C,EAAE,EAAEA,EAAE,CAAC4C,GAAG,CAAC;IACjB,CAAC,CAAC;EACN;;EAEA;AACF;AACA;AACA;AACA;EACEmB,IAAIA,CAACC,OAAO,EAAE7D,QAAQ,EAAE;IACtB,IAAI0C,OAAO,GAAG,CAAC,CAAC;MACdxC,GAAG;IACL,IAAI,OAAO2D,OAAO,KAAK,UAAU,EAAE;MACjC3D,GAAG,GAAG2D,OAAO;IACf,CAAC,MAAM;MACLnB,OAAO,CAACmB,OAAO,GAAGA,OAAO;MACzB3D,GAAG,GAAGF,QAAQ;IAChB;IACA,MAAMI,QAAQ,GAAG,IAAIhB,gBAAgB,CAAC,IAAI,EAAE,IAAI,EAAEsD,OAAO,EAAExC,GAAG,CAAC;IAC/D,IAAI,IAAI,CAAC,CAACZ,IAAI,CAACe,IAAI,CAACC,KAAK,EAAEC,KAAK,CAACC,iBAAiB,CAACJ,QAAQ,CAAC;IAC5D,IAAIK,OAAO,CAAC,IAAI,CAAC,CAACnB,IAAI,CAACsE,IAAI,CAAClD,IAAI,CAAC,IAAI,CAAC,CAACpB,IAAI,EAAEc,QAAQ,CAAC,CAAC,CAACO,IAAI,CAACT,GAAG,IAAI,IAAI,CAAC,CAACR,IAAI,CAAC,CAACkB,KAAK,CAACV,GAAG,IAAI,IAAI,CAAC,CAACR,IAAI,CAAC;EAC1G;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoE,KAAKA,CAAC9D,QAAQ,EAAE;IACd,MAAMI,QAAQ,GAAG,IAAIhB,gBAAgB,CAAC,CAAC;IACvC,IAAI,IAAI,CAAC,CAACE,IAAI,CAACe,IAAI,CAACC,KAAK,EAAEC,KAAK,CAACC,iBAAiB,CAACJ,QAAQ,CAAC;IAC5D,OAAO,IAAIK,OAAO,CAAC,IAAI,CAAC,CAACnB,IAAI,CAACwE,KAAK,CAACpD,IAAI,CAAC,IAAI,CAAC,CAACpB,IAAI,EAAEc,QAAQ,CAAC,CAAC,CAC5DO,IAAI,CAACX,QAAQ,IAAI,IAAI,CAAC,CAACN,IAAI,CAAC,CAC5BkB,KAAK,CAACZ,QAAQ,IAAI,IAAI,CAAC,CAACN,IAAI,CAAC;EAClC;;EAEA;AACF;AACA;AACA;EACEqE,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAAC,CAACzE,IAAI,CAACyE,OAAO,CAAC,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACEC,GAAGA,CAAChE,QAAQ,EAAE;IACZ,MAAMI,QAAQ,GAAG,IAAIhB,gBAAgB,CAAC,CAAC;IACvC,IAAI,IAAI,CAAC,CAACE,IAAI,CAACe,IAAI,CAACC,KAAK,EAAEC,KAAK,CAACC,iBAAiB,CAACJ,QAAQ,CAAC;IAC5D,IAAIK,OAAO,CAAC,IAAI,CAAC,CAACnB,IAAI,CAAC0E,GAAG,CAACtD,IAAI,CAAC,IAAI,CAAC,CAACpB,IAAI,EAAEc,QAAQ,CAAC,CAAC,CACnDO,IAAI,CAAC,MAAM;MACV,IAAIX,QAAQ,EAAEA,QAAQ,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDY,KAAK,CAACZ,QAAQ,IAAI,IAAI,CAAC,CAACN,IAAI,CAAC;EAClC;;EAEA;AACF;AACA;EACEuD,KAAKA,CAAA,EAAG;IACN,IAAI,CAACgB,OAAO,CAAC,CAAC;EAChB;;EAEA;AACF;AACA;EACEA,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC,CAAC3E,IAAI,CAAC2E,OAAO,CAAC,CAAC;EACtB;EAEAC,KAAKA,CAAA,EAAG;IACN,IAAI,CAAC,CAAC5E,IAAI,CAAC4E,KAAK,CAAC,CAAC;EACpB;EAEAC,MAAMA,CAAA,EAAG;IACP,IAAI,CAAC,CAAC7E,IAAI,CAAC6E,MAAM,CAAC,CAAC;EACrB;EAEAC,MAAMA,CAAClD,GAAG,EAAEC,MAAM,EAAE;IAClB,IAAI,CAAC,CAAC7B,IAAI,CAAC8E,MAAM,CAAClD,GAAG,EAAEC,MAAM,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;EACEkD,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAAC,CAAC/E,IAAI,CAAC+E,aAAa,CAAC,CAAC;EACnC;;EAEA;AACF;AACA;AACA;EACEC,KAAKA,CAACC,GAAG,EAAE;IACT,OAAO,IAAI,CAAC,CAACjF,IAAI,CAACgF,KAAK,CAACC,GAAG,CAAC;EAC9B;EAEAC,aAAaA,CAACD,GAAG,EAAE;IACjB,OAAO,IAAI,CAAC,CAACjF,IAAI,CAACkF,aAAa,CAACD,GAAG,CAAC;EACtC;EAEAE,MAAMA,CAACF,GAAG,EAAE;IACV,OAAO,IAAI,CAAC,CAACjF,IAAI,CAACmF,MAAM,CAACF,GAAG,CAAC;EAC/B;EAEAG,QAAQA,CAACH,GAAG,EAAE;IACZ,OAAO,IAAI,CAAC,CAACjF,IAAI,CAACoF,QAAQ,CAACH,GAAG,CAAC;EACjC;;EAEA;EACA;EACA;;EAEA,IAAII,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAC,CAACrF,IAAI,CAACqF,OAAO;EAC3B;EAEAC,OAAOA,CAAC5E,QAAQ,EAAE;IAChB,IAAI,CAACA,QAAQ,EAAE;MACb,MAAM,IAAIhB,MAAM,CAACyE,WAAW,CAC1B,sCAAsC,EACtCzE,MAAM,CAAC6F,oBAAoB,EAC3B,IAAI,CAAC,CAACvF,IAAI,CAACG,IACb,CAAC;IACH;IACA,QAAQ,IAAI,CAAC,CAACH,IAAI,CAACwF,MAAM;MACvB,KAAK5F,MAAM,CAAC6F,aAAa;MACzB,KAAK7F,MAAM,CAAC8F,UAAU;MACtB,KAAK9F,MAAM,CAAC+F,cAAc;MAC1B,KAAK/F,MAAM,CAACgG,QAAQ;QAClB,IAAI,CAACC,IAAI,CAAC,SAAS,EAAEnF,QAAQ,CAAC;QAC9B;MACF,KAAKd,MAAM,CAACkG,SAAS;QACnBpF,QAAQ,CAACqF,IAAI,CAAC,IAAI,CAAC;QACnB;MACF,KAAKnG,MAAM,CAACoG,OAAO;MACnB,KAAKpG,MAAM,CAACqG,MAAM;QAChBvF,QAAQ,CAACqF,IAAI,CACX,IAAI,EACJrG,MAAM,CAACyE,WAAW,CAChB,mBAAmB,EACnBzE,MAAM,CAACwG,4BAA4B,EACnC,IAAI,CAAC,CAAClG,IAAI,CAACG,IAAI,EACf,OAAO,EACP,IAAI,EACJ,IACF,CACF,CAAC;QACD;IACJ;EACF;;EAEA;EACA;EACA;;EAEAgG,EAAEA,CAACC,SAAS,EAAEC,QAAQ,EAAE;IACtB,IAAI,CAAC,CAACrG,IAAI,CAACmG,EAAE,CAACJ,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,EAAEoG,SAAS,EAAEC,QAAQ,CAAC;IACnD,OAAO,IAAI;EACb;EAEAC,GAAGA,CAACF,SAAS,EAAEC,QAAQ,EAAE;IACvB,IAAI,CAAC,CAACrG,IAAI,CAACsG,GAAG,CAACP,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,EAAEoG,SAAS,EAAEC,QAAQ,CAAC;IACpD,OAAO,IAAI;EACb;EAEAR,IAAIA,CAACO,SAAS,EAAEC,QAAQ,EAAE;IACxB,IAAI,CAAC,CAACrG,IAAI,CAAC6F,IAAI,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,EAAEoG,SAAS,EAAEC,QAAQ,CAAC;IACrD,OAAO,IAAI;EACb;EAEAE,SAASA,CAACH,SAAS,EAAE;IACnB,OAAO,IAAI,CAAC,CAACpG,IAAI,CAACuG,SAAS,CAACR,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,EAAEoG,SAAS,CAAC;EACzD;EAEAI,WAAWA,CAACJ,SAAS,EAAEC,QAAQ,EAAE;IAC/B,IAAI,CAAC,CAACrG,IAAI,CAACwG,WAAW,CAACT,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,EAAEoG,SAAS,EAAEC,QAAQ,CAAC;IAC5D,OAAO,IAAI;EACb;EAEAI,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC,CAACzG,IAAI,CAACyG,UAAU,CAACV,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,CAAC;EAC/C;EAEA0G,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAAC,CAAC1G,IAAI,CAAC0G,eAAe,CAACX,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,CAAC;EACpD;EAEA2G,aAAaA,CAACP,SAAS,EAAEC,QAAQ,EAAE;IACjC,OAAO,IAAI,CAAC,CAACrG,IAAI,CAAC2G,aAAa,CAACZ,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,EAAEoG,SAAS,EAAEC,QAAQ,CAAC;EACvE;EAEAO,eAAeA,CAACR,SAAS,EAAEC,QAAQ,EAAE;IACnC,IAAI,CAAC,CAACrG,IAAI,CAAC4G,eAAe,CAACb,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,EAAEoG,SAAS,EAAEC,QAAQ,CAAC;IAChE,OAAO,IAAI;EACb;EAEAQ,mBAAmBA,CAACT,SAAS,EAAEC,QAAQ,EAAE;IACvC,IAAI,CAAC,CAACrG,IAAI,CAAC6G,mBAAmB,CAACd,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,EAAEoG,SAAS,EAAEC,QAAQ,CAAC;IACpE,OAAO,IAAI;EACb;EAEAS,kBAAkBA,CAACV,SAAS,EAAEC,QAAQ,EAAE;IACtC,IAAI,CAAC,CAACrG,IAAI,CAAC8G,kBAAkB,CAACf,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,EAAEoG,SAAS,EAAEC,QAAQ,CAAC;IACnE,OAAO,IAAI;EACb;EAEAU,cAAcA,CAACX,SAAS,EAAEC,QAAQ,EAAE;IAClC,IAAI,CAAC,CAACrG,IAAI,CAAC+G,cAAc,CAAChB,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,EAAEoG,SAAS,EAAEC,QAAQ,CAAC;IAC/D,OAAO,IAAI;EACb;EAEAW,eAAeA,CAACC,CAAC,EAAE;IACjB,IAAI,CAAC,CAACjH,IAAI,CAACgH,eAAe,CAACjB,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,EAAEiH,CAAC,CAAC;IAC9C,OAAO,IAAI;EACb;EAEAC,YAAYA,CAACd,SAAS,EAAE;IACtB,OAAO,IAAI,CAAC,CAACpG,IAAI,CAACkH,YAAY,CAACnB,IAAI,CAAC,IAAI,CAAC,CAAC/F,IAAI,EAAEoG,SAAS,CAAC;EAC5D;AACF;AAEAe,MAAM,CAACC,OAAO,GAAGrH,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
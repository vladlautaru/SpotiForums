{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst Queue = require('denque');\nconst Net = require('net');\nconst PacketInputStream = require('./io/packet-input-stream');\nconst PacketOutputStream = require('./io/packet-output-stream');\nconst CompressionInputStream = require('./io/compression-input-stream');\nconst CompressionOutputStream = require('./io/compression-output-stream');\nconst ServerStatus = require('./const/server-status');\nconst ConnectionInformation = require('./misc/connection-information');\nconst tls = require('tls');\nconst Errors = require('./misc/errors');\nconst Utils = require('./misc/utils');\nconst Capabilities = require('./const/capabilities');\nconst ConnectionOptions = require('./config/connection-options');\n\n/*commands*/\nconst Authentication = require('./cmd/handshake/authentication');\nconst Quit = require('./cmd/quit');\nconst Ping = require('./cmd/ping');\nconst Reset = require('./cmd/reset');\nconst Query = require('./cmd/query');\nconst Prepare = require('./cmd/prepare');\nconst OkPacket = require('./cmd/class/ok-packet');\nconst Execute = require('./cmd/execute');\nconst ClosePrepare = require('./cmd/close-prepare');\nconst BatchBulk = require('./cmd/batch-bulk');\nconst ChangeUser = require('./cmd/change-user');\nconst {\n  Status\n} = require('./const/connection_status');\nconst CommandParameter = require('./command-parameter');\nconst LruPrepareCache = require('./lru-prepare-cache');\nconst fsPromises = require('fs').promises;\nconst Parse = require('./misc/parse');\nconst Collations = require('./const/collations');\nconst ConnOptions = require('./config/connection-options');\nconst convertFixedTime = function (tz, conn) {\n  if (tz === 'UTC' || tz === 'Etc/UTC' || tz === 'Z' || tz === 'Etc/GMT') {\n    return '+00:00';\n  } else if (tz.startsWith('Etc/GMT') || tz.startsWith('GMT')) {\n    let tzdiff;\n    let negate;\n\n    // strangely Etc/GMT+8 = GMT-08:00 = offset -8\n    if (tz.startsWith('Etc/GMT')) {\n      tzdiff = tz.substring(7);\n      negate = !tzdiff.startsWith('-');\n    } else {\n      tzdiff = tz.substring(3);\n      negate = tzdiff.startsWith('-');\n    }\n    let diff = parseInt(tzdiff.substring(1));\n    if (isNaN(diff)) {\n      throw Errors.createFatalError(`Automatic timezone setting fails. wrong Server timezone '${tz}' conversion to +/-HH:00 conversion.`, Errors.ER_WRONG_AUTO_TIMEZONE, conn.info);\n    }\n    return (negate ? '-' : '+') + (diff >= 10 ? diff : '0' + diff) + ':00';\n  }\n  return tz;\n};\nconst redirectUrlFormat = /(mariadb|mysql):\\/\\/(([^/@:]+)?(:([^/]+))?@)?(([^/:]+)(:([0-9]+))?)(\\/([^?]+)(\\?(.*))?)?$/;\n\n/**\n * New Connection instance.\n *\n * @param options    connection options\n * @returns Connection instance\n * @constructor\n * @fires Connection#connect\n * @fires Connection#end\n * @fires Connection#error\n *\n */\nclass Connection extends EventEmitter {\n  opts;\n  sendQueue = new Queue();\n  receiveQueue = new Queue();\n  waitingAuthenticationQueue = new Queue();\n  status = Status.NOT_CONNECTED;\n  socket = null;\n  timeout = null;\n  addCommand;\n  streamOut;\n  streamIn;\n  info;\n  prepareCache;\n  constructor(options) {\n    super();\n    this.opts = Object.assign(new EventEmitter(), options);\n    this.info = new ConnectionInformation(this.opts, this.redirect.bind(this));\n    this.prepareCache = this.opts.prepareCacheLength > 0 ? new LruPrepareCache(this.info, this.opts.prepareCacheLength) : null;\n    this.addCommand = this.addCommandQueue;\n    this.streamOut = new PacketOutputStream(this.opts, this.info);\n    this.streamIn = new PacketInputStream(this.unexpectedPacket.bind(this), this.receiveQueue, this.streamOut, this.opts, this.info);\n    this.on('close_prepare', this._closePrepare.bind(this));\n    this.escape = Utils.escape.bind(this, this.opts, this.info);\n    this.escapeId = Utils.escapeId.bind(this, this.opts, this.info);\n  }\n\n  //*****************************************************************\n  // public methods\n  //*****************************************************************\n\n  /**\n   * Connect event\n   *\n   * @returns {Promise} promise\n   */\n  connect() {\n    const conn = this;\n    this.status = Status.CONNECTING;\n    const authenticationParam = new CommandParameter(null, null, this.opts, null);\n    return new Promise(function (resolve, reject) {\n      conn.connectRejectFct = reject;\n      conn.connectResolveFct = resolve;\n      // add a handshake to msg queue\n      const authentication = new Authentication(authenticationParam, conn.authSucceedHandler.bind(conn), conn.authFailHandler.bind(conn), conn.createSecureContext.bind(conn), conn.getSocket.bind(conn));\n      Error.captureStackTrace(authentication);\n      authentication.once('end', () => {\n        conn.receiveQueue.shift();\n        // conn.info.collation might not be initialized\n        // in case of handshake throwing error\n        if (!conn.opts.collation && conn.info.collation) {\n          conn.opts.emit('collation', conn.info.collation);\n        }\n        process.nextTick(conn.nextSendCmd.bind(conn));\n      });\n      conn.receiveQueue.push(authentication);\n      conn.streamInitSocket.call(conn);\n    });\n  }\n  executePromise(cmdParam, prepare, resolve, reject) {\n    const cmd = new Execute(resolve, this._logAndReject.bind(this, reject), this.opts, cmdParam, prepare);\n    this.addCommand(cmd);\n  }\n  batch(cmdParam) {\n    if (!cmdParam.sql) {\n      const err = Errors.createError('sql parameter is mandatory', Errors.ER_UNDEFINED_SQL, this.info, 'HY000', null, false, cmdParam.stack);\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      return Promise.reject(err);\n    }\n    if (!cmdParam.values) {\n      const err = Errors.createError('Batch must have values set', Errors.ER_BATCH_WITH_NO_VALUES, this.info, 'HY000', cmdParam.sql.length > this.opts.debugLen ? cmdParam.sql.substring(0, this.opts.debugLen) + '...' : cmdParam.sql, false, cmdParam.stack);\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      return Promise.reject(err);\n    }\n    return new Promise(this.prepare.bind(this, cmdParam)).then(prepare => {\n      const usePlaceHolder = cmdParam.opts && cmdParam.opts.namedPlaceholders || this.opts.namedPlaceholders;\n      let vals;\n      if (Array.isArray(cmdParam.values)) {\n        if (usePlaceHolder) {\n          vals = cmdParam.values;\n        } else if (Array.isArray(cmdParam.values[0])) {\n          vals = cmdParam.values;\n        } else if (prepare.parameterCount === 1) {\n          vals = [];\n          for (let i = 0; i < cmdParam.values.length; i++) {\n            vals.push([cmdParam.values[i]]);\n          }\n        } else {\n          vals = [cmdParam.values];\n        }\n      } else {\n        vals = [[cmdParam.values]];\n      }\n      cmdParam.values = vals;\n      let useBulk = this._canUseBulk(vals, cmdParam.opts);\n      if (useBulk) {\n        return new Promise(this.executeBulkPromise.bind(this, cmdParam, prepare, this.opts));\n      } else {\n        const executes = [];\n        const cmdOpt = Object.assign({}, this.opts, cmdParam.opts);\n        for (let i = 0; i < vals.length; i++) {\n          executes.push(prepare.execute(vals[i], cmdParam.opts, null, cmdParam.stack));\n        }\n        return Promise.all(executes).then(function (res) {\n          if (cmdParam.opts && cmdParam.opts.fullResult) {\n            return Promise.resolve(res);\n          } else {\n            // aggregate results\n            let firstResult = res[0];\n            if (cmdOpt.metaAsArray) firstResult = firstResult[0];\n            if (firstResult instanceof OkPacket) {\n              let affectedRows = 0;\n              const insertId = firstResult.insertId;\n              const warningStatus = firstResult.warningStatus;\n              if (cmdOpt.metaAsArray) {\n                for (let i = 0; i < res.length; i++) {\n                  affectedRows += res[i][0].affectedRows;\n                }\n                return Promise.resolve([new OkPacket(affectedRows, insertId, warningStatus), []]);\n              } else {\n                for (let i = 0; i < res.length; i++) {\n                  affectedRows += res[i].affectedRows;\n                }\n                return Promise.resolve(new OkPacket(affectedRows, insertId, warningStatus));\n              }\n            } else {\n              // results have result-set. example :'INSERT ... RETURNING'\n              // aggregate results\n              if (cmdOpt.metaAsArray) {\n                const rs = [];\n                res.forEach(row => {\n                  rs.push(...row[0]);\n                });\n                return Promise.resolve([rs, res[0][1]]);\n              } else {\n                const rs = [];\n                res.forEach(row => {\n                  rs.push(...row);\n                });\n                Object.defineProperty(rs, 'meta', {\n                  value: res[0].meta,\n                  writable: true,\n                  enumerable: this.opts.metaEnumerable\n                });\n                return Promise.resolve(rs);\n              }\n            }\n          }\n        }.bind(this)).finally(() => prepare.close());\n      }\n    });\n  }\n  executeBulkPromise(cmdParam, prepare, opts, resolve, reject) {\n    const cmd = new BatchBulk(res => {\n      prepare.close();\n      return resolve(res);\n    }, function (err) {\n      prepare.close();\n      if (opts.logger.error) opts.logger.error(err);\n      reject(err);\n    }, opts, prepare, cmdParam);\n    this.addCommand(cmd);\n  }\n\n  /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param cmdParam command context\n   * @param resolve success function\n   * @param reject rejection function\n   */\n  ping(cmdParam, resolve, reject) {\n    if (cmdParam.opts && cmdParam.opts.timeout) {\n      if (cmdParam.opts.timeout < 0) {\n        const err = Errors.createError('Ping cannot have negative timeout value', Errors.ER_BAD_PARAMETER_VALUE, this.info, '0A000');\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        reject(err);\n        return;\n      }\n      let tOut = setTimeout(function () {\n        tOut = undefined;\n        const err = Errors.createFatalError('Ping timeout', Errors.ER_PING_TIMEOUT, this.info, '0A000');\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        // close connection\n        this.addCommand = this.addCommandDisabled;\n        clearTimeout(this.timeout);\n        if (this.status !== Status.CLOSING && this.status !== Status.CLOSED) {\n          this.sendQueue.clear();\n          this.status = Status.CLOSED;\n          this.socket.destroy();\n        }\n        this.clear();\n        reject(err);\n      }.bind(this), cmdParam.opts.timeout);\n      this.addCommand(new Ping(cmdParam, () => {\n        if (tOut) {\n          clearTimeout(tOut);\n          resolve();\n        }\n      }, err => {\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        clearTimeout(tOut);\n        reject(err);\n      }));\n      return;\n    }\n    this.addCommand(new Ping(cmdParam, resolve, reject));\n  }\n\n  /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   */\n  reset(cmdParam, resolve, reject) {\n    if (this.info.isMariaDB() && this.info.hasMinVersion(10, 2, 4) || !this.info.isMariaDB() && this.info.hasMinVersion(5, 7, 3)) {\n      const conn = this;\n      const resetCmd = new Reset(cmdParam, () => {\n        conn.prepareCache.reset();\n        let prom = Promise.resolve();\n        // re-execute init query / session query timeout\n        prom.then(conn.handleCharset.bind(conn)).then(conn.handleTimezone.bind(conn)).then(conn.executeInitQuery.bind(conn)).then(conn.executeSessionTimeout.bind(conn)).then(resolve).catch(reject);\n      }, reject);\n      this.addCommand(resetCmd);\n      return;\n    }\n    const err = new Error(`Reset command not permitted for server ${this.info.serverVersion.raw} (requires server MariaDB version 10.2.4+ or MySQL 5.7.3+)`);\n    err.stack = cmdParam.stack;\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    reject(err);\n  }\n\n  /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */\n  isValid() {\n    return this.status === Status.CONNECTED;\n  }\n\n  /**\n   * Terminate connection gracefully.\n   */\n  end(cmdParam, resolve, reject) {\n    this.addCommand = this.addCommandDisabled;\n    clearTimeout(this.timeout);\n    if (this.status < Status.CLOSING && this.status !== Status.NOT_CONNECTED) {\n      this.status = Status.CLOSING;\n      const ended = () => {\n        this.status = Status.CLOSED;\n        this.socket.destroy();\n        this.socket.unref();\n        this.clear();\n        this.receiveQueue.clear();\n        resolve();\n      };\n      const quitCmd = new Quit(cmdParam, ended, ended);\n      this.sendQueue.push(quitCmd);\n      this.receiveQueue.push(quitCmd);\n      if (this.sendQueue.length === 1) {\n        process.nextTick(this.nextSendCmd.bind(this));\n      }\n    } else resolve();\n  }\n\n  /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */\n  destroy() {\n    this.addCommand = this.addCommandDisabled;\n    clearTimeout(this.timeout);\n    if (this.status < Status.CLOSING) {\n      this.status = Status.CLOSING;\n      this.sendQueue.clear();\n      if (this.receiveQueue.length > 0) {\n        //socket is closed, but server may still be processing a huge select\n        //only possibility is to kill process by another thread\n        //TODO reuse a pool connection to avoid connection creation\n        const self = this;\n\n        // relying on IP in place of DNS to ensure using same server\n        const remoteAddress = this.socket.remoteAddress;\n        const connOption = remoteAddress ? Object.assign({}, this.opts, {\n          host: remoteAddress\n        }) : this.opts;\n        const killCon = new Connection(connOption);\n        killCon.connect().then(() => {\n          //*************************************************\n          //kill connection\n          //*************************************************\n          new Promise(killCon.query.bind(killCon, {\n            sql: `KILL ${self.info.threadId}`\n          })).finally(err => {\n            const destroyError = Errors.createFatalError('Connection destroyed, command was killed', Errors.ER_CMD_NOT_EXECUTED_DESTROYED, self.info);\n            if (self.opts.logger.error) self.opts.logger.error(destroyError);\n            self.socketErrorDispatchToQueries(destroyError);\n            if (self.socket) {\n              const sok = self.socket;\n              process.nextTick(() => {\n                sok.destroy();\n              });\n            }\n            self.status = Status.CLOSED;\n            self.clear();\n            new Promise(killCon.end.bind(killCon)).catch(() => {});\n          });\n        }).catch(() => {\n          //*************************************************\n          //failing to create a kill connection, end normally\n          //*************************************************\n          const ended = () => {\n            let sock = self.socket;\n            self.clear();\n            self.status = Status.CLOSED;\n            sock.destroy();\n            self.receiveQueue.clear();\n          };\n          const quitCmd = new Quit(ended, ended);\n          self.sendQueue.push(quitCmd);\n          self.receiveQueue.push(quitCmd);\n          if (self.sendQueue.length === 1) {\n            process.nextTick(self.nextSendCmd.bind(self));\n          }\n        });\n      } else {\n        this.status = Status.CLOSED;\n        this.socket.destroy();\n        this.clear();\n      }\n    }\n  }\n  pause() {\n    this.socket.pause();\n  }\n  resume() {\n    this.socket.resume();\n  }\n  format(sql, values) {\n    const err = Errors.createError('\"Connection.format intentionally not implemented. please use Connection.query(sql, values), it will be more secure and faster', Errors.ER_NOT_IMPLEMENTED_FORMAT, this.info, '0A000');\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    throw err;\n  }\n\n  //*****************************************************************\n  // additional public methods\n  //*****************************************************************\n\n  /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */\n  serverVersion() {\n    if (!this.info.serverVersion) {\n      const err = new Error('cannot know if server information until connection is established');\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      throw err;\n    }\n    return this.info.serverVersion.raw;\n  }\n\n  /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */\n  debug(val) {\n    if (typeof val === 'boolean') {\n      if (val && !this.opts.logger.network) this.opts.logger.network = console.log;\n    } else if (typeof val === 'function') {\n      this.opts.logger.network = val;\n    }\n    this.opts.emit('debug', val);\n  }\n  debugCompress(val) {\n    if (val) {\n      if (typeof val === 'boolean') {\n        this.opts.debugCompress = val;\n        if (val && !this.opts.logger.network) this.opts.logger.network = console.log;\n      } else if (typeof val === 'function') {\n        this.opts.debugCompress = true;\n        this.opts.logger.network = val;\n      }\n    } else this.opts.debugCompress = false;\n  }\n\n  //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n  get __tests() {\n    return new TestMethods(this.info.collation, this.socket);\n  }\n\n  //*****************************************************************\n  // internal methods\n  //*****************************************************************\n\n  /**\n   * Use multiple COM_STMT_EXECUTE or COM_STMT_BULK_EXECUTE\n   *\n   * @param values current batch values\n   * @param _options batch option\n   * @return {boolean} indicating if can use bulk command\n   */\n  _canUseBulk(values, _options) {\n    if (_options && _options.fullResult) return false;\n    // not using info.isMariaDB() directly in case of callback use,\n    // without connection being completely finished.\n    const bulkEnable = _options === undefined || _options === null ? this.opts.bulk : _options.bulk !== undefined && _options.bulk !== null ? _options.bulk : this.opts.bulk;\n    if (this.info.serverVersion && this.info.serverVersion.mariaDb && this.info.hasMinVersion(10, 2, 7) && bulkEnable && (this.info.serverCapabilities & Capabilities.MARIADB_CLIENT_STMT_BULK_OPERATIONS) > 0n) {\n      //ensure that there is no stream object\n      if (values !== undefined) {\n        if (!this.opts.namedPlaceholders) {\n          //ensure that all parameters have same length\n          //single array is considered as an array of single element.\n          const paramLen = Array.isArray(values[0]) ? values[0].length : values[0] ? 1 : 0;\n          if (paramLen === 0) return false;\n          for (let r = 0; r < values.length; r++) {\n            let row = values[r];\n            if (!Array.isArray(row)) row = [row];\n            if (paramLen !== row.length) {\n              return false;\n            }\n            // streaming data not permitted\n            for (let j = 0; j < paramLen; j++) {\n              const val = row[j];\n              if (val != null && typeof val === 'object' && typeof val.pipe === 'function' && typeof val.read === 'function') {\n                return false;\n              }\n            }\n          }\n        } else {\n          for (let r = 0; r < values.length; r++) {\n            let row = values[r];\n            const keys = Object.keys(row);\n            for (let j = 0; j < keys.length; j++) {\n              const val = row[keys[j]];\n              if (val != null && typeof val === 'object' && typeof val.pipe === 'function' && typeof val.read === 'function') {\n                return false;\n              }\n            }\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  executeSessionVariableQuery() {\n    if (this.opts.sessionVariables) {\n      const values = [];\n      let sessionQuery = 'set ';\n      let keys = Object.keys(this.opts.sessionVariables);\n      if (keys.length > 0) {\n        for (let k = 0; k < keys.length; ++k) {\n          sessionQuery += (k !== 0 ? ',' : '') + '@@' + keys[k].replace(/[^a-z0-9_]/gi, '') + '=?';\n          values.push(this.opts.sessionVariables[keys[k]]);\n        }\n        return new Promise(this.query.bind(this, new CommandParameter(sessionQuery, values))).catch(initialErr => {\n          const err = Errors.createFatalError(`Error setting session variable (value ${JSON.stringify(this.opts.sessionVariables)}). Error: ${initialErr.message}`, Errors.ER_SETTING_SESSION_ERROR, this.info, '08S01', sessionQuery);\n          if (this.opts.logger.error) this.opts.logger.error(err);\n          return Promise.reject(err);\n        });\n      }\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * set charset to charset/collation if set or utf8mb4 if not.\n   * @returns {Promise<void>}\n   * @private\n   */\n  handleCharset() {\n    if (this.opts.collation) {\n      // if index <= 255, skip command, since collation has already been set during handshake response.\n      if (this.opts.collation.index <= 255) return Promise.resolve();\n      const charset = this.opts.collation.charset === 'utf8' && this.opts.collation.maxLength === 4 ? 'utf8mb4' : this.opts.collation.charset;\n      return new Promise(this.query.bind(this, new CommandParameter(`SET NAMES ${charset} COLLATE ${this.opts.collation.name}`)));\n    }\n\n    // MXS-4635: server can some information directly on first Ok_Packet, like not truncated collation\n    // in this case, avoid useless SET NAMES utf8mb4 command\n    if (!this.opts.charset && this.info.collation && this.info.collation.charset === 'utf8' && this.info.collation.maxLength === 4) {\n      this.info.collation = Collations.fromCharset('utf8mb4');\n      return Promise.resolve();\n    }\n    const connCharset = this.opts.charset ? this.opts.charset : 'utf8mb4';\n    this.info.collation = Collations.fromCharset(connCharset);\n    return new Promise(this.query.bind(this, new CommandParameter(`SET NAMES ${connCharset}`)));\n  }\n\n  /**\n   * Asking server timezone if not set in case of 'auto'\n   * @returns {Promise<void>}\n   * @private\n   */\n  handleTimezone() {\n    const conn = this;\n    if (this.opts.timezone === 'local') this.opts.timezone = undefined;\n    if (this.opts.timezone === 'auto') {\n      return new Promise(this.query.bind(this, new CommandParameter('SELECT @@system_time_zone stz, @@time_zone tz'))).then(res => {\n        const serverTimezone = res[0].tz === 'SYSTEM' ? res[0].stz : res[0].tz;\n        const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (serverTimezone === localTz || convertFixedTime(serverTimezone, conn) === convertFixedTime(localTz, conn)) {\n          //server timezone is identical to client tz, skipping setting\n          this.opts.timezone = localTz;\n          return Promise.resolve();\n        }\n        return this._setSessionTimezone(convertFixedTime(localTz, conn));\n      });\n    }\n    if (this.opts.timezone) {\n      return this._setSessionTimezone(convertFixedTime(this.opts.timezone, conn));\n    }\n    return Promise.resolve();\n  }\n  _setSessionTimezone(tz) {\n    return new Promise(this.query.bind(this, new CommandParameter('SET time_zone=?', [tz]))).catch(err => {\n      const er = Errors.createFatalError(`setting timezone '${tz}' fails on server.\\n look at https://mariadb.com/kb/en/mysql_tzinfo_to_sql/ to load IANA timezone. `, Errors.ER_WRONG_IANA_TIMEZONE, this.info);\n      if (this.opts.logger.error) this.opts.logger.error(er);\n      return Promise.reject(er);\n    });\n  }\n  checkServerVersion() {\n    if (!this.opts.forceVersionCheck) {\n      return Promise.resolve();\n    }\n    return new Promise(this.query.bind(this, new CommandParameter('SELECT @@VERSION AS v'))).then(function (res) {\n      this.info.serverVersion.raw = res[0].v;\n      this.info.serverVersion.mariaDb = this.info.serverVersion.raw.includes('MariaDB');\n      ConnectionInformation.parseVersionString(this.info);\n      return Promise.resolve();\n    }.bind(this));\n  }\n  executeInitQuery() {\n    if (this.opts.initSql) {\n      const initialArr = Array.isArray(this.opts.initSql) ? this.opts.initSql : [this.opts.initSql];\n      const initialPromises = [];\n      initialArr.forEach(sql => {\n        initialPromises.push(new Promise(this.query.bind(this, new CommandParameter(sql))));\n      });\n      return Promise.all(initialPromises).catch(initialErr => {\n        const err = Errors.createFatalError(`Error executing initial sql command: ${initialErr.message}`, Errors.ER_INITIAL_SQL_ERROR, this.info);\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        return Promise.reject(err);\n      });\n    }\n    return Promise.resolve();\n  }\n  executeSessionTimeout() {\n    if (this.opts.queryTimeout) {\n      if (this.info.isMariaDB() && this.info.hasMinVersion(10, 1, 2)) {\n        const query = `SET max_statement_time=${this.opts.queryTimeout / 1000}`;\n        new Promise(this.query.bind(this, new CommandParameter(query))).catch(function (initialErr) {\n          const err = Errors.createFatalError(`Error setting session queryTimeout: ${initialErr.message}`, Errors.ER_INITIAL_TIMEOUT_ERROR, this.info, '08S01', query);\n          if (this.opts.logger.error) this.opts.logger.error(err);\n          return Promise.reject(err);\n        }.bind(this));\n      } else {\n        const err = Errors.createError(`Can only use queryTimeout for MariaDB server after 10.1.1. queryTimeout value: ${this.opts.queryTimeout}`, Errors.ER_TIMEOUT_NOT_SUPPORTED, this.info, 'HY000', this.opts.queryTimeout);\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        return Promise.reject(err);\n      }\n    }\n    return Promise.resolve();\n  }\n  getSocket() {\n    return this.socket;\n  }\n\n  /**\n   * Initialize socket and associate events.\n   * @private\n   */\n  streamInitSocket() {\n    if (this.opts.connectTimeout) {\n      this.timeout = setTimeout(this.connectTimeoutReached.bind(this), this.opts.connectTimeout, Date.now());\n    }\n    if (this.opts.socketPath) {\n      this.socket = Net.connect(this.opts.socketPath);\n    } else if (this.opts.stream) {\n      if (typeof this.opts.stream === 'function') {\n        const tmpSocket = this.opts.stream(function (err, stream) {\n          if (err) {\n            this.authFailHandler(err);\n            return;\n          }\n          this.socket = stream ? stream : Net.connect(this.opts.port, this.opts.host);\n          this.socketInit();\n        }.bind(this));\n        if (tmpSocket) {\n          this.socket = tmpSocket;\n          this.socketInit();\n        }\n      } else {\n        this.authFailHandler(Errors.createError('stream option is not a function. stream must be a function with (error, callback) parameter', Errors.ER_BAD_PARAMETER_VALUE, this.info));\n      }\n      return;\n    } else {\n      this.socket = Net.connect(this.opts.port, this.opts.host);\n      this.socket.setNoDelay(true);\n    }\n    this.socketInit();\n  }\n  socketInit() {\n    this.socket.on('data', this.streamIn.onData.bind(this.streamIn));\n    this.socket.on('error', this.socketErrorHandler.bind(this));\n    this.socket.on('end', this.socketErrorHandler.bind(this));\n    this.socket.on('connect', function () {\n      if (this.status === Status.CONNECTING) {\n        this.status = Status.AUTHENTICATING;\n        this.socket.setTimeout(this.opts.socketTimeout, this.socketTimeoutReached.bind(this));\n        this.socket.setNoDelay(true);\n\n        // keep alive for socket. This won't reset server wait_timeout use pool option idleTimeout for that\n        if (this.opts.keepAliveDelay) {\n          this.socket.setKeepAlive(true, this.opts.keepAliveDelay);\n        }\n      }\n    }.bind(this));\n    this.socket.writeBuf = buf => this.socket.write(buf);\n    this.socket.flush = () => {};\n    this.streamOut.setStream(this.socket);\n  }\n\n  /**\n   * Authentication success result handler.\n   *\n   * @private\n   */\n  authSucceedHandler() {\n    //enable packet compression according to option\n    if (this.opts.compress) {\n      if (this.info.serverCapabilities & Capabilities.COMPRESS) {\n        this.streamOut.setStream(new CompressionOutputStream(this.socket, this.opts, this.info));\n        this.streamIn = new CompressionInputStream(this.streamIn, this.receiveQueue, this.opts, this.info);\n        this.socket.removeAllListeners('data');\n        this.socket.on('data', this.streamIn.onData.bind(this.streamIn));\n      } else if (this.opts.logger.error) {\n        this.opts.logger.error(Errors.createError(\"connection is configured to use packet compression, but the server doesn't have this capability\", Errors.ER_COMPRESSION_NOT_SUPPORTED, this.info));\n      }\n    }\n    this.addCommand = this.opts.pipelining ? this.addCommandEnablePipeline : this.addCommandEnable;\n    const conn = this;\n    this.status = Status.INIT_CMD;\n    this.executeSessionVariableQuery().then(conn.handleCharset.bind(conn)).then(this.handleTimezone.bind(this)).then(this.checkServerVersion.bind(this)).then(this.executeInitQuery.bind(this)).then(this.executeSessionTimeout.bind(this)).then(() => {\n      clearTimeout(this.timeout);\n      conn.status = Status.CONNECTED;\n      process.nextTick(conn.connectResolveFct, conn);\n      const commands = conn.waitingAuthenticationQueue.toArray();\n      commands.forEach(cmd => {\n        conn.addCommand(cmd);\n      });\n      conn.waitingAuthenticationQueue = null;\n      conn.connectRejectFct = null;\n      conn.connectResolveFct = null;\n    }).catch(err => {\n      if (!err.fatal) {\n        const res = () => {\n          conn.authFailHandler.call(conn, err);\n        };\n        conn.end(res, res);\n      } else {\n        conn.authFailHandler.call(conn, err);\n      }\n      return Promise.reject(err);\n    });\n  }\n\n  /**\n   * Authentication failed result handler.\n   *\n   * @private\n   */\n  authFailHandler(err) {\n    clearTimeout(this.timeout);\n    if (this.connectRejectFct) {\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      //remove handshake command\n      this.receiveQueue.shift();\n      this.fatalError(err, true);\n      process.nextTick(this.connectRejectFct, err);\n      this.connectRejectFct = null;\n    }\n  }\n\n  /**\n   * Create TLS socket and associate events.\n   *\n   * @param info current connection information\n   * @param callback  callback function when done\n   * @private\n   */\n  createSecureContext(info, callback) {\n    info.requireValidCert = this.opts.ssl === true || this.opts.ssl.rejectUnauthorized === undefined || this.opts.ssl.rejectUnauthorized === true;\n    const baseConf = {\n      servername: this.opts.host,\n      socket: this.socket,\n      rejectUnauthorized: false\n    };\n    const sslOption = this.opts.ssl === true ? baseConf : Object.assign({}, this.opts.ssl, baseConf);\n    try {\n      const secureSocket = tls.connect(sslOption, callback);\n      secureSocket.on('data', this.streamIn.onData.bind(this.streamIn));\n      secureSocket.on('error', this.socketErrorHandler.bind(this));\n      secureSocket.on('end', this.socketErrorHandler.bind(this));\n      secureSocket.writeBuf = buf => secureSocket.write(buf);\n      secureSocket.flush = () => {};\n      this.socket.removeAllListeners('data');\n      this.socket = secureSocket;\n      this.streamOut.setStream(secureSocket);\n    } catch (err) {\n      this.socketErrorHandler(err);\n    }\n  }\n\n  /**\n   * Handle packet when no packet is expected.\n   * (there can be an ERROR packet send by server/proxy to inform that connection is ending).\n   *\n   * @param packet  packet\n   * @private\n   */\n  unexpectedPacket(packet) {\n    if (packet && packet.peek() === 0xff) {\n      //can receive unexpected error packet from server/proxy\n      //to inform that connection is closed (usually by timeout)\n      let err = packet.readError(this.info);\n      if (err.fatal && this.status < Status.CLOSING) {\n        this.emit('error', err);\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        this.end(() => {}, () => {});\n      }\n    } else if (this.status < Status.CLOSING) {\n      const err = Errors.createFatalError(`receiving packet from server without active commands\\nconn:${this.info.threadId ? this.info.threadId : -1}(${packet.pos},${packet.end})\\n${Utils.log(this.opts, packet.buf, packet.pos, packet.end)}`, Errors.ER_UNEXPECTED_PACKET, this.info);\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      this.emit('error', err);\n      this.destroy();\n    }\n  }\n\n  /**\n   * Handle connection timeout.\n   *\n   * @private\n   */\n  connectTimeoutReached(initialConnectionTime) {\n    this.timeout = null;\n    const handshake = this.receiveQueue.peekFront();\n    const err = Errors.createFatalError(`Connection timeout: failed to create socket after ${Date.now() - initialConnectionTime}ms`, Errors.ER_CONNECTION_TIMEOUT, this.info, '08S01', null, handshake ? handshake.stack : null);\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    this.authFailHandler(err);\n  }\n\n  /**\n   * Handle socket timeout.\n   *\n   * @private\n   */\n  socketTimeoutReached() {\n    const err = Errors.createFatalError('socket timeout', Errors.ER_SOCKET_TIMEOUT, this.info);\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    this.fatalError(err, true);\n  }\n\n  /**\n   * Add command to waiting queue until authentication.\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandQueue(cmd) {\n    this.waitingAuthenticationQueue.push(cmd);\n  }\n\n  /**\n   * Add command to command sending and receiving queue.\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandEnable(cmd) {\n    cmd.once('end', this._sendNextCmdImmediate.bind(this));\n\n    //send immediately only if no current active receiver\n    if (this.sendQueue.isEmpty() && this.receiveQueue.isEmpty()) {\n      this.receiveQueue.push(cmd);\n      cmd.start(this.streamOut, this.opts, this.info);\n    } else {\n      this.receiveQueue.push(cmd);\n      this.sendQueue.push(cmd);\n    }\n  }\n\n  /**\n   * Add command to command sending and receiving queue using pipelining\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandEnablePipeline(cmd) {\n    cmd.once('send_end', this._sendNextCmdImmediate.bind(this));\n    this.receiveQueue.push(cmd);\n    if (this.sendQueue.isEmpty()) {\n      cmd.start(this.streamOut, this.opts, this.info);\n      if (cmd.sending) {\n        this.sendQueue.push(cmd);\n        cmd.prependOnceListener('send_end', this.sendQueue.shift.bind(this.sendQueue));\n      }\n    } else {\n      this.sendQueue.push(cmd);\n    }\n  }\n\n  /**\n   * Replacing command when connection is closing or closed to send a proper error message.\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandDisabled(cmd) {\n    const err = cmd.throwNewError('Cannot execute new commands: connection closed', true, this.info, '08S01', Errors.ER_CMD_CONNECTION_CLOSED);\n    if (this.opts.logger.error) this.opts.logger.error(err);\n  }\n\n  /**\n   * Handle socket error.\n   *\n   * @param err               socket error\n   * @private\n   */\n  socketErrorHandler(err) {\n    if (this.status >= Status.CLOSING) return;\n    if (this.socket) {\n      this.socket.writeBuf = () => {};\n      this.socket.flush = () => {};\n    }\n\n    //socket has been ended without error\n    if (!err) {\n      err = Errors.createFatalError('socket has unexpectedly been closed', Errors.ER_SOCKET_UNEXPECTED_CLOSE, this.info);\n    } else {\n      err.fatal = true;\n      err.sqlState = 'HY000';\n    }\n    switch (this.status) {\n      case Status.CONNECTING:\n      case Status.AUTHENTICATING:\n        const currentCmd = this.receiveQueue.peekFront();\n        if (currentCmd && currentCmd.stack && err) {\n          err.stack += '\\n From event:\\n' + currentCmd.stack.substring(currentCmd.stack.indexOf('\\n') + 1);\n        }\n        this.authFailHandler(err);\n        break;\n      default:\n        this.fatalError(err, false);\n    }\n  }\n\n  /**\n   * Fatal unexpected error : closing connection, and throw exception.\n   */\n  fatalError(err, avoidThrowError) {\n    if (this.status >= Status.CLOSING) {\n      this.socketErrorDispatchToQueries(err);\n      return;\n    }\n    const mustThrowError = this.status !== Status.CONNECTING;\n    this.status = Status.CLOSING;\n\n    //prevent executing new commands\n    this.addCommand = this.addCommandDisabled;\n    if (this.socket) {\n      this.socket.removeAllListeners('error');\n      this.socket.removeAllListeners('timeout');\n      this.socket.removeAllListeners('close');\n      this.socket.removeAllListeners('data');\n      if (!this.socket.destroyed) this.socket.destroy();\n      this.socket = undefined;\n    }\n    this.status = Status.CLOSED;\n    const errorThrownByCmd = this.socketErrorDispatchToQueries(err);\n    if (mustThrowError) {\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      if (this.listenerCount('error') > 0) {\n        this.emit('error', err);\n        this.emit('end');\n        this.clear();\n      } else {\n        this.emit('end');\n        this.clear();\n        //error will be thrown if no error listener and no command did throw the exception\n        if (!avoidThrowError && !errorThrownByCmd) throw err;\n      }\n    } else {\n      this.clear();\n    }\n  }\n\n  /**\n   * Dispatch fatal error to current running queries.\n   *\n   * @param err        the fatal error\n   * @return {boolean} return if error has been relayed to queries\n   */\n  socketErrorDispatchToQueries(err) {\n    let receiveCmd;\n    let errorThrownByCmd = false;\n    while (receiveCmd = this.receiveQueue.shift()) {\n      if (receiveCmd && receiveCmd.onPacketReceive) {\n        errorThrownByCmd = true;\n        setImmediate(receiveCmd.throwError.bind(receiveCmd, err, this.info));\n      }\n    }\n    return errorThrownByCmd;\n  }\n\n  /**\n   * Will send next command in queue if any.\n   *\n   * @private\n   */\n  nextSendCmd() {\n    let sendCmd;\n    if (sendCmd = this.sendQueue.shift()) {\n      if (sendCmd.sending) {\n        this.sendQueue.unshift(sendCmd);\n      } else {\n        sendCmd.start(this.streamOut, this.opts, this.info);\n        if (sendCmd.sending) {\n          this.sendQueue.unshift(sendCmd);\n          sendCmd.prependOnceListener('send_end', this.sendQueue.shift.bind(this.sendQueue));\n        }\n      }\n    }\n  }\n\n  /**\n   * Change transaction state.\n   *\n   * @param cmdParam command parameter\n   * @param resolve success function to call\n   * @param reject error function to call\n   * @private\n   */\n  changeTransaction(cmdParam, resolve, reject) {\n    //if command in progress, driver cannot rely on status and must execute query\n    if (this.status >= Status.CLOSING) {\n      const err = Errors.createFatalError('Cannot execute new commands: connection closed', Errors.ER_CMD_CONNECTION_CLOSED, this.info, '08S01', cmdParam.sql);\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      reject(err);\n      return;\n    }\n\n    //Command in progress => must execute query\n    //or if no command in progress, can rely on status to know if query is needed\n    if (this.receiveQueue.peekFront() || this.info.status & ServerStatus.STATUS_IN_TRANS) {\n      const cmd = new Query(resolve, err => {\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        reject(err);\n      }, this.opts, cmdParam);\n      this.addCommand(cmd);\n    } else resolve();\n  }\n  changeUser(cmdParam, resolve, reject) {\n    if (!this.info.isMariaDB()) {\n      const err = Errors.createError('method changeUser not available for MySQL server due to Bug #83472', Errors.ER_MYSQL_CHANGE_USER_BUG, this.info, '0A000');\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      reject(err);\n      return;\n    }\n    if (this.status < Status.CLOSING) {\n      this.addCommand = this.addCommandEnable;\n    }\n    let conn = this;\n    if (cmdParam.opts && cmdParam.opts.collation && typeof cmdParam.opts.collation === 'string') {\n      const val = cmdParam.opts.collation.toUpperCase();\n      cmdParam.opts.collation = Collations.fromName(cmdParam.opts.collation.toUpperCase());\n      if (cmdParam.opts.collation === undefined) return reject(new RangeError(`Unknown collation '${val}'`));\n    }\n    this.addCommand(new ChangeUser(cmdParam, this.opts, res => {\n      if (conn.status < Status.CLOSING && conn.opts.pipelining) conn.addCommand = conn.addCommandEnablePipeline;\n      if (cmdParam.opts && cmdParam.opts.collation) conn.opts.collation = cmdParam.opts.collation;\n      conn.handleCharset().then(() => {\n        if (cmdParam.opts && cmdParam.opts.collation) {\n          conn.info.collation = cmdParam.opts.collation;\n          conn.opts.emit('collation', cmdParam.opts.collation);\n        }\n        resolve(res);\n      }).catch(err => {\n        const res = () => conn.authFailHandler.call(conn, err);\n        if (!err.fatal) {\n          conn.end(res, res);\n        } else {\n          res();\n        }\n        reject(err);\n      });\n    }, this.authFailHandler.bind(this, reject), this.getSocket.bind(this)));\n  }\n  query(cmdParam, resolve, reject) {\n    if (!cmdParam.sql) return reject(Errors.createError('sql parameter is mandatory', Errors.ER_UNDEFINED_SQL, this.info, 'HY000', null, false, cmdParam.stack));\n    const cmd = new Query(resolve, err => {\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      reject(err);\n    }, this.opts, cmdParam);\n    this.addCommand(cmd);\n  }\n  prepare(cmdParam, resolve, reject) {\n    if (!cmdParam.sql) return reject(Errors.createError('sql parameter is mandatory', Errors.ER_UNDEFINED_SQL, this.info, 'HY000'));\n    if (this.prepareCache && (this.sendQueue.isEmpty() || !this.receiveQueue.peekFront())) {\n      // no command in queue, database is then considered ok, and cache can be search right now\n      const cachedPrepare = this.prepareCache.get(cmdParam.sql);\n      if (cachedPrepare) {\n        return resolve(cachedPrepare);\n      }\n    }\n    const cmd = new Prepare(resolve, err => {\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      reject(err);\n    }, this.opts, cmdParam, this);\n    this.addCommand(cmd);\n  }\n  prepareExecute(cmdParam) {\n    if (!cmdParam.sql) {\n      return Promise.reject(Errors.createError('sql parameter is mandatory', Errors.ER_UNDEFINED_SQL, this.info, 'HY000'));\n    }\n    if (this.prepareCache && (this.sendQueue.isEmpty() || !this.receiveQueue.peekFront())) {\n      // no command in queue, current database is known, so cache can be search right now\n      const cachedPrepare = this.prepareCache.get(cmdParam.sql);\n      if (cachedPrepare) {\n        return new Promise(this.executePromise.bind(this, cmdParam, cachedPrepare)).finally(() => cachedPrepare.close());\n      }\n    }\n\n    // permit pipelining PREPARE and EXECUTE if mariadb 10.2.4+ and has no streaming\n    const conn = this;\n    if (this.opts.pipelining && this.info.isMariaDB() && this.info.hasMinVersion(10, 2, 4)) {\n      let hasStreamingValue = false;\n      const vals = cmdParam.values ? Array.isArray(cmdParam.values) ? cmdParam.values : [cmdParam.values] : [];\n      for (let i = 0; i < vals.length; i++) {\n        const val = vals[i];\n        if (val != null && typeof val === 'object' && typeof val.pipe === 'function' && typeof val.read === 'function') {\n          hasStreamingValue = true;\n        }\n      }\n      if (!hasStreamingValue) {\n        return new Promise((resolve, reject) => {\n          let nbExecute = 0;\n          const executeCommand = new Execute(res => {\n            if (nbExecute++ === 0) {\n              executeCommand.prepare.close();\n              resolve(res);\n            }\n          }, err => {\n            if (nbExecute++ === 0) {\n              if (conn.opts.logger.error) conn.opts.logger.error(err);\n              reject(err);\n              if (executeCommand.prepare) {\n                executeCommand.prepare.close();\n              }\n            }\n          }, conn.opts, cmdParam, null);\n          cmdParam.executeCommand = executeCommand;\n          const cmd = new Prepare(prep => {\n            if (nbExecute > 0) prep.close();\n          }, err => {\n            if (nbExecute++ === 0) {\n              if (conn.opts.logger.error) conn.opts.logger.error(err);\n              reject(err);\n            }\n          }, conn.opts, cmdParam, conn);\n          conn.addCommand(cmd);\n          conn.addCommand(executeCommand);\n        });\n      }\n    }\n    // execute PREPARE, then EXECUTE\n    return new Promise((resolve, reject) => {\n      const cmd = new Prepare(resolve, reject, this.opts, cmdParam, conn);\n      conn.addCommand(cmd);\n    }).then(prepare => {\n      return new Promise(function (resolve, reject) {\n        conn.executePromise.call(conn, cmdParam, prepare, resolve, reject);\n      }).finally(() => prepare.close());\n    }).catch(err => {\n      if (conn.opts.logger.error) conn.opts.logger.error(err);\n      throw err;\n    });\n  }\n  importFile(cmdParam, resolve, reject) {\n    const conn = this;\n    if (!cmdParam || !cmdParam.file) {\n      return reject(Errors.createError('SQL file parameter is mandatory', Errors.ER_MISSING_SQL_PARAMETER, conn.info, 'HY000', null, false, cmdParam.stack));\n    }\n    const prevAddCommand = this.addCommand.bind(conn);\n    this.waitingAuthenticationQueue = new Queue();\n    this.addCommand = this.addCommandQueue;\n    const tmpQuery = function (sql, resolve, reject) {\n      const cmd = new Query(resolve, err => {\n        if (conn.opts.logger.error) conn.opts.logger.error(err);\n        reject(err);\n      }, conn.opts, new CommandParameter(sql, null, {}));\n      prevAddCommand(cmd);\n    };\n    let prevDatabase = null;\n    return (cmdParam.skipDbCheck ? Promise.resolve() : new Promise(tmpQuery.bind(conn, 'SELECT DATABASE() as db'))).then(res => {\n      prevDatabase = res ? res[0].db : null;\n      if (cmdParam.skipDbCheck && !conn.opts.database || !cmdParam.skipDbCheck && !cmdParam.database && !prevDatabase) {\n        return reject(Errors.createError('Database parameter is not set and no database is selected', Errors.ER_MISSING_DATABASE_PARAMETER, conn.info, 'HY000', null, false, cmdParam.stack));\n      }\n      const searchDbPromise = cmdParam.database ? new Promise(tmpQuery.bind(conn, `USE \\`${cmdParam.database.replace(/`/gi, '``')}\\``)) : Promise.resolve();\n      return searchDbPromise.then(() => {\n        const endingFunction = () => {\n          if (conn.status < Status.CLOSING) {\n            conn.addCommand = conn.addCommandEnable.bind(conn);\n            if (conn.status < Status.CLOSING && conn.opts.pipelining) {\n              conn.addCommand = conn.addCommandEnablePipeline.bind(conn);\n            }\n            const commands = conn.waitingAuthenticationQueue.toArray();\n            commands.forEach(cmd => conn.addCommand(cmd));\n            conn.waitingAuthenticationQueue = null;\n          }\n        };\n        return fsPromises.open(cmdParam.file, 'r').then(async fd => {\n          const buf = {\n            buffer: Buffer.allocUnsafe(16384),\n            offset: 0,\n            end: 0\n          };\n          const queryPromises = [];\n          let cmdError = null;\n          while (!cmdError) {\n            try {\n              const res = await fd.read(buf.buffer, buf.end, buf.buffer.length - buf.end, null);\n              if (res.bytesRead === 0) {\n                // end of file reached.\n                fd.close().catch(() => {});\n                if (cmdError) {\n                  endingFunction();\n                  reject(cmdError);\n                  return;\n                }\n                await Promise.allSettled(queryPromises).then(() => {\n                  // reset connection to initial database if was set\n                  if (!cmdParam.skipDbCheck && prevDatabase && cmdParam.database && cmdParam.database !== prevDatabase) {\n                    return new Promise(tmpQuery.bind(conn, `USE \\`${prevDatabase.replace(/`/gi, '``')}\\``));\n                  }\n                  return Promise.resolve();\n                }).then(() => {\n                  endingFunction();\n                  if (cmdError) {\n                    reject(cmdError);\n                  }\n                  resolve();\n                }).catch(err => {\n                  endingFunction();\n                  reject(err);\n                });\n                return;\n              } else {\n                buf.end += res.bytesRead;\n                const queries = Parse.parseQueries(buf);\n                const queryIntermediatePromise = queries.flatMap(element => {\n                  return new Promise(tmpQuery.bind(conn, element)).catch(err => {\n                    cmdError = err;\n                  });\n                });\n                queryPromises.push(...queryIntermediatePromise);\n                if (buf.offset === buf.end) {\n                  buf.offset = 0;\n                  buf.end = 0;\n                } else {\n                  // ensure that buffer can at least read 8k bytes,\n                  // either by copying remaining data on used part or growing buffer\n                  if (buf.offset > 8192) {\n                    // reuse buffer, copying remaining data begin of buffer\n                    buf.buffer.copy(buf.buffer, 0, buf.offset, buf.end);\n                    buf.end -= buf.offset;\n                    buf.offset = 0;\n                  } else if (buf.buffer.length - buf.end < 8192) {\n                    // grow buffer\n                    const tmpBuf = Buffer.allocUnsafe(buf.buffer.length << 1);\n                    buf.buffer.copy(tmpBuf, 0, buf.offset, buf.end);\n                    buf.buffer = tmpBuf;\n                    buf.end -= buf.offset;\n                    buf.offset = 0;\n                  }\n                }\n              }\n            } catch (e) {\n              fd.close().catch(() => {});\n              endingFunction();\n              Promise.allSettled(queryPromises).catch(() => {});\n              return reject(Errors.createError(e.message, Errors.ER_SQL_FILE_ERROR, conn.info, 'HY000', null, false, cmdParam.stack));\n            }\n          }\n          if (cmdError) {\n            endingFunction();\n            reject(cmdError);\n          }\n        }).catch(err => {\n          endingFunction();\n          if (err.code === 'ENOENT') {\n            return reject(Errors.createError(`SQL file parameter '${cmdParam.file}' doesn't exists`, Errors.ER_MISSING_SQL_FILE, conn.info, 'HY000', null, false, cmdParam.stack));\n          }\n          return reject(Errors.createError(err.message, Errors.ER_SQL_FILE_ERROR, conn.info, 'HY000', null, false, cmdParam.stack));\n        });\n      });\n    });\n  }\n\n  /**\n   * Clearing connection variables when ending.\n   *\n   * @private\n   */\n  clear() {\n    this.sendQueue.clear();\n    this.opts.removeAllListeners();\n    this.streamOut = undefined;\n    this.socket = undefined;\n  }\n\n  /**\n   * Redirecting connection to server indicated value.\n   * @param value server host string\n   * @param resolve promise result when done\n   */\n  redirect(value, resolve) {\n    if (this.opts.permitRedirect && value) {\n      // redirect only if :\n      // * when pipelining, having received all waiting responses.\n      // * not in a transaction\n      if (this.receiveQueue.length <= 1 && (this.info.status & ServerStatus.STATUS_IN_TRANS) === 0) {\n        this.info.redirectRequest = null;\n        const matchResults = value.match(redirectUrlFormat);\n        if (!matchResults) {\n          if (this.opts.logger.error) this.opts.logger.error(new Error(`error parsing redirection string '${value}'. format must be 'mariadb/mysql://[<user>[:<password>]@]<host>[:<port>]/[<db>[?<opt1>=<value1>[&<opt2>=<value2>]]]'`));\n          return resolve();\n        }\n        const options = {\n          host: matchResults[7] ? decodeURIComponent(matchResults[7]) : matchResults[6],\n          port: matchResults[9] ? parseInt(matchResults[9]) : 3306\n        };\n        if (options.host === this.opts.host && options.port === this.opts.port) {\n          // redirection to the same host, skip loop redirection\n          return resolve();\n        }\n\n        // actually only options accepted are user and password\n        // there might be additional possible options in the future\n        if (matchResults[3]) options.user = matchResults[3];\n        if (matchResults[5]) options.password = matchResults[5];\n        const redirectOpts = ConnectionOptions.parseOptionDataType(options);\n        const finalRedirectOptions = new ConnOptions(Object.assign({}, this.opts, redirectOpts));\n        const conn = new Connection(finalRedirectOptions);\n        conn.connect().then(async function () {\n          const cmdParam = new CommandParameter();\n          await new Promise(this.end.bind(this, cmdParam));\n          this.status = Status.CONNECTED;\n          this.info = conn.info;\n          this.opts = conn.opts;\n          this.socket = conn.socket;\n          if (this.prepareCache) this.prepareCache.reset();\n          this.streamOut = conn.streamOut;\n          this.streamIn = conn.streamIn;\n          resolve();\n        }.bind(this)).catch(function (e) {\n          if (this.opts.logger.error) {\n            const err = new Error(`fail to redirect to '${value}'`);\n            err.cause = e;\n            this.opts.logger.error(err);\n          }\n          resolve();\n        }.bind(this));\n      } else {\n        this.info.redirectRequest = value;\n        resolve();\n      }\n    } else {\n      this.info.redirectRequest = null;\n      resolve();\n    }\n  }\n  get threadId() {\n    return this.info ? this.info.threadId : null;\n  }\n  _sendNextCmdImmediate() {\n    if (!this.sendQueue.isEmpty()) {\n      setImmediate(this.nextSendCmd.bind(this));\n    }\n  }\n  _closePrepare(prepareResultPacket) {\n    this.addCommand(new ClosePrepare(new CommandParameter(null, null, null, null), () => {}, () => {}, prepareResultPacket));\n  }\n  _logAndReject(reject, err) {\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    reject(err);\n  }\n}\nclass TestMethods {\n  #collation;\n  #socket;\n  constructor(collation, socket) {\n    this.#collation = collation;\n    this.#socket = socket;\n  }\n  getCollation() {\n    return this.#collation;\n  }\n  getSocket() {\n    return this.#socket;\n  }\n}\nmodule.exports = Connection;","map":{"version":3,"names":["EventEmitter","require","Queue","Net","PacketInputStream","PacketOutputStream","CompressionInputStream","CompressionOutputStream","ServerStatus","ConnectionInformation","tls","Errors","Utils","Capabilities","ConnectionOptions","Authentication","Quit","Ping","Reset","Query","Prepare","OkPacket","Execute","ClosePrepare","BatchBulk","ChangeUser","Status","CommandParameter","LruPrepareCache","fsPromises","promises","Parse","Collations","ConnOptions","convertFixedTime","tz","conn","startsWith","tzdiff","negate","substring","diff","parseInt","isNaN","createFatalError","ER_WRONG_AUTO_TIMEZONE","info","redirectUrlFormat","Connection","opts","sendQueue","receiveQueue","waitingAuthenticationQueue","status","NOT_CONNECTED","socket","timeout","addCommand","streamOut","streamIn","prepareCache","constructor","options","Object","assign","redirect","bind","prepareCacheLength","addCommandQueue","unexpectedPacket","on","_closePrepare","escape","escapeId","connect","CONNECTING","authenticationParam","Promise","resolve","reject","connectRejectFct","connectResolveFct","authentication","authSucceedHandler","authFailHandler","createSecureContext","getSocket","Error","captureStackTrace","once","shift","collation","emit","process","nextTick","nextSendCmd","push","streamInitSocket","call","executePromise","cmdParam","prepare","cmd","_logAndReject","batch","sql","err","createError","ER_UNDEFINED_SQL","stack","logger","error","values","ER_BATCH_WITH_NO_VALUES","length","debugLen","then","usePlaceHolder","namedPlaceholders","vals","Array","isArray","parameterCount","i","useBulk","_canUseBulk","executeBulkPromise","executes","cmdOpt","execute","all","res","fullResult","firstResult","metaAsArray","affectedRows","insertId","warningStatus","rs","forEach","row","defineProperty","value","meta","writable","enumerable","metaEnumerable","finally","close","ping","ER_BAD_PARAMETER_VALUE","tOut","setTimeout","undefined","ER_PING_TIMEOUT","addCommandDisabled","clearTimeout","CLOSING","CLOSED","clear","destroy","reset","isMariaDB","hasMinVersion","resetCmd","prom","handleCharset","handleTimezone","executeInitQuery","executeSessionTimeout","catch","serverVersion","raw","isValid","CONNECTED","end","ended","unref","quitCmd","self","remoteAddress","connOption","host","killCon","query","threadId","destroyError","ER_CMD_NOT_EXECUTED_DESTROYED","socketErrorDispatchToQueries","sok","sock","pause","resume","format","ER_NOT_IMPLEMENTED_FORMAT","debug","val","network","console","log","debugCompress","__tests","TestMethods","_options","bulkEnable","bulk","mariaDb","serverCapabilities","MARIADB_CLIENT_STMT_BULK_OPERATIONS","paramLen","r","j","pipe","read","keys","executeSessionVariableQuery","sessionVariables","sessionQuery","k","replace","initialErr","JSON","stringify","message","ER_SETTING_SESSION_ERROR","index","charset","maxLength","name","fromCharset","connCharset","timezone","serverTimezone","stz","localTz","Intl","DateTimeFormat","resolvedOptions","timeZone","_setSessionTimezone","er","ER_WRONG_IANA_TIMEZONE","checkServerVersion","forceVersionCheck","v","includes","parseVersionString","initSql","initialArr","initialPromises","ER_INITIAL_SQL_ERROR","queryTimeout","ER_INITIAL_TIMEOUT_ERROR","ER_TIMEOUT_NOT_SUPPORTED","connectTimeout","connectTimeoutReached","Date","now","socketPath","stream","tmpSocket","port","socketInit","setNoDelay","onData","socketErrorHandler","AUTHENTICATING","socketTimeout","socketTimeoutReached","keepAliveDelay","setKeepAlive","writeBuf","buf","write","flush","setStream","compress","COMPRESS","removeAllListeners","ER_COMPRESSION_NOT_SUPPORTED","pipelining","addCommandEnablePipeline","addCommandEnable","INIT_CMD","commands","toArray","fatal","fatalError","callback","requireValidCert","ssl","rejectUnauthorized","baseConf","servername","sslOption","secureSocket","packet","peek","readError","pos","ER_UNEXPECTED_PACKET","initialConnectionTime","handshake","peekFront","ER_CONNECTION_TIMEOUT","ER_SOCKET_TIMEOUT","_sendNextCmdImmediate","isEmpty","start","sending","prependOnceListener","throwNewError","ER_CMD_CONNECTION_CLOSED","ER_SOCKET_UNEXPECTED_CLOSE","sqlState","currentCmd","indexOf","avoidThrowError","mustThrowError","destroyed","errorThrownByCmd","listenerCount","receiveCmd","onPacketReceive","setImmediate","throwError","sendCmd","unshift","changeTransaction","STATUS_IN_TRANS","changeUser","ER_MYSQL_CHANGE_USER_BUG","toUpperCase","fromName","RangeError","cachedPrepare","get","prepareExecute","hasStreamingValue","nbExecute","executeCommand","prep","importFile","file","ER_MISSING_SQL_PARAMETER","prevAddCommand","tmpQuery","prevDatabase","skipDbCheck","db","database","ER_MISSING_DATABASE_PARAMETER","searchDbPromise","endingFunction","open","fd","buffer","Buffer","allocUnsafe","offset","queryPromises","cmdError","bytesRead","allSettled","queries","parseQueries","queryIntermediatePromise","flatMap","element","copy","tmpBuf","e","ER_SQL_FILE_ERROR","code","ER_MISSING_SQL_FILE","permitRedirect","redirectRequest","matchResults","match","decodeURIComponent","user","password","redirectOpts","parseOptionDataType","finalRedirectOptions","cause","prepareResultPacket","getCollation","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/connection.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst Queue = require('denque');\nconst Net = require('net');\nconst PacketInputStream = require('./io/packet-input-stream');\nconst PacketOutputStream = require('./io/packet-output-stream');\nconst CompressionInputStream = require('./io/compression-input-stream');\nconst CompressionOutputStream = require('./io/compression-output-stream');\nconst ServerStatus = require('./const/server-status');\nconst ConnectionInformation = require('./misc/connection-information');\nconst tls = require('tls');\nconst Errors = require('./misc/errors');\nconst Utils = require('./misc/utils');\nconst Capabilities = require('./const/capabilities');\nconst ConnectionOptions = require('./config/connection-options');\n\n/*commands*/\nconst Authentication = require('./cmd/handshake/authentication');\nconst Quit = require('./cmd/quit');\nconst Ping = require('./cmd/ping');\nconst Reset = require('./cmd/reset');\nconst Query = require('./cmd/query');\nconst Prepare = require('./cmd/prepare');\nconst OkPacket = require('./cmd/class/ok-packet');\nconst Execute = require('./cmd/execute');\nconst ClosePrepare = require('./cmd/close-prepare');\nconst BatchBulk = require('./cmd/batch-bulk');\nconst ChangeUser = require('./cmd/change-user');\nconst { Status } = require('./const/connection_status');\nconst CommandParameter = require('./command-parameter');\nconst LruPrepareCache = require('./lru-prepare-cache');\nconst fsPromises = require('fs').promises;\nconst Parse = require('./misc/parse');\nconst Collations = require('./const/collations');\nconst ConnOptions = require('./config/connection-options');\n\nconst convertFixedTime = function (tz, conn) {\n  if (tz === 'UTC' || tz === 'Etc/UTC' || tz === 'Z' || tz === 'Etc/GMT') {\n    return '+00:00';\n  } else if (tz.startsWith('Etc/GMT') || tz.startsWith('GMT')) {\n    let tzdiff;\n    let negate;\n\n    // strangely Etc/GMT+8 = GMT-08:00 = offset -8\n    if (tz.startsWith('Etc/GMT')) {\n      tzdiff = tz.substring(7);\n      negate = !tzdiff.startsWith('-');\n    } else {\n      tzdiff = tz.substring(3);\n      negate = tzdiff.startsWith('-');\n    }\n    let diff = parseInt(tzdiff.substring(1));\n    if (isNaN(diff)) {\n      throw Errors.createFatalError(\n        `Automatic timezone setting fails. wrong Server timezone '${tz}' conversion to +/-HH:00 conversion.`,\n        Errors.ER_WRONG_AUTO_TIMEZONE,\n        conn.info\n      );\n    }\n    return (negate ? '-' : '+') + (diff >= 10 ? diff : '0' + diff) + ':00';\n  }\n  return tz;\n};\nconst redirectUrlFormat = /(mariadb|mysql):\\/\\/(([^/@:]+)?(:([^/]+))?@)?(([^/:]+)(:([0-9]+))?)(\\/([^?]+)(\\?(.*))?)?$/;\n\n/**\n * New Connection instance.\n *\n * @param options    connection options\n * @returns Connection instance\n * @constructor\n * @fires Connection#connect\n * @fires Connection#end\n * @fires Connection#error\n *\n */\nclass Connection extends EventEmitter {\n  opts;\n  sendQueue = new Queue();\n  receiveQueue = new Queue();\n  waitingAuthenticationQueue = new Queue();\n  status = Status.NOT_CONNECTED;\n  socket = null;\n  timeout = null;\n  addCommand;\n  streamOut;\n  streamIn;\n  info;\n  prepareCache;\n\n  constructor(options) {\n    super();\n\n    this.opts = Object.assign(new EventEmitter(), options);\n    this.info = new ConnectionInformation(this.opts, this.redirect.bind(this));\n    this.prepareCache =\n      this.opts.prepareCacheLength > 0 ? new LruPrepareCache(this.info, this.opts.prepareCacheLength) : null;\n    this.addCommand = this.addCommandQueue;\n    this.streamOut = new PacketOutputStream(this.opts, this.info);\n    this.streamIn = new PacketInputStream(\n      this.unexpectedPacket.bind(this),\n      this.receiveQueue,\n      this.streamOut,\n      this.opts,\n      this.info\n    );\n\n    this.on('close_prepare', this._closePrepare.bind(this));\n    this.escape = Utils.escape.bind(this, this.opts, this.info);\n    this.escapeId = Utils.escapeId.bind(this, this.opts, this.info);\n  }\n\n  //*****************************************************************\n  // public methods\n  //*****************************************************************\n\n  /**\n   * Connect event\n   *\n   * @returns {Promise} promise\n   */\n  connect() {\n    const conn = this;\n    this.status = Status.CONNECTING;\n    const authenticationParam = new CommandParameter(null, null, this.opts, null);\n    return new Promise(function (resolve, reject) {\n      conn.connectRejectFct = reject;\n      conn.connectResolveFct = resolve;\n      // add a handshake to msg queue\n      const authentication = new Authentication(\n        authenticationParam,\n        conn.authSucceedHandler.bind(conn),\n        conn.authFailHandler.bind(conn),\n        conn.createSecureContext.bind(conn),\n        conn.getSocket.bind(conn)\n      );\n      Error.captureStackTrace(authentication);\n\n      authentication.once('end', () => {\n        conn.receiveQueue.shift();\n        // conn.info.collation might not be initialized\n        // in case of handshake throwing error\n        if (!conn.opts.collation && conn.info.collation) {\n          conn.opts.emit('collation', conn.info.collation);\n        }\n        process.nextTick(conn.nextSendCmd.bind(conn));\n      });\n\n      conn.receiveQueue.push(authentication);\n      conn.streamInitSocket.call(conn);\n    });\n  }\n\n  executePromise(cmdParam, prepare, resolve, reject) {\n    const cmd = new Execute(resolve, this._logAndReject.bind(this, reject), this.opts, cmdParam, prepare);\n    this.addCommand(cmd);\n  }\n\n  batch(cmdParam) {\n    if (!cmdParam.sql) {\n      const err = Errors.createError(\n        'sql parameter is mandatory',\n        Errors.ER_UNDEFINED_SQL,\n        this.info,\n        'HY000',\n        null,\n        false,\n        cmdParam.stack\n      );\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      return Promise.reject(err);\n    }\n    if (!cmdParam.values) {\n      const err = Errors.createError(\n        'Batch must have values set',\n        Errors.ER_BATCH_WITH_NO_VALUES,\n        this.info,\n        'HY000',\n        cmdParam.sql.length > this.opts.debugLen ? cmdParam.sql.substring(0, this.opts.debugLen) + '...' : cmdParam.sql,\n        false,\n        cmdParam.stack\n      );\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      return Promise.reject(err);\n    }\n\n    return new Promise(this.prepare.bind(this, cmdParam)).then((prepare) => {\n      const usePlaceHolder = (cmdParam.opts && cmdParam.opts.namedPlaceholders) || this.opts.namedPlaceholders;\n      let vals;\n      if (Array.isArray(cmdParam.values)) {\n        if (usePlaceHolder) {\n          vals = cmdParam.values;\n        } else if (Array.isArray(cmdParam.values[0])) {\n          vals = cmdParam.values;\n        } else if (prepare.parameterCount === 1) {\n          vals = [];\n          for (let i = 0; i < cmdParam.values.length; i++) {\n            vals.push([cmdParam.values[i]]);\n          }\n        } else {\n          vals = [cmdParam.values];\n        }\n      } else {\n        vals = [[cmdParam.values]];\n      }\n      cmdParam.values = vals;\n      let useBulk = this._canUseBulk(vals, cmdParam.opts);\n      if (useBulk) {\n        return new Promise(this.executeBulkPromise.bind(this, cmdParam, prepare, this.opts));\n      } else {\n        const executes = [];\n        const cmdOpt = Object.assign({}, this.opts, cmdParam.opts);\n        for (let i = 0; i < vals.length; i++) {\n          executes.push(prepare.execute(vals[i], cmdParam.opts, null, cmdParam.stack));\n        }\n        return Promise.all(executes)\n          .then(\n            function (res) {\n              if (cmdParam.opts && cmdParam.opts.fullResult) {\n                return Promise.resolve(res);\n              } else {\n                // aggregate results\n                let firstResult = res[0];\n                if (cmdOpt.metaAsArray) firstResult = firstResult[0];\n                if (firstResult instanceof OkPacket) {\n                  let affectedRows = 0;\n                  const insertId = firstResult.insertId;\n                  const warningStatus = firstResult.warningStatus;\n                  if (cmdOpt.metaAsArray) {\n                    for (let i = 0; i < res.length; i++) {\n                      affectedRows += res[i][0].affectedRows;\n                    }\n                    return Promise.resolve([new OkPacket(affectedRows, insertId, warningStatus), []]);\n                  } else {\n                    for (let i = 0; i < res.length; i++) {\n                      affectedRows += res[i].affectedRows;\n                    }\n                    return Promise.resolve(new OkPacket(affectedRows, insertId, warningStatus));\n                  }\n                } else {\n                  // results have result-set. example :'INSERT ... RETURNING'\n                  // aggregate results\n                  if (cmdOpt.metaAsArray) {\n                    const rs = [];\n                    res.forEach((row) => {\n                      rs.push(...row[0]);\n                    });\n                    return Promise.resolve([rs, res[0][1]]);\n                  } else {\n                    const rs = [];\n                    res.forEach((row) => {\n                      rs.push(...row);\n                    });\n                    Object.defineProperty(rs, 'meta', {\n                      value: res[0].meta,\n                      writable: true,\n                      enumerable: this.opts.metaEnumerable\n                    });\n                    return Promise.resolve(rs);\n                  }\n                }\n              }\n            }.bind(this)\n          )\n          .finally(() => prepare.close());\n      }\n    });\n  }\n\n  executeBulkPromise(cmdParam, prepare, opts, resolve, reject) {\n    const cmd = new BatchBulk(\n      (res) => {\n        prepare.close();\n        return resolve(res);\n      },\n      function (err) {\n        prepare.close();\n        if (opts.logger.error) opts.logger.error(err);\n        reject(err);\n      },\n      opts,\n      prepare,\n      cmdParam\n    );\n    this.addCommand(cmd);\n  }\n\n  /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param cmdParam command context\n   * @param resolve success function\n   * @param reject rejection function\n   */\n  ping(cmdParam, resolve, reject) {\n    if (cmdParam.opts && cmdParam.opts.timeout) {\n      if (cmdParam.opts.timeout < 0) {\n        const err = Errors.createError(\n          'Ping cannot have negative timeout value',\n          Errors.ER_BAD_PARAMETER_VALUE,\n          this.info,\n          '0A000'\n        );\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        reject(err);\n        return;\n      }\n      let tOut = setTimeout(\n        function () {\n          tOut = undefined;\n          const err = Errors.createFatalError('Ping timeout', Errors.ER_PING_TIMEOUT, this.info, '0A000');\n          if (this.opts.logger.error) this.opts.logger.error(err);\n          // close connection\n          this.addCommand = this.addCommandDisabled;\n          clearTimeout(this.timeout);\n          if (this.status !== Status.CLOSING && this.status !== Status.CLOSED) {\n            this.sendQueue.clear();\n            this.status = Status.CLOSED;\n            this.socket.destroy();\n          }\n          this.clear();\n          reject(err);\n        }.bind(this),\n        cmdParam.opts.timeout\n      );\n      this.addCommand(\n        new Ping(\n          cmdParam,\n          () => {\n            if (tOut) {\n              clearTimeout(tOut);\n              resolve();\n            }\n          },\n          (err) => {\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            clearTimeout(tOut);\n            reject(err);\n          }\n        )\n      );\n      return;\n    }\n    this.addCommand(new Ping(cmdParam, resolve, reject));\n  }\n\n  /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   */\n  reset(cmdParam, resolve, reject) {\n    if (\n      (this.info.isMariaDB() && this.info.hasMinVersion(10, 2, 4)) ||\n      (!this.info.isMariaDB() && this.info.hasMinVersion(5, 7, 3))\n    ) {\n      const conn = this;\n      const resetCmd = new Reset(\n        cmdParam,\n        () => {\n          conn.prepareCache.reset();\n          let prom = Promise.resolve();\n          // re-execute init query / session query timeout\n          prom\n            .then(conn.handleCharset.bind(conn))\n            .then(conn.handleTimezone.bind(conn))\n            .then(conn.executeInitQuery.bind(conn))\n            .then(conn.executeSessionTimeout.bind(conn))\n            .then(resolve)\n            .catch(reject);\n        },\n        reject\n      );\n      this.addCommand(resetCmd);\n      return;\n    }\n\n    const err = new Error(\n      `Reset command not permitted for server ${this.info.serverVersion.raw} (requires server MariaDB version 10.2.4+ or MySQL 5.7.3+)`\n    );\n    err.stack = cmdParam.stack;\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    reject(err);\n  }\n\n  /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */\n  isValid() {\n    return this.status === Status.CONNECTED;\n  }\n\n  /**\n   * Terminate connection gracefully.\n   */\n  end(cmdParam, resolve, reject) {\n    this.addCommand = this.addCommandDisabled;\n    clearTimeout(this.timeout);\n\n    if (this.status < Status.CLOSING && this.status !== Status.NOT_CONNECTED) {\n      this.status = Status.CLOSING;\n      const ended = () => {\n        this.status = Status.CLOSED;\n        this.socket.destroy();\n        this.socket.unref();\n        this.clear();\n        this.receiveQueue.clear();\n        resolve();\n      };\n      const quitCmd = new Quit(cmdParam, ended, ended);\n      this.sendQueue.push(quitCmd);\n      this.receiveQueue.push(quitCmd);\n      if (this.sendQueue.length === 1) {\n        process.nextTick(this.nextSendCmd.bind(this));\n      }\n    } else resolve();\n  }\n\n  /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */\n  destroy() {\n    this.addCommand = this.addCommandDisabled;\n    clearTimeout(this.timeout);\n    if (this.status < Status.CLOSING) {\n      this.status = Status.CLOSING;\n      this.sendQueue.clear();\n      if (this.receiveQueue.length > 0) {\n        //socket is closed, but server may still be processing a huge select\n        //only possibility is to kill process by another thread\n        //TODO reuse a pool connection to avoid connection creation\n        const self = this;\n\n        // relying on IP in place of DNS to ensure using same server\n        const remoteAddress = this.socket.remoteAddress;\n        const connOption = remoteAddress ? Object.assign({}, this.opts, { host: remoteAddress }) : this.opts;\n\n        const killCon = new Connection(connOption);\n        killCon\n          .connect()\n          .then(() => {\n            //*************************************************\n            //kill connection\n            //*************************************************\n            new Promise(killCon.query.bind(killCon, { sql: `KILL ${self.info.threadId}` })).finally((err) => {\n              const destroyError = Errors.createFatalError(\n                'Connection destroyed, command was killed',\n                Errors.ER_CMD_NOT_EXECUTED_DESTROYED,\n                self.info\n              );\n              if (self.opts.logger.error) self.opts.logger.error(destroyError);\n              self.socketErrorDispatchToQueries(destroyError);\n              if (self.socket) {\n                const sok = self.socket;\n                process.nextTick(() => {\n                  sok.destroy();\n                });\n              }\n              self.status = Status.CLOSED;\n              self.clear();\n              new Promise(killCon.end.bind(killCon)).catch(() => {});\n            });\n          })\n          .catch(() => {\n            //*************************************************\n            //failing to create a kill connection, end normally\n            //*************************************************\n            const ended = () => {\n              let sock = self.socket;\n              self.clear();\n              self.status = Status.CLOSED;\n              sock.destroy();\n              self.receiveQueue.clear();\n            };\n            const quitCmd = new Quit(ended, ended);\n            self.sendQueue.push(quitCmd);\n            self.receiveQueue.push(quitCmd);\n            if (self.sendQueue.length === 1) {\n              process.nextTick(self.nextSendCmd.bind(self));\n            }\n          });\n      } else {\n        this.status = Status.CLOSED;\n        this.socket.destroy();\n        this.clear();\n      }\n    }\n  }\n\n  pause() {\n    this.socket.pause();\n  }\n\n  resume() {\n    this.socket.resume();\n  }\n\n  format(sql, values) {\n    const err = Errors.createError(\n      '\"Connection.format intentionally not implemented. please use Connection.query(sql, values), it will be more secure and faster',\n      Errors.ER_NOT_IMPLEMENTED_FORMAT,\n      this.info,\n      '0A000'\n    );\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    throw err;\n  }\n\n  //*****************************************************************\n  // additional public methods\n  //*****************************************************************\n\n  /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */\n  serverVersion() {\n    if (!this.info.serverVersion) {\n      const err = new Error('cannot know if server information until connection is established');\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      throw err;\n    }\n\n    return this.info.serverVersion.raw;\n  }\n\n  /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */\n  debug(val) {\n    if (typeof val === 'boolean') {\n      if (val && !this.opts.logger.network) this.opts.logger.network = console.log;\n    } else if (typeof val === 'function') {\n      this.opts.logger.network = val;\n    }\n    this.opts.emit('debug', val);\n  }\n\n  debugCompress(val) {\n    if (val) {\n      if (typeof val === 'boolean') {\n        this.opts.debugCompress = val;\n        if (val && !this.opts.logger.network) this.opts.logger.network = console.log;\n      } else if (typeof val === 'function') {\n        this.opts.debugCompress = true;\n        this.opts.logger.network = val;\n      }\n    } else this.opts.debugCompress = false;\n  }\n\n  //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n  get __tests() {\n    return new TestMethods(this.info.collation, this.socket);\n  }\n\n  //*****************************************************************\n  // internal methods\n  //*****************************************************************\n\n  /**\n   * Use multiple COM_STMT_EXECUTE or COM_STMT_BULK_EXECUTE\n   *\n   * @param values current batch values\n   * @param _options batch option\n   * @return {boolean} indicating if can use bulk command\n   */\n  _canUseBulk(values, _options) {\n    if (_options && _options.fullResult) return false;\n    // not using info.isMariaDB() directly in case of callback use,\n    // without connection being completely finished.\n    const bulkEnable =\n      _options === undefined || _options === null\n        ? this.opts.bulk\n        : _options.bulk !== undefined && _options.bulk !== null\n          ? _options.bulk\n          : this.opts.bulk;\n    if (\n      this.info.serverVersion &&\n      this.info.serverVersion.mariaDb &&\n      this.info.hasMinVersion(10, 2, 7) &&\n      bulkEnable &&\n      (this.info.serverCapabilities & Capabilities.MARIADB_CLIENT_STMT_BULK_OPERATIONS) > 0n\n    ) {\n      //ensure that there is no stream object\n      if (values !== undefined) {\n        if (!this.opts.namedPlaceholders) {\n          //ensure that all parameters have same length\n          //single array is considered as an array of single element.\n          const paramLen = Array.isArray(values[0]) ? values[0].length : values[0] ? 1 : 0;\n          if (paramLen === 0) return false;\n          for (let r = 0; r < values.length; r++) {\n            let row = values[r];\n            if (!Array.isArray(row)) row = [row];\n            if (paramLen !== row.length) {\n              return false;\n            }\n            // streaming data not permitted\n            for (let j = 0; j < paramLen; j++) {\n              const val = row[j];\n              if (\n                val != null &&\n                typeof val === 'object' &&\n                typeof val.pipe === 'function' &&\n                typeof val.read === 'function'\n              ) {\n                return false;\n              }\n            }\n          }\n        } else {\n          for (let r = 0; r < values.length; r++) {\n            let row = values[r];\n            const keys = Object.keys(row);\n            for (let j = 0; j < keys.length; j++) {\n              const val = row[keys[j]];\n              if (\n                val != null &&\n                typeof val === 'object' &&\n                typeof val.pipe === 'function' &&\n                typeof val.read === 'function'\n              ) {\n                return false;\n              }\n            }\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  executeSessionVariableQuery() {\n    if (this.opts.sessionVariables) {\n      const values = [];\n      let sessionQuery = 'set ';\n      let keys = Object.keys(this.opts.sessionVariables);\n      if (keys.length > 0) {\n        for (let k = 0; k < keys.length; ++k) {\n          sessionQuery += (k !== 0 ? ',' : '') + '@@' + keys[k].replace(/[^a-z0-9_]/gi, '') + '=?';\n          values.push(this.opts.sessionVariables[keys[k]]);\n        }\n\n        return new Promise(this.query.bind(this, new CommandParameter(sessionQuery, values))).catch((initialErr) => {\n          const err = Errors.createFatalError(\n            `Error setting session variable (value ${JSON.stringify(this.opts.sessionVariables)}). Error: ${\n              initialErr.message\n            }`,\n            Errors.ER_SETTING_SESSION_ERROR,\n            this.info,\n            '08S01',\n            sessionQuery\n          );\n          if (this.opts.logger.error) this.opts.logger.error(err);\n          return Promise.reject(err);\n        });\n      }\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * set charset to charset/collation if set or utf8mb4 if not.\n   * @returns {Promise<void>}\n   * @private\n   */\n  handleCharset() {\n    if (this.opts.collation) {\n      // if index <= 255, skip command, since collation has already been set during handshake response.\n      if (this.opts.collation.index <= 255) return Promise.resolve();\n      const charset =\n        this.opts.collation.charset === 'utf8' && this.opts.collation.maxLength === 4\n          ? 'utf8mb4'\n          : this.opts.collation.charset;\n      return new Promise(\n        this.query.bind(this, new CommandParameter(`SET NAMES ${charset} COLLATE ${this.opts.collation.name}`))\n      );\n    }\n\n    // MXS-4635: server can some information directly on first Ok_Packet, like not truncated collation\n    // in this case, avoid useless SET NAMES utf8mb4 command\n    if (\n      !this.opts.charset &&\n      this.info.collation &&\n      this.info.collation.charset === 'utf8' &&\n      this.info.collation.maxLength === 4\n    ) {\n      this.info.collation = Collations.fromCharset('utf8mb4');\n      return Promise.resolve();\n    }\n    const connCharset = this.opts.charset ? this.opts.charset : 'utf8mb4';\n    this.info.collation = Collations.fromCharset(connCharset);\n    return new Promise(this.query.bind(this, new CommandParameter(`SET NAMES ${connCharset}`)));\n  }\n\n  /**\n   * Asking server timezone if not set in case of 'auto'\n   * @returns {Promise<void>}\n   * @private\n   */\n  handleTimezone() {\n    const conn = this;\n    if (this.opts.timezone === 'local') this.opts.timezone = undefined;\n    if (this.opts.timezone === 'auto') {\n      return new Promise(\n        this.query.bind(this, new CommandParameter('SELECT @@system_time_zone stz, @@time_zone tz'))\n      ).then((res) => {\n        const serverTimezone = res[0].tz === 'SYSTEM' ? res[0].stz : res[0].tz;\n        const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (serverTimezone === localTz || convertFixedTime(serverTimezone, conn) === convertFixedTime(localTz, conn)) {\n          //server timezone is identical to client tz, skipping setting\n          this.opts.timezone = localTz;\n          return Promise.resolve();\n        }\n        return this._setSessionTimezone(convertFixedTime(localTz, conn));\n      });\n    }\n\n    if (this.opts.timezone) {\n      return this._setSessionTimezone(convertFixedTime(this.opts.timezone, conn));\n    }\n    return Promise.resolve();\n  }\n\n  _setSessionTimezone(tz) {\n    return new Promise(this.query.bind(this, new CommandParameter('SET time_zone=?', [tz]))).catch((err) => {\n      const er = Errors.createFatalError(\n        `setting timezone '${tz}' fails on server.\\n look at https://mariadb.com/kb/en/mysql_tzinfo_to_sql/ to load IANA timezone. `,\n        Errors.ER_WRONG_IANA_TIMEZONE,\n        this.info\n      );\n      if (this.opts.logger.error) this.opts.logger.error(er);\n      return Promise.reject(er);\n    });\n  }\n\n  checkServerVersion() {\n    if (!this.opts.forceVersionCheck) {\n      return Promise.resolve();\n    }\n    return new Promise(this.query.bind(this, new CommandParameter('SELECT @@VERSION AS v'))).then(\n      function (res) {\n        this.info.serverVersion.raw = res[0].v;\n        this.info.serverVersion.mariaDb = this.info.serverVersion.raw.includes('MariaDB');\n        ConnectionInformation.parseVersionString(this.info);\n        return Promise.resolve();\n      }.bind(this)\n    );\n  }\n\n  executeInitQuery() {\n    if (this.opts.initSql) {\n      const initialArr = Array.isArray(this.opts.initSql) ? this.opts.initSql : [this.opts.initSql];\n      const initialPromises = [];\n      initialArr.forEach((sql) => {\n        initialPromises.push(new Promise(this.query.bind(this, new CommandParameter(sql))));\n      });\n\n      return Promise.all(initialPromises).catch((initialErr) => {\n        const err = Errors.createFatalError(\n          `Error executing initial sql command: ${initialErr.message}`,\n          Errors.ER_INITIAL_SQL_ERROR,\n          this.info\n        );\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        return Promise.reject(err);\n      });\n    }\n    return Promise.resolve();\n  }\n\n  executeSessionTimeout() {\n    if (this.opts.queryTimeout) {\n      if (this.info.isMariaDB() && this.info.hasMinVersion(10, 1, 2)) {\n        const query = `SET max_statement_time=${this.opts.queryTimeout / 1000}`;\n        new Promise(this.query.bind(this, new CommandParameter(query))).catch(\n          function (initialErr) {\n            const err = Errors.createFatalError(\n              `Error setting session queryTimeout: ${initialErr.message}`,\n              Errors.ER_INITIAL_TIMEOUT_ERROR,\n              this.info,\n              '08S01',\n              query\n            );\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            return Promise.reject(err);\n          }.bind(this)\n        );\n      } else {\n        const err = Errors.createError(\n          `Can only use queryTimeout for MariaDB server after 10.1.1. queryTimeout value: ${this.opts.queryTimeout}`,\n          Errors.ER_TIMEOUT_NOT_SUPPORTED,\n          this.info,\n          'HY000',\n          this.opts.queryTimeout\n        );\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        return Promise.reject(err);\n      }\n    }\n    return Promise.resolve();\n  }\n\n  getSocket() {\n    return this.socket;\n  }\n\n  /**\n   * Initialize socket and associate events.\n   * @private\n   */\n  streamInitSocket() {\n    if (this.opts.connectTimeout) {\n      this.timeout = setTimeout(this.connectTimeoutReached.bind(this), this.opts.connectTimeout, Date.now());\n    }\n    if (this.opts.socketPath) {\n      this.socket = Net.connect(this.opts.socketPath);\n    } else if (this.opts.stream) {\n      if (typeof this.opts.stream === 'function') {\n        const tmpSocket = this.opts.stream(\n          function (err, stream) {\n            if (err) {\n              this.authFailHandler(err);\n              return;\n            }\n            this.socket = stream ? stream : Net.connect(this.opts.port, this.opts.host);\n            this.socketInit();\n          }.bind(this)\n        );\n        if (tmpSocket) {\n          this.socket = tmpSocket;\n          this.socketInit();\n        }\n      } else {\n        this.authFailHandler(\n          Errors.createError(\n            'stream option is not a function. stream must be a function with (error, callback) parameter',\n            Errors.ER_BAD_PARAMETER_VALUE,\n            this.info\n          )\n        );\n      }\n      return;\n    } else {\n      this.socket = Net.connect(this.opts.port, this.opts.host);\n      this.socket.setNoDelay(true);\n    }\n    this.socketInit();\n  }\n\n  socketInit() {\n    this.socket.on('data', this.streamIn.onData.bind(this.streamIn));\n    this.socket.on('error', this.socketErrorHandler.bind(this));\n    this.socket.on('end', this.socketErrorHandler.bind(this));\n    this.socket.on(\n      'connect',\n      function () {\n        if (this.status === Status.CONNECTING) {\n          this.status = Status.AUTHENTICATING;\n          this.socket.setTimeout(this.opts.socketTimeout, this.socketTimeoutReached.bind(this));\n          this.socket.setNoDelay(true);\n\n          // keep alive for socket. This won't reset server wait_timeout use pool option idleTimeout for that\n          if (this.opts.keepAliveDelay) {\n            this.socket.setKeepAlive(true, this.opts.keepAliveDelay);\n          }\n        }\n      }.bind(this)\n    );\n\n    this.socket.writeBuf = (buf) => this.socket.write(buf);\n    this.socket.flush = () => {};\n    this.streamOut.setStream(this.socket);\n  }\n\n  /**\n   * Authentication success result handler.\n   *\n   * @private\n   */\n  authSucceedHandler() {\n    //enable packet compression according to option\n    if (this.opts.compress) {\n      if (this.info.serverCapabilities & Capabilities.COMPRESS) {\n        this.streamOut.setStream(new CompressionOutputStream(this.socket, this.opts, this.info));\n        this.streamIn = new CompressionInputStream(this.streamIn, this.receiveQueue, this.opts, this.info);\n        this.socket.removeAllListeners('data');\n        this.socket.on('data', this.streamIn.onData.bind(this.streamIn));\n      } else if (this.opts.logger.error) {\n        this.opts.logger.error(\n          Errors.createError(\n            \"connection is configured to use packet compression, but the server doesn't have this capability\",\n            Errors.ER_COMPRESSION_NOT_SUPPORTED,\n            this.info\n          )\n        );\n      }\n    }\n\n    this.addCommand = this.opts.pipelining ? this.addCommandEnablePipeline : this.addCommandEnable;\n    const conn = this;\n    this.status = Status.INIT_CMD;\n    this.executeSessionVariableQuery()\n      .then(conn.handleCharset.bind(conn))\n      .then(this.handleTimezone.bind(this))\n      .then(this.checkServerVersion.bind(this))\n      .then(this.executeInitQuery.bind(this))\n      .then(this.executeSessionTimeout.bind(this))\n      .then(() => {\n        clearTimeout(this.timeout);\n        conn.status = Status.CONNECTED;\n        process.nextTick(conn.connectResolveFct, conn);\n\n        const commands = conn.waitingAuthenticationQueue.toArray();\n        commands.forEach((cmd) => {\n          conn.addCommand(cmd);\n        });\n        conn.waitingAuthenticationQueue = null;\n\n        conn.connectRejectFct = null;\n        conn.connectResolveFct = null;\n      })\n      .catch((err) => {\n        if (!err.fatal) {\n          const res = () => {\n            conn.authFailHandler.call(conn, err);\n          };\n          conn.end(res, res);\n        } else {\n          conn.authFailHandler.call(conn, err);\n        }\n        return Promise.reject(err);\n      });\n  }\n\n  /**\n   * Authentication failed result handler.\n   *\n   * @private\n   */\n  authFailHandler(err) {\n    clearTimeout(this.timeout);\n    if (this.connectRejectFct) {\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      //remove handshake command\n      this.receiveQueue.shift();\n      this.fatalError(err, true);\n\n      process.nextTick(this.connectRejectFct, err);\n      this.connectRejectFct = null;\n    }\n  }\n\n  /**\n   * Create TLS socket and associate events.\n   *\n   * @param info current connection information\n   * @param callback  callback function when done\n   * @private\n   */\n  createSecureContext(info, callback) {\n    info.requireValidCert =\n      this.opts.ssl === true ||\n      this.opts.ssl.rejectUnauthorized === undefined ||\n      this.opts.ssl.rejectUnauthorized === true;\n\n    const baseConf = {\n      servername: this.opts.host,\n      socket: this.socket,\n      rejectUnauthorized: false\n    };\n    const sslOption = this.opts.ssl === true ? baseConf : Object.assign({}, this.opts.ssl, baseConf);\n\n    try {\n      const secureSocket = tls.connect(sslOption, callback);\n      secureSocket.on('data', this.streamIn.onData.bind(this.streamIn));\n      secureSocket.on('error', this.socketErrorHandler.bind(this));\n      secureSocket.on('end', this.socketErrorHandler.bind(this));\n      secureSocket.writeBuf = (buf) => secureSocket.write(buf);\n      secureSocket.flush = () => {};\n\n      this.socket.removeAllListeners('data');\n      this.socket = secureSocket;\n\n      this.streamOut.setStream(secureSocket);\n    } catch (err) {\n      this.socketErrorHandler(err);\n    }\n  }\n\n  /**\n   * Handle packet when no packet is expected.\n   * (there can be an ERROR packet send by server/proxy to inform that connection is ending).\n   *\n   * @param packet  packet\n   * @private\n   */\n  unexpectedPacket(packet) {\n    if (packet && packet.peek() === 0xff) {\n      //can receive unexpected error packet from server/proxy\n      //to inform that connection is closed (usually by timeout)\n      let err = packet.readError(this.info);\n      if (err.fatal && this.status < Status.CLOSING) {\n        this.emit('error', err);\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        this.end(\n          () => {},\n          () => {}\n        );\n      }\n    } else if (this.status < Status.CLOSING) {\n      const err = Errors.createFatalError(\n        `receiving packet from server without active commands\\nconn:${this.info.threadId ? this.info.threadId : -1}(${\n          packet.pos\n        },${packet.end})\\n${Utils.log(this.opts, packet.buf, packet.pos, packet.end)}`,\n        Errors.ER_UNEXPECTED_PACKET,\n        this.info\n      );\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      this.emit('error', err);\n      this.destroy();\n    }\n  }\n\n  /**\n   * Handle connection timeout.\n   *\n   * @private\n   */\n  connectTimeoutReached(initialConnectionTime) {\n    this.timeout = null;\n    const handshake = this.receiveQueue.peekFront();\n    const err = Errors.createFatalError(\n      `Connection timeout: failed to create socket after ${Date.now() - initialConnectionTime}ms`,\n      Errors.ER_CONNECTION_TIMEOUT,\n      this.info,\n      '08S01',\n      null,\n      handshake ? handshake.stack : null\n    );\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    this.authFailHandler(err);\n  }\n\n  /**\n   * Handle socket timeout.\n   *\n   * @private\n   */\n  socketTimeoutReached() {\n    const err = Errors.createFatalError('socket timeout', Errors.ER_SOCKET_TIMEOUT, this.info);\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    this.fatalError(err, true);\n  }\n\n  /**\n   * Add command to waiting queue until authentication.\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandQueue(cmd) {\n    this.waitingAuthenticationQueue.push(cmd);\n  }\n\n  /**\n   * Add command to command sending and receiving queue.\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandEnable(cmd) {\n    cmd.once('end', this._sendNextCmdImmediate.bind(this));\n\n    //send immediately only if no current active receiver\n    if (this.sendQueue.isEmpty() && this.receiveQueue.isEmpty()) {\n      this.receiveQueue.push(cmd);\n      cmd.start(this.streamOut, this.opts, this.info);\n    } else {\n      this.receiveQueue.push(cmd);\n      this.sendQueue.push(cmd);\n    }\n  }\n\n  /**\n   * Add command to command sending and receiving queue using pipelining\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandEnablePipeline(cmd) {\n    cmd.once('send_end', this._sendNextCmdImmediate.bind(this));\n\n    this.receiveQueue.push(cmd);\n    if (this.sendQueue.isEmpty()) {\n      cmd.start(this.streamOut, this.opts, this.info);\n      if (cmd.sending) {\n        this.sendQueue.push(cmd);\n        cmd.prependOnceListener('send_end', this.sendQueue.shift.bind(this.sendQueue));\n      }\n    } else {\n      this.sendQueue.push(cmd);\n    }\n  }\n\n  /**\n   * Replacing command when connection is closing or closed to send a proper error message.\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandDisabled(cmd) {\n    const err = cmd.throwNewError(\n      'Cannot execute new commands: connection closed',\n      true,\n      this.info,\n      '08S01',\n      Errors.ER_CMD_CONNECTION_CLOSED\n    );\n    if (this.opts.logger.error) this.opts.logger.error(err);\n  }\n\n  /**\n   * Handle socket error.\n   *\n   * @param err               socket error\n   * @private\n   */\n  socketErrorHandler(err) {\n    if (this.status >= Status.CLOSING) return;\n    if (this.socket) {\n      this.socket.writeBuf = () => {};\n      this.socket.flush = () => {};\n    }\n\n    //socket has been ended without error\n    if (!err) {\n      err = Errors.createFatalError(\n        'socket has unexpectedly been closed',\n        Errors.ER_SOCKET_UNEXPECTED_CLOSE,\n        this.info\n      );\n    } else {\n      err.fatal = true;\n      err.sqlState = 'HY000';\n    }\n\n    switch (this.status) {\n      case Status.CONNECTING:\n      case Status.AUTHENTICATING:\n        const currentCmd = this.receiveQueue.peekFront();\n        if (currentCmd && currentCmd.stack && err) {\n          err.stack += '\\n From event:\\n' + currentCmd.stack.substring(currentCmd.stack.indexOf('\\n') + 1);\n        }\n        this.authFailHandler(err);\n        break;\n\n      default:\n        this.fatalError(err, false);\n    }\n  }\n\n  /**\n   * Fatal unexpected error : closing connection, and throw exception.\n   */\n  fatalError(err, avoidThrowError) {\n    if (this.status >= Status.CLOSING) {\n      this.socketErrorDispatchToQueries(err);\n      return;\n    }\n    const mustThrowError = this.status !== Status.CONNECTING;\n    this.status = Status.CLOSING;\n\n    //prevent executing new commands\n    this.addCommand = this.addCommandDisabled;\n\n    if (this.socket) {\n      this.socket.removeAllListeners('error');\n      this.socket.removeAllListeners('timeout');\n      this.socket.removeAllListeners('close');\n      this.socket.removeAllListeners('data');\n      if (!this.socket.destroyed) this.socket.destroy();\n      this.socket = undefined;\n    }\n    this.status = Status.CLOSED;\n\n    const errorThrownByCmd = this.socketErrorDispatchToQueries(err);\n    if (mustThrowError) {\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      if (this.listenerCount('error') > 0) {\n        this.emit('error', err);\n        this.emit('end');\n        this.clear();\n      } else {\n        this.emit('end');\n        this.clear();\n        //error will be thrown if no error listener and no command did throw the exception\n        if (!avoidThrowError && !errorThrownByCmd) throw err;\n      }\n    } else {\n      this.clear();\n    }\n  }\n\n  /**\n   * Dispatch fatal error to current running queries.\n   *\n   * @param err        the fatal error\n   * @return {boolean} return if error has been relayed to queries\n   */\n  socketErrorDispatchToQueries(err) {\n    let receiveCmd;\n    let errorThrownByCmd = false;\n    while ((receiveCmd = this.receiveQueue.shift())) {\n      if (receiveCmd && receiveCmd.onPacketReceive) {\n        errorThrownByCmd = true;\n        setImmediate(receiveCmd.throwError.bind(receiveCmd, err, this.info));\n      }\n    }\n    return errorThrownByCmd;\n  }\n\n  /**\n   * Will send next command in queue if any.\n   *\n   * @private\n   */\n  nextSendCmd() {\n    let sendCmd;\n    if ((sendCmd = this.sendQueue.shift())) {\n      if (sendCmd.sending) {\n        this.sendQueue.unshift(sendCmd);\n      } else {\n        sendCmd.start(this.streamOut, this.opts, this.info);\n        if (sendCmd.sending) {\n          this.sendQueue.unshift(sendCmd);\n          sendCmd.prependOnceListener('send_end', this.sendQueue.shift.bind(this.sendQueue));\n        }\n      }\n    }\n  }\n\n  /**\n   * Change transaction state.\n   *\n   * @param cmdParam command parameter\n   * @param resolve success function to call\n   * @param reject error function to call\n   * @private\n   */\n  changeTransaction(cmdParam, resolve, reject) {\n    //if command in progress, driver cannot rely on status and must execute query\n    if (this.status >= Status.CLOSING) {\n      const err = Errors.createFatalError(\n        'Cannot execute new commands: connection closed',\n        Errors.ER_CMD_CONNECTION_CLOSED,\n        this.info,\n        '08S01',\n        cmdParam.sql\n      );\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      reject(err);\n      return;\n    }\n\n    //Command in progress => must execute query\n    //or if no command in progress, can rely on status to know if query is needed\n    if (this.receiveQueue.peekFront() || this.info.status & ServerStatus.STATUS_IN_TRANS) {\n      const cmd = new Query(\n        resolve,\n        (err) => {\n          if (this.opts.logger.error) this.opts.logger.error(err);\n          reject(err);\n        },\n        this.opts,\n        cmdParam\n      );\n      this.addCommand(cmd);\n    } else resolve();\n  }\n\n  changeUser(cmdParam, resolve, reject) {\n    if (!this.info.isMariaDB()) {\n      const err = Errors.createError(\n        'method changeUser not available for MySQL server due to Bug #83472',\n        Errors.ER_MYSQL_CHANGE_USER_BUG,\n        this.info,\n        '0A000'\n      );\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      reject(err);\n      return;\n    }\n    if (this.status < Status.CLOSING) {\n      this.addCommand = this.addCommandEnable;\n    }\n    let conn = this;\n    if (cmdParam.opts && cmdParam.opts.collation && typeof cmdParam.opts.collation === 'string') {\n      const val = cmdParam.opts.collation.toUpperCase();\n      cmdParam.opts.collation = Collations.fromName(cmdParam.opts.collation.toUpperCase());\n      if (cmdParam.opts.collation === undefined) return reject(new RangeError(`Unknown collation '${val}'`));\n    }\n\n    this.addCommand(\n      new ChangeUser(\n        cmdParam,\n        this.opts,\n        (res) => {\n          if (conn.status < Status.CLOSING && conn.opts.pipelining) conn.addCommand = conn.addCommandEnablePipeline;\n          if (cmdParam.opts && cmdParam.opts.collation) conn.opts.collation = cmdParam.opts.collation;\n          conn\n            .handleCharset()\n            .then(() => {\n              if (cmdParam.opts && cmdParam.opts.collation) {\n                conn.info.collation = cmdParam.opts.collation;\n                conn.opts.emit('collation', cmdParam.opts.collation);\n              }\n              resolve(res);\n            })\n            .catch((err) => {\n              const res = () => conn.authFailHandler.call(conn, err);\n              if (!err.fatal) {\n                conn.end(res, res);\n              } else {\n                res();\n              }\n              reject(err);\n            });\n        },\n        this.authFailHandler.bind(this, reject),\n        this.getSocket.bind(this)\n      )\n    );\n  }\n\n  query(cmdParam, resolve, reject) {\n    if (!cmdParam.sql)\n      return reject(\n        Errors.createError(\n          'sql parameter is mandatory',\n          Errors.ER_UNDEFINED_SQL,\n          this.info,\n          'HY000',\n          null,\n          false,\n          cmdParam.stack\n        )\n      );\n    const cmd = new Query(\n      resolve,\n      (err) => {\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        reject(err);\n      },\n      this.opts,\n      cmdParam\n    );\n    this.addCommand(cmd);\n  }\n\n  prepare(cmdParam, resolve, reject) {\n    if (!cmdParam.sql)\n      return reject(Errors.createError('sql parameter is mandatory', Errors.ER_UNDEFINED_SQL, this.info, 'HY000'));\n    if (this.prepareCache && (this.sendQueue.isEmpty() || !this.receiveQueue.peekFront())) {\n      // no command in queue, database is then considered ok, and cache can be search right now\n      const cachedPrepare = this.prepareCache.get(cmdParam.sql);\n      if (cachedPrepare) {\n        return resolve(cachedPrepare);\n      }\n    }\n\n    const cmd = new Prepare(\n      resolve,\n      (err) => {\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        reject(err);\n      },\n      this.opts,\n      cmdParam,\n      this\n    );\n    this.addCommand(cmd);\n  }\n\n  prepareExecute(cmdParam) {\n    if (!cmdParam.sql) {\n      return Promise.reject(\n        Errors.createError('sql parameter is mandatory', Errors.ER_UNDEFINED_SQL, this.info, 'HY000')\n      );\n    }\n\n    if (this.prepareCache && (this.sendQueue.isEmpty() || !this.receiveQueue.peekFront())) {\n      // no command in queue, current database is known, so cache can be search right now\n      const cachedPrepare = this.prepareCache.get(cmdParam.sql);\n      if (cachedPrepare) {\n        return new Promise(this.executePromise.bind(this, cmdParam, cachedPrepare)).finally(() =>\n          cachedPrepare.close()\n        );\n      }\n    }\n\n    // permit pipelining PREPARE and EXECUTE if mariadb 10.2.4+ and has no streaming\n    const conn = this;\n    if (this.opts.pipelining && this.info.isMariaDB() && this.info.hasMinVersion(10, 2, 4)) {\n      let hasStreamingValue = false;\n      const vals = cmdParam.values ? (Array.isArray(cmdParam.values) ? cmdParam.values : [cmdParam.values]) : [];\n      for (let i = 0; i < vals.length; i++) {\n        const val = vals[i];\n        if (\n          val != null &&\n          typeof val === 'object' &&\n          typeof val.pipe === 'function' &&\n          typeof val.read === 'function'\n        ) {\n          hasStreamingValue = true;\n        }\n      }\n      if (!hasStreamingValue) {\n        return new Promise((resolve, reject) => {\n          let nbExecute = 0;\n          const executeCommand = new Execute(\n            (res) => {\n              if (nbExecute++ === 0) {\n                executeCommand.prepare.close();\n                resolve(res);\n              }\n            },\n            (err) => {\n              if (nbExecute++ === 0) {\n                if (conn.opts.logger.error) conn.opts.logger.error(err);\n                reject(err);\n                if (executeCommand.prepare) {\n                  executeCommand.prepare.close();\n                }\n              }\n            },\n            conn.opts,\n            cmdParam,\n            null\n          );\n          cmdParam.executeCommand = executeCommand;\n          const cmd = new Prepare(\n            (prep) => {\n              if (nbExecute > 0) prep.close();\n            },\n            (err) => {\n              if (nbExecute++ === 0) {\n                if (conn.opts.logger.error) conn.opts.logger.error(err);\n                reject(err);\n              }\n            },\n            conn.opts,\n            cmdParam,\n            conn\n          );\n          conn.addCommand(cmd);\n          conn.addCommand(executeCommand);\n        });\n      }\n    }\n    // execute PREPARE, then EXECUTE\n    return new Promise((resolve, reject) => {\n      const cmd = new Prepare(resolve, reject, this.opts, cmdParam, conn);\n      conn.addCommand(cmd);\n    })\n      .then((prepare) => {\n        return new Promise(function (resolve, reject) {\n          conn.executePromise.call(conn, cmdParam, prepare, resolve, reject);\n        }).finally(() => prepare.close());\n      })\n      .catch((err) => {\n        if (conn.opts.logger.error) conn.opts.logger.error(err);\n        throw err;\n      });\n  }\n  importFile(cmdParam, resolve, reject) {\n    const conn = this;\n    if (!cmdParam || !cmdParam.file) {\n      return reject(\n        Errors.createError(\n          'SQL file parameter is mandatory',\n          Errors.ER_MISSING_SQL_PARAMETER,\n          conn.info,\n          'HY000',\n          null,\n          false,\n          cmdParam.stack\n        )\n      );\n    }\n\n    const prevAddCommand = this.addCommand.bind(conn);\n\n    this.waitingAuthenticationQueue = new Queue();\n    this.addCommand = this.addCommandQueue;\n    const tmpQuery = function (sql, resolve, reject) {\n      const cmd = new Query(\n        resolve,\n        (err) => {\n          if (conn.opts.logger.error) conn.opts.logger.error(err);\n          reject(err);\n        },\n        conn.opts,\n        new CommandParameter(sql, null, {})\n      );\n      prevAddCommand(cmd);\n    };\n\n    let prevDatabase = null;\n    return (\n      cmdParam.skipDbCheck ? Promise.resolve() : new Promise(tmpQuery.bind(conn, 'SELECT DATABASE() as db'))\n    ).then((res) => {\n      prevDatabase = res ? res[0].db : null;\n      if (\n        (cmdParam.skipDbCheck && !conn.opts.database) ||\n        (!cmdParam.skipDbCheck && !cmdParam.database && !prevDatabase)\n      ) {\n        return reject(\n          Errors.createError(\n            'Database parameter is not set and no database is selected',\n            Errors.ER_MISSING_DATABASE_PARAMETER,\n            conn.info,\n            'HY000',\n            null,\n            false,\n            cmdParam.stack\n          )\n        );\n      }\n      const searchDbPromise = cmdParam.database\n        ? new Promise(tmpQuery.bind(conn, `USE \\`${cmdParam.database.replace(/`/gi, '``')}\\``))\n        : Promise.resolve();\n      return searchDbPromise.then(() => {\n        const endingFunction = () => {\n          if (conn.status < Status.CLOSING) {\n            conn.addCommand = conn.addCommandEnable.bind(conn);\n            if (conn.status < Status.CLOSING && conn.opts.pipelining) {\n              conn.addCommand = conn.addCommandEnablePipeline.bind(conn);\n            }\n            const commands = conn.waitingAuthenticationQueue.toArray();\n            commands.forEach((cmd) => conn.addCommand(cmd));\n            conn.waitingAuthenticationQueue = null;\n          }\n        };\n        return fsPromises\n          .open(cmdParam.file, 'r')\n          .then(async (fd) => {\n            const buf = {\n              buffer: Buffer.allocUnsafe(16384),\n              offset: 0,\n              end: 0\n            };\n\n            const queryPromises = [];\n            let cmdError = null;\n            while (!cmdError) {\n              try {\n                const res = await fd.read(buf.buffer, buf.end, buf.buffer.length - buf.end, null);\n                if (res.bytesRead === 0) {\n                  // end of file reached.\n                  fd.close().catch(() => {});\n                  if (cmdError) {\n                    endingFunction();\n                    reject(cmdError);\n                    return;\n                  }\n                  await Promise.allSettled(queryPromises)\n                    .then(() => {\n                      // reset connection to initial database if was set\n                      if (\n                        !cmdParam.skipDbCheck &&\n                        prevDatabase &&\n                        cmdParam.database &&\n                        cmdParam.database !== prevDatabase\n                      ) {\n                        return new Promise(tmpQuery.bind(conn, `USE \\`${prevDatabase.replace(/`/gi, '``')}\\``));\n                      }\n                      return Promise.resolve();\n                    })\n                    .then(() => {\n                      endingFunction();\n                      if (cmdError) {\n                        reject(cmdError);\n                      }\n                      resolve();\n                    })\n                    .catch((err) => {\n                      endingFunction();\n                      reject(err);\n                    });\n                  return;\n                } else {\n                  buf.end += res.bytesRead;\n                  const queries = Parse.parseQueries(buf);\n                  const queryIntermediatePromise = queries.flatMap((element) => {\n                    return new Promise(tmpQuery.bind(conn, element)).catch((err) => {\n                      cmdError = err;\n                    });\n                  });\n\n                  queryPromises.push(...queryIntermediatePromise);\n                  if (buf.offset === buf.end) {\n                    buf.offset = 0;\n                    buf.end = 0;\n                  } else {\n                    // ensure that buffer can at least read 8k bytes,\n                    // either by copying remaining data on used part or growing buffer\n                    if (buf.offset > 8192) {\n                      // reuse buffer, copying remaining data begin of buffer\n                      buf.buffer.copy(buf.buffer, 0, buf.offset, buf.end);\n                      buf.end -= buf.offset;\n                      buf.offset = 0;\n                    } else if (buf.buffer.length - buf.end < 8192) {\n                      // grow buffer\n                      const tmpBuf = Buffer.allocUnsafe(buf.buffer.length << 1);\n                      buf.buffer.copy(tmpBuf, 0, buf.offset, buf.end);\n                      buf.buffer = tmpBuf;\n                      buf.end -= buf.offset;\n                      buf.offset = 0;\n                    }\n                  }\n                }\n              } catch (e) {\n                fd.close().catch(() => {});\n                endingFunction();\n                Promise.allSettled(queryPromises).catch(() => {});\n                return reject(\n                  Errors.createError(\n                    e.message,\n                    Errors.ER_SQL_FILE_ERROR,\n                    conn.info,\n                    'HY000',\n                    null,\n                    false,\n                    cmdParam.stack\n                  )\n                );\n              }\n            }\n            if (cmdError) {\n              endingFunction();\n              reject(cmdError);\n            }\n          })\n          .catch((err) => {\n            endingFunction();\n            if (err.code === 'ENOENT') {\n              return reject(\n                Errors.createError(\n                  `SQL file parameter '${cmdParam.file}' doesn't exists`,\n                  Errors.ER_MISSING_SQL_FILE,\n                  conn.info,\n                  'HY000',\n                  null,\n                  false,\n                  cmdParam.stack\n                )\n              );\n            }\n            return reject(\n              Errors.createError(err.message, Errors.ER_SQL_FILE_ERROR, conn.info, 'HY000', null, false, cmdParam.stack)\n            );\n          });\n      });\n    });\n  }\n\n  /**\n   * Clearing connection variables when ending.\n   *\n   * @private\n   */\n  clear() {\n    this.sendQueue.clear();\n    this.opts.removeAllListeners();\n    this.streamOut = undefined;\n    this.socket = undefined;\n  }\n\n  /**\n   * Redirecting connection to server indicated value.\n   * @param value server host string\n   * @param resolve promise result when done\n   */\n  redirect(value, resolve) {\n    if (this.opts.permitRedirect && value) {\n      // redirect only if :\n      // * when pipelining, having received all waiting responses.\n      // * not in a transaction\n      if (this.receiveQueue.length <= 1 && (this.info.status & ServerStatus.STATUS_IN_TRANS) === 0) {\n        this.info.redirectRequest = null;\n        const matchResults = value.match(redirectUrlFormat);\n        if (!matchResults) {\n          if (this.opts.logger.error)\n            this.opts.logger.error(\n              new Error(\n                `error parsing redirection string '${value}'. format must be 'mariadb/mysql://[<user>[:<password>]@]<host>[:<port>]/[<db>[?<opt1>=<value1>[&<opt2>=<value2>]]]'`\n              )\n            );\n          return resolve();\n        }\n\n        const options = {\n          host: matchResults[7] ? decodeURIComponent(matchResults[7]) : matchResults[6],\n          port: matchResults[9] ? parseInt(matchResults[9]) : 3306\n        };\n\n        if (options.host === this.opts.host && options.port === this.opts.port) {\n          // redirection to the same host, skip loop redirection\n          return resolve();\n        }\n\n        // actually only options accepted are user and password\n        // there might be additional possible options in the future\n        if (matchResults[3]) options.user = matchResults[3];\n        if (matchResults[5]) options.password = matchResults[5];\n\n        const redirectOpts = ConnectionOptions.parseOptionDataType(options);\n\n        const finalRedirectOptions = new ConnOptions(Object.assign({}, this.opts, redirectOpts));\n        const conn = new Connection(finalRedirectOptions);\n        conn\n          .connect()\n          .then(\n            async function () {\n              const cmdParam = new CommandParameter();\n              await new Promise(this.end.bind(this, cmdParam));\n              this.status = Status.CONNECTED;\n              this.info = conn.info;\n              this.opts = conn.opts;\n              this.socket = conn.socket;\n              if (this.prepareCache) this.prepareCache.reset();\n              this.streamOut = conn.streamOut;\n              this.streamIn = conn.streamIn;\n              resolve();\n            }.bind(this)\n          )\n          .catch(\n            function (e) {\n              if (this.opts.logger.error) {\n                const err = new Error(`fail to redirect to '${value}'`);\n                err.cause = e;\n                this.opts.logger.error(err);\n              }\n              resolve();\n            }.bind(this)\n          );\n      } else {\n        this.info.redirectRequest = value;\n        resolve();\n      }\n    } else {\n      this.info.redirectRequest = null;\n      resolve();\n    }\n  }\n\n  get threadId() {\n    return this.info ? this.info.threadId : null;\n  }\n\n  _sendNextCmdImmediate() {\n    if (!this.sendQueue.isEmpty()) {\n      setImmediate(this.nextSendCmd.bind(this));\n    }\n  }\n\n  _closePrepare(prepareResultPacket) {\n    this.addCommand(\n      new ClosePrepare(\n        new CommandParameter(null, null, null, null),\n        () => {},\n        () => {},\n        prepareResultPacket\n      )\n    );\n  }\n\n  _logAndReject(reject, err) {\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    reject(err);\n  }\n}\n\nclass TestMethods {\n  #collation;\n  #socket;\n\n  constructor(collation, socket) {\n    this.#collation = collation;\n    this.#socket = socket;\n  }\n\n  getCollation() {\n    return this.#collation;\n  }\n\n  getSocket() {\n    return this.#socket;\n  }\n}\n\nmodule.exports = Connection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
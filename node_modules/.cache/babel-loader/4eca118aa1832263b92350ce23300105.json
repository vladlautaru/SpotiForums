{"ast":null,"code":"const mariadb = require('mariadb');\nasync function connectAndExecute(query, data) {\n  let conn;\n  try {\n    // connection with pipeline\n    conn = await mariadb.createPool({\n      host: \"localhost\",\n      user: \"root\",\n      password: \"spotiforums@#$\",\n      database: \"spotiforums_db\",\n      pipeline: \"true\"\n    });\n    const users = [[\"username1\", \"password1\"], [\"username2\", \"password2\"]];\n    const update = {\n      user: \"username1\",\n      password: \"password3\"\n    };\n    const del = {\n      user: \"username2\"\n    };\n    // performing a CRUD test\n    const resolve = await crudPipeline(conn, users, update, del);\n    // if successful, execute the query\n    if (resolve === 1) {\n      await conn.query(query, data);\n    }\n  } catch (err) {\n    console.error(\"Error connecting to the database with pipeline: \", err);\n  } finally {\n    if (conn) {\n      conn.release();\n    }\n  }\n  return Promise.resolve(1);\n}\nasync function crudPipeline(conn, data, update, del) {\n  try {\n    await conn.beginTransaction();\n    try {\n      // deleting test table\n      await conn.query(\"drop table if exists test.users\");\n      // creating test table\n      await conn.query(\"create table test.users (user varchar(255) primary key not null , password VARCHAR(255) not null)\");\n      // inserting into test table\n      await conn.batch(\"insert into test.users(user, password) values(?, ?)\", data);\n      // updating test table\n      await conn.query(\"update test.users set password = ? where user = ?\", [update.password, update.user]);\n      // deleting from test table\n      await conn.query(\"delete from test.users where user = ?\", [del.user]);\n      // reading from test table\n      await conn.query(\"select user, password from test.users\");\n    } catch (err) {\n      console.error(\"Error adding user, reverting changes: \", err);\n      await conn.rollback();\n    }\n  } catch (err) {\n    console.error(\"Error starting a transaction: \", err);\n  }\n  // CRUD passed\n  return Promise.resolve(1);\n}\nexport default connectAndExecute;","map":{"version":3,"names":["mariadb","require","connectAndExecute","query","data","conn","createPool","host","user","password","database","pipeline","users","update","del","resolve","crudPipeline","err","console","error","release","Promise","beginTransaction","batch","rollback"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/src/mariadb-api.js"],"sourcesContent":["const mariadb = require('mariadb');\r\n\r\nasync function connectAndExecute(query, data){\r\n    let conn;\r\n\r\n    try {\r\n        // connection with pipeline\r\n        conn = await mariadb.createPool({\r\n            host: \"localhost\",\r\n            user: \"root\",\r\n            password: \"spotiforums@#$\",\r\n            database: \"spotiforums_db\",\r\n            pipeline: \"true\"\r\n        });\r\n\r\n        const users = [\r\n            [\"username1\", \"password1\"],\r\n            [\"username2\", \"password2\"]\r\n        ];\r\n\r\n        const update = {\r\n            user: \"username1\",\r\n            password: \"password3\"\r\n        };\r\n\r\n        const del = {\r\n            user: \"username2\"\r\n        };\r\n        // performing a CRUD test\r\n        const resolve = await crudPipeline(conn, users, update, del);\r\n        // if successful, execute the query\r\n        if (resolve === 1) {\r\n            await conn.query(query, data);\r\n        }\r\n\r\n    } catch(err) {\r\n        console.error(\"Error connecting to the database with pipeline: \", err);\r\n    } finally {\r\n        if (conn) {\r\n            conn.release();\r\n        }\r\n    }\r\n\r\n    return Promise.resolve(1);\r\n}\r\n\r\nasync function crudPipeline(conn, data, update, del) {\r\n    try {\r\n        await conn.beginTransaction();\r\n\r\n        try {\r\n            // deleting test table\r\n            await conn.query(\"drop table if exists test.users\");\r\n            // creating test table\r\n            await conn.query(\"create table test.users (user varchar(255) primary key not null , password VARCHAR(255) not null)\");\r\n            // inserting into test table\r\n            await conn.batch(\"insert into test.users(user, password) values(?, ?)\", data);\r\n            // updating test table\r\n            await conn.query(\"update test.users set password = ? where user = ?\",\r\n                [update.password, update.user]);\r\n            // deleting from test table\r\n            await conn.query(\"delete from test.users where user = ?\", [del.user]);\r\n            // reading from test table\r\n            await conn.query(\"select user, password from test.users\");\r\n\r\n        } catch (err) {\r\n            console.error(\"Error adding user, reverting changes: \", err);\r\n            await conn.rollback();\r\n        }\r\n    } catch (err) {\r\n        console.error(\"Error starting a transaction: \", err);\r\n    }\r\n    // CRUD passed\r\n    return Promise.resolve(1);\r\n}\r\n\r\nexport default connectAndExecute;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAElC,eAAeC,iBAAiBA,CAACC,KAAK,EAAEC,IAAI,EAAC;EACzC,IAAIC,IAAI;EAER,IAAI;IACA;IACAA,IAAI,GAAG,MAAML,OAAO,CAACM,UAAU,CAAC;MAC5BC,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE,gBAAgB;MAC1BC,QAAQ,EAAE,gBAAgB;MAC1BC,QAAQ,EAAE;IACd,CAAC,CAAC;IAEF,MAAMC,KAAK,GAAG,CACV,CAAC,WAAW,EAAE,WAAW,CAAC,EAC1B,CAAC,WAAW,EAAE,WAAW,CAAC,CAC7B;IAED,MAAMC,MAAM,GAAG;MACXL,IAAI,EAAE,WAAW;MACjBC,QAAQ,EAAE;IACd,CAAC;IAED,MAAMK,GAAG,GAAG;MACRN,IAAI,EAAE;IACV,CAAC;IACD;IACA,MAAMO,OAAO,GAAG,MAAMC,YAAY,CAACX,IAAI,EAAEO,KAAK,EAAEC,MAAM,EAAEC,GAAG,CAAC;IAC5D;IACA,IAAIC,OAAO,KAAK,CAAC,EAAE;MACf,MAAMV,IAAI,CAACF,KAAK,CAACA,KAAK,EAAEC,IAAI,CAAC;IACjC;EAEJ,CAAC,CAAC,OAAMa,GAAG,EAAE;IACTC,OAAO,CAACC,KAAK,CAAC,kDAAkD,EAAEF,GAAG,CAAC;EAC1E,CAAC,SAAS;IACN,IAAIZ,IAAI,EAAE;MACNA,IAAI,CAACe,OAAO,CAAC,CAAC;IAClB;EACJ;EAEA,OAAOC,OAAO,CAACN,OAAO,CAAC,CAAC,CAAC;AAC7B;AAEA,eAAeC,YAAYA,CAACX,IAAI,EAAED,IAAI,EAAES,MAAM,EAAEC,GAAG,EAAE;EACjD,IAAI;IACA,MAAMT,IAAI,CAACiB,gBAAgB,CAAC,CAAC;IAE7B,IAAI;MACA;MACA,MAAMjB,IAAI,CAACF,KAAK,CAAC,iCAAiC,CAAC;MACnD;MACA,MAAME,IAAI,CAACF,KAAK,CAAC,mGAAmG,CAAC;MACrH;MACA,MAAME,IAAI,CAACkB,KAAK,CAAC,qDAAqD,EAAEnB,IAAI,CAAC;MAC7E;MACA,MAAMC,IAAI,CAACF,KAAK,CAAC,mDAAmD,EAChE,CAACU,MAAM,CAACJ,QAAQ,EAAEI,MAAM,CAACL,IAAI,CAAC,CAAC;MACnC;MACA,MAAMH,IAAI,CAACF,KAAK,CAAC,uCAAuC,EAAE,CAACW,GAAG,CAACN,IAAI,CAAC,CAAC;MACrE;MACA,MAAMH,IAAI,CAACF,KAAK,CAAC,uCAAuC,CAAC;IAE7D,CAAC,CAAC,OAAOc,GAAG,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,wCAAwC,EAAEF,GAAG,CAAC;MAC5D,MAAMZ,IAAI,CAACmB,QAAQ,CAAC,CAAC;IACzB;EACJ,CAAC,CAAC,OAAOP,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,GAAG,CAAC;EACxD;EACA;EACA,OAAOI,OAAO,CAACN,OAAO,CAAC,CAAC,CAAC;AAC7B;AAEA,eAAeb,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}
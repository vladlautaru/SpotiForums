{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Stream = require('./cmd/stream');\nconst CommandParameter = require('./command-parameter');\nconst Errors = require('./misc/errors');\n\n/**\n * New Connection instance.\n *\n * @param options    connection options\n * @returns Connection instance\n * @constructor\n * @fires Connection#connect\n * @fires Connection#end\n * @fires Connection#error\n *\n */\nclass ConnectionPromise {\n  #conn;\n  constructor(conn) {\n    this.#conn = conn;\n  }\n  get threadId() {\n    return this.#conn.threadId;\n  }\n  get info() {\n    return this.#conn.info;\n  }\n  get prepareCache() {\n    return this.#conn.prepareCache;\n  }\n\n  /**\n   * Permit to change user during connection.\n   * All user variables will be reset, Prepare commands will be released.\n   * !!! mysql has a bug when CONNECT_ATTRS capability is set, that is default !!!!\n   *\n   * @param options   connection options\n   * @returns {Promise} promise\n   */\n  changeUser(options) {\n    const cmdParam = new CommandParameter(null, null, options);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.changeUser.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Start transaction\n   *\n   * @returns {Promise} promise\n   */\n  beginTransaction() {\n    return this.query('START TRANSACTION');\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * @returns {Promise} command if commit was needed only\n   */\n  commit() {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, 'COMMIT');\n    return new Promise(this.#conn.changeTransaction.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Roll back a transaction.\n   *\n   * @returns {Promise} promise\n   */\n  rollback() {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, 'ROLLBACK');\n    return new Promise(this.#conn.changeTransaction.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Execute query using text protocol.\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @returns {Promise} promise\n   */\n  query(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    return new Promise(this.#conn.query.bind(this.#conn, cmdParam));\n  }\n  static _PARAM(options, sql, values) {\n    let _cmdOpt,\n      _sql = sql,\n      _values = values;\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n      if (_cmdOpt.values) _values = _cmdOpt.values;\n    }\n    const cmdParam = new CommandParameter(_sql, _values, _cmdOpt);\n    if (options.trace) Error.captureStackTrace(cmdParam, ConnectionPromise._PARAM);\n    return cmdParam;\n  }\n  execute(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    return this.#conn.prepareExecute(cmdParam);\n  }\n  static _EXECUTE_CMD(conn, cmdParam) {\n    return conn.prepareExecute(cmdParam);\n  }\n  prepare(sql) {\n    let _cmdOpt, _sql;\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n    } else {\n      _sql = sql;\n    }\n    const cmdParam = new CommandParameter(_sql, null, _cmdOpt);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.prepare.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Execute batch using text protocol.\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values\n   * @returns {Promise} promise\n   */\n  batch(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    return this.#conn.batch(cmdParam);\n  }\n  static _BATCH_CMD(conn, cmdParam) {\n    return conn.batch(cmdParam);\n  }\n\n  /**\n   * Import sql file.\n   *\n   * @param opts JSON array with 2 possible fields: file and database\n   */\n  importFile(opts) {\n    if (!opts || !opts.file) {\n      return Promise.reject(Errors.createError('SQL file parameter is mandatory', Errors.ER_MISSING_SQL_PARAMETER, this.#conn.info, 'HY000', null, false, null));\n    }\n    return new Promise(this.#conn.importFile.bind(this.#conn, {\n      file: opts.file,\n      database: opts.database\n    }));\n  }\n\n  /**\n   * Execute query returning a Readable Object that will emit columns/data/end/error events\n   * to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @returns {Readable}\n   */\n  queryStream(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    const cmd = new Stream(cmdParam, this.#conn.opts, this.#conn.socket);\n    if (this.#conn.opts.logger.error) cmd.on('error', this.#conn.opts.logger.error);\n    this.#conn.addCommand(cmd);\n    return cmd.inStream;\n  }\n\n  /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param timeout (optional) timeout value in ms. If reached, throw error and close connection\n   * @returns {Promise} promise\n   */\n  ping(timeout) {\n    const cmdParam = new CommandParameter(null, null, {\n      timeout: timeout\n    });\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.ping.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   *\n   * @returns {Promise} promise\n   */\n  reset() {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.reset.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */\n  isValid() {\n    return this.#conn.isValid();\n  }\n\n  /**\n   * Terminate connection gracefully.\n   *\n   * @returns {Promise} promise\n   */\n  end() {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.end.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Alias for destroy.\n   */\n  close() {\n    this.destroy();\n  }\n\n  /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */\n  destroy() {\n    this.#conn.destroy();\n  }\n  pause() {\n    this.#conn.pause();\n  }\n  resume() {\n    this.#conn.resume();\n  }\n  format(sql, values) {\n    this.#conn.format(sql, values);\n  }\n\n  /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */\n  serverVersion() {\n    return this.#conn.serverVersion();\n  }\n\n  /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */\n  debug(val) {\n    return this.#conn.debug(val);\n  }\n  debugCompress(val) {\n    return this.#conn.debugCompress(val);\n  }\n  escape(val) {\n    return this.#conn.escape(val);\n  }\n  escapeId(val) {\n    return this.#conn.escapeId(val);\n  }\n\n  //*****************************************************************\n  // EventEmitter proxy methods\n  //*****************************************************************\n\n  on(eventName, listener) {\n    this.#conn.on.call(this.#conn, eventName, listener);\n    return this;\n  }\n  off(eventName, listener) {\n    this.#conn.off.call(this.#conn, eventName, listener);\n    return this;\n  }\n  once(eventName, listener) {\n    this.#conn.once.call(this.#conn, eventName, listener);\n    return this;\n  }\n  listeners(eventName) {\n    return this.#conn.listeners.call(this.#conn, eventName);\n  }\n  addListener(eventName, listener) {\n    this.#conn.addListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n  eventNames() {\n    return this.#conn.eventNames.call(this.#conn);\n  }\n  getMaxListeners() {\n    return this.#conn.getMaxListeners.call(this.#conn);\n  }\n  listenerCount(eventName, listener) {\n    return this.#conn.listenerCount.call(this.#conn, eventName, listener);\n  }\n  prependListener(eventName, listener) {\n    this.#conn.prependListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n  prependOnceListener(eventName, listener) {\n    this.#conn.prependOnceListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n  removeAllListeners(eventName, listener) {\n    this.#conn.removeAllListeners.call(this.#conn, eventName, listener);\n    return this;\n  }\n  removeListener(eventName, listener) {\n    this.#conn.removeListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n  setMaxListeners(n) {\n    this.#conn.setMaxListeners.call(this.#conn, n);\n    return this;\n  }\n  rawListeners(eventName) {\n    return this.#conn.rawListeners.call(this.#conn, eventName);\n  }\n\n  //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n  get __tests() {\n    return this.#conn.__tests;\n  }\n}\nmodule.exports = ConnectionPromise;","map":{"version":3,"names":["Stream","require","CommandParameter","Errors","ConnectionPromise","conn","constructor","threadId","info","prepareCache","changeUser","options","cmdParam","opts","trace","Error","captureStackTrace","Promise","bind","beginTransaction","query","commit","_PARAM","changeTransaction","rollback","sql","values","_cmdOpt","_sql","_values","execute","prepareExecute","_EXECUTE_CMD","prepare","batch","_BATCH_CMD","importFile","file","reject","createError","ER_MISSING_SQL_PARAMETER","database","queryStream","cmd","socket","logger","error","on","addCommand","inStream","ping","timeout","reset","isValid","end","close","destroy","pause","resume","format","serverVersion","debug","val","debugCompress","escape","escapeId","eventName","listener","call","off","once","listeners","addListener","eventNames","getMaxListeners","listenerCount","prependListener","prependOnceListener","removeAllListeners","removeListener","setMaxListeners","n","rawListeners","__tests","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/connection-promise.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Stream = require('./cmd/stream');\nconst CommandParameter = require('./command-parameter');\nconst Errors = require('./misc/errors');\n\n/**\n * New Connection instance.\n *\n * @param options    connection options\n * @returns Connection instance\n * @constructor\n * @fires Connection#connect\n * @fires Connection#end\n * @fires Connection#error\n *\n */\nclass ConnectionPromise {\n  #conn;\n\n  constructor(conn) {\n    this.#conn = conn;\n  }\n\n  get threadId() {\n    return this.#conn.threadId;\n  }\n\n  get info() {\n    return this.#conn.info;\n  }\n\n  get prepareCache() {\n    return this.#conn.prepareCache;\n  }\n\n  /**\n   * Permit to change user during connection.\n   * All user variables will be reset, Prepare commands will be released.\n   * !!! mysql has a bug when CONNECT_ATTRS capability is set, that is default !!!!\n   *\n   * @param options   connection options\n   * @returns {Promise} promise\n   */\n  changeUser(options) {\n    const cmdParam = new CommandParameter(null, null, options);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.changeUser.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Start transaction\n   *\n   * @returns {Promise} promise\n   */\n  beginTransaction() {\n    return this.query('START TRANSACTION');\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * @returns {Promise} command if commit was needed only\n   */\n  commit() {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, 'COMMIT');\n    return new Promise(this.#conn.changeTransaction.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Roll back a transaction.\n   *\n   * @returns {Promise} promise\n   */\n  rollback() {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, 'ROLLBACK');\n    return new Promise(this.#conn.changeTransaction.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Execute query using text protocol.\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @returns {Promise} promise\n   */\n  query(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    return new Promise(this.#conn.query.bind(this.#conn, cmdParam));\n  }\n\n  static _PARAM(options, sql, values) {\n    let _cmdOpt,\n      _sql = sql,\n      _values = values;\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n      if (_cmdOpt.values) _values = _cmdOpt.values;\n    }\n    const cmdParam = new CommandParameter(_sql, _values, _cmdOpt);\n    if (options.trace) Error.captureStackTrace(cmdParam, ConnectionPromise._PARAM);\n    return cmdParam;\n  }\n\n  execute(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    return this.#conn.prepareExecute(cmdParam);\n  }\n\n  static _EXECUTE_CMD(conn, cmdParam) {\n    return conn.prepareExecute(cmdParam);\n  }\n\n  prepare(sql) {\n    let _cmdOpt, _sql;\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n    } else {\n      _sql = sql;\n    }\n    const cmdParam = new CommandParameter(_sql, null, _cmdOpt);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.prepare.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Execute batch using text protocol.\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values\n   * @returns {Promise} promise\n   */\n  batch(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    return this.#conn.batch(cmdParam);\n  }\n\n  static _BATCH_CMD(conn, cmdParam) {\n    return conn.batch(cmdParam);\n  }\n\n  /**\n   * Import sql file.\n   *\n   * @param opts JSON array with 2 possible fields: file and database\n   */\n  importFile(opts) {\n    if (!opts || !opts.file) {\n      return Promise.reject(\n        Errors.createError(\n          'SQL file parameter is mandatory',\n          Errors.ER_MISSING_SQL_PARAMETER,\n          this.#conn.info,\n          'HY000',\n          null,\n          false,\n          null\n        )\n      );\n    }\n    return new Promise(this.#conn.importFile.bind(this.#conn, { file: opts.file, database: opts.database }));\n  }\n\n  /**\n   * Execute query returning a Readable Object that will emit columns/data/end/error events\n   * to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @returns {Readable}\n   */\n  queryStream(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    const cmd = new Stream(cmdParam, this.#conn.opts, this.#conn.socket);\n    if (this.#conn.opts.logger.error) cmd.on('error', this.#conn.opts.logger.error);\n    this.#conn.addCommand(cmd);\n    return cmd.inStream;\n  }\n\n  /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param timeout (optional) timeout value in ms. If reached, throw error and close connection\n   * @returns {Promise} promise\n   */\n  ping(timeout) {\n    const cmdParam = new CommandParameter(null, null, { timeout: timeout });\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.ping.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   *\n   * @returns {Promise} promise\n   */\n  reset() {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.reset.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */\n  isValid() {\n    return this.#conn.isValid();\n  }\n\n  /**\n   * Terminate connection gracefully.\n   *\n   * @returns {Promise} promise\n   */\n  end() {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.end.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Alias for destroy.\n   */\n  close() {\n    this.destroy();\n  }\n\n  /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */\n  destroy() {\n    this.#conn.destroy();\n  }\n\n  pause() {\n    this.#conn.pause();\n  }\n\n  resume() {\n    this.#conn.resume();\n  }\n\n  format(sql, values) {\n    this.#conn.format(sql, values);\n  }\n\n  /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */\n  serverVersion() {\n    return this.#conn.serverVersion();\n  }\n\n  /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */\n  debug(val) {\n    return this.#conn.debug(val);\n  }\n\n  debugCompress(val) {\n    return this.#conn.debugCompress(val);\n  }\n\n  escape(val) {\n    return this.#conn.escape(val);\n  }\n\n  escapeId(val) {\n    return this.#conn.escapeId(val);\n  }\n\n  //*****************************************************************\n  // EventEmitter proxy methods\n  //*****************************************************************\n\n  on(eventName, listener) {\n    this.#conn.on.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  off(eventName, listener) {\n    this.#conn.off.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  once(eventName, listener) {\n    this.#conn.once.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  listeners(eventName) {\n    return this.#conn.listeners.call(this.#conn, eventName);\n  }\n\n  addListener(eventName, listener) {\n    this.#conn.addListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  eventNames() {\n    return this.#conn.eventNames.call(this.#conn);\n  }\n\n  getMaxListeners() {\n    return this.#conn.getMaxListeners.call(this.#conn);\n  }\n\n  listenerCount(eventName, listener) {\n    return this.#conn.listenerCount.call(this.#conn, eventName, listener);\n  }\n\n  prependListener(eventName, listener) {\n    this.#conn.prependListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  prependOnceListener(eventName, listener) {\n    this.#conn.prependOnceListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  removeAllListeners(eventName, listener) {\n    this.#conn.removeAllListeners.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  removeListener(eventName, listener) {\n    this.#conn.removeListener.call(this.#conn, eventName, listener);\n    return this;\n  }\n\n  setMaxListeners(n) {\n    this.#conn.setMaxListeners.call(this.#conn, n);\n    return this;\n  }\n\n  rawListeners(eventName) {\n    return this.#conn.rawListeners.call(this.#conn, eventName);\n  }\n\n  //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n  get __tests() {\n    return this.#conn.__tests;\n  }\n}\n\nmodule.exports = ConnectionPromise;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
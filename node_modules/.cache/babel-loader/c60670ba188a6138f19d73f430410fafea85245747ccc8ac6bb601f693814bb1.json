{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Utils = require('../misc/utils');\nconst ZLib = require('zlib');\n\n//increase by level to avoid buffer copy.\nconst SMALL_BUFFER_SIZE = 2048;\nconst MEDIUM_BUFFER_SIZE = 131072; //128k\nconst LARGE_BUFFER_SIZE = 1048576; //1M\nconst MAX_BUFFER_SIZE = 16777222; //16M + 7\n\n/**\n/**\n * MySQL compression filter.\n * see https://mariadb.com/kb/en/library/0-packet/#compressed-packet\n */\nclass CompressionOutputStream {\n  /**\n   * Constructor\n   *\n   * @param socket    current socket\n   * @param opts      current connection options\n   * @param info      current connection information\n   * @constructor\n   */\n  constructor(socket, opts, info) {\n    this.info = info;\n    this.opts = opts;\n    this.pos = 7;\n    this.header = Buffer.allocUnsafe(7);\n    this.buf = Buffer.allocUnsafe(SMALL_BUFFER_SIZE);\n    this.writer = buffer => {\n      socket.write(buffer);\n    };\n  }\n  growBuffer(len) {\n    let newCapacity;\n    if (len + this.pos < MEDIUM_BUFFER_SIZE) {\n      newCapacity = MEDIUM_BUFFER_SIZE;\n    } else if (len + this.pos < LARGE_BUFFER_SIZE) {\n      newCapacity = LARGE_BUFFER_SIZE;\n    } else newCapacity = MAX_BUFFER_SIZE;\n    let newBuf = Buffer.allocUnsafe(newCapacity);\n    this.buf.copy(newBuf, 0, 0, this.pos);\n    this.buf = newBuf;\n  }\n  writeBuf(arr, cmd) {\n    let off = 0,\n      len = arr.length;\n    if (arr instanceof Uint8Array) {\n      arr = Buffer.from(arr);\n    }\n    if (len > this.buf.length - this.pos) {\n      if (this.buf.length !== MAX_BUFFER_SIZE) {\n        this.growBuffer(len);\n      }\n\n      //max buffer size\n      if (len > this.buf.length - this.pos) {\n        //not enough space in buffer, will stream :\n        // fill buffer and flush until all data are snd\n        let remainingLen = len;\n        while (true) {\n          //filling buffer\n          let lenToFillBuffer = Math.min(MAX_BUFFER_SIZE - this.pos, remainingLen);\n          arr.copy(this.buf, this.pos, off, off + lenToFillBuffer);\n          remainingLen -= lenToFillBuffer;\n          off += lenToFillBuffer;\n          this.pos += lenToFillBuffer;\n          if (remainingLen === 0) return;\n          this.flush(false, cmd, remainingLen);\n        }\n      }\n    }\n    arr.copy(this.buf, this.pos, off, off + len);\n    this.pos += len;\n  }\n\n  /**\n   * Flush the internal buffer.\n   */\n  flush(cmdEnd, cmd, remainingLen) {\n    if (this.pos < 1536) {\n      //*******************************************************************************\n      // small packet, no compression\n      //*******************************************************************************\n\n      this.buf[0] = this.pos - 7;\n      this.buf[1] = this.pos - 7 >>> 8;\n      this.buf[2] = this.pos - 7 >>> 16;\n      this.buf[3] = ++cmd.compressSequenceNo;\n      this.buf[4] = 0;\n      this.buf[5] = 0;\n      this.buf[6] = 0;\n      if (this.opts.debugCompress) {\n        this.opts.logger.network(`==> conn:${this.info.threadId ? this.info.threadId : -1} ${cmd ? cmd.constructor.name + '(0,' + this.pos + ')' : 'unknown'} (compress)\\n${Utils.log(this.opts, this.buf, 0, this.pos)}`);\n      }\n      this.writer(this.buf.subarray(0, this.pos));\n    } else {\n      //*******************************************************************************\n      // compressing packet\n      //*******************************************************************************\n      //use synchronous inflating, to ensure FIFO packet order\n      const compressChunk = ZLib.deflateSync(this.buf.subarray(7, this.pos));\n      const compressChunkLen = compressChunk.length;\n      this.header[0] = compressChunkLen;\n      this.header[1] = compressChunkLen >>> 8;\n      this.header[2] = compressChunkLen >>> 16;\n      this.header[3] = ++cmd.compressSequenceNo;\n      this.header[4] = this.pos - 7;\n      this.header[5] = this.pos - 7 >>> 8;\n      this.header[6] = this.pos - 7 >>> 16;\n      if (this.opts.debugCompress) {\n        this.opts.logger.network(`==> conn:${this.info.threadId ? this.info.threadId : -1} ${cmd ? cmd.constructor.name + '(0,' + this.pos + '=>' + compressChunkLen + ')' : 'unknown'} (compress)\\n${Utils.log(this.opts, compressChunk, 0, compressChunkLen, this.header)}`);\n      }\n      this.writer(this.header);\n      this.writer(compressChunk);\n      if (cmdEnd && compressChunkLen === MAX_BUFFER_SIZE) this.writeEmptyPacket(cmd);\n      this.header = Buffer.allocUnsafe(7);\n    }\n    this.buf = remainingLen ? CompressionOutputStream.allocateBuffer(remainingLen) : Buffer.allocUnsafe(SMALL_BUFFER_SIZE);\n    this.pos = 7;\n  }\n  static allocateBuffer(len) {\n    if (len + 4 < SMALL_BUFFER_SIZE) {\n      return Buffer.allocUnsafe(SMALL_BUFFER_SIZE);\n    } else if (len + 4 < MEDIUM_BUFFER_SIZE) {\n      return Buffer.allocUnsafe(MEDIUM_BUFFER_SIZE);\n    } else if (len + 4 < LARGE_BUFFER_SIZE) {\n      return Buffer.allocUnsafe(LARGE_BUFFER_SIZE);\n    }\n    return Buffer.allocUnsafe(MAX_BUFFER_SIZE);\n  }\n  writeEmptyPacket(cmd) {\n    const emptyBuf = Buffer.from([0x00, 0x00, 0x00, cmd.compressSequenceNo, 0x00, 0x00, 0x00]);\n    if (this.opts.debugCompress) {\n      this.opts.logger.network(`==> conn:${this.info.threadId ? this.info.threadId : -1} ${cmd ? cmd.constructor.name + '(0,' + this.pos + ')' : 'unknown'} (compress)\\n${Utils.log(this.opts, emptyBuf, 0, 7)}`);\n    }\n    this.writer(emptyBuf);\n  }\n}\nmodule.exports = CompressionOutputStream;","map":{"version":3,"names":["Utils","require","ZLib","SMALL_BUFFER_SIZE","MEDIUM_BUFFER_SIZE","LARGE_BUFFER_SIZE","MAX_BUFFER_SIZE","CompressionOutputStream","constructor","socket","opts","info","pos","header","Buffer","allocUnsafe","buf","writer","buffer","write","growBuffer","len","newCapacity","newBuf","copy","writeBuf","arr","cmd","off","length","Uint8Array","from","remainingLen","lenToFillBuffer","Math","min","flush","cmdEnd","compressSequenceNo","debugCompress","logger","network","threadId","name","log","subarray","compressChunk","deflateSync","compressChunkLen","writeEmptyPacket","allocateBuffer","emptyBuf","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/io/compression-output-stream.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Utils = require('../misc/utils');\nconst ZLib = require('zlib');\n\n//increase by level to avoid buffer copy.\nconst SMALL_BUFFER_SIZE = 2048;\nconst MEDIUM_BUFFER_SIZE = 131072; //128k\nconst LARGE_BUFFER_SIZE = 1048576; //1M\nconst MAX_BUFFER_SIZE = 16777222; //16M + 7\n\n/**\n/**\n * MySQL compression filter.\n * see https://mariadb.com/kb/en/library/0-packet/#compressed-packet\n */\nclass CompressionOutputStream {\n  /**\n   * Constructor\n   *\n   * @param socket    current socket\n   * @param opts      current connection options\n   * @param info      current connection information\n   * @constructor\n   */\n  constructor(socket, opts, info) {\n    this.info = info;\n    this.opts = opts;\n    this.pos = 7;\n    this.header = Buffer.allocUnsafe(7);\n    this.buf = Buffer.allocUnsafe(SMALL_BUFFER_SIZE);\n    this.writer = (buffer) => {\n      socket.write(buffer);\n    };\n  }\n\n  growBuffer(len) {\n    let newCapacity;\n    if (len + this.pos < MEDIUM_BUFFER_SIZE) {\n      newCapacity = MEDIUM_BUFFER_SIZE;\n    } else if (len + this.pos < LARGE_BUFFER_SIZE) {\n      newCapacity = LARGE_BUFFER_SIZE;\n    } else newCapacity = MAX_BUFFER_SIZE;\n\n    let newBuf = Buffer.allocUnsafe(newCapacity);\n    this.buf.copy(newBuf, 0, 0, this.pos);\n    this.buf = newBuf;\n  }\n\n  writeBuf(arr, cmd) {\n    let off = 0,\n      len = arr.length;\n    if (arr instanceof Uint8Array) {\n      arr = Buffer.from(arr);\n    }\n    if (len > this.buf.length - this.pos) {\n      if (this.buf.length !== MAX_BUFFER_SIZE) {\n        this.growBuffer(len);\n      }\n\n      //max buffer size\n      if (len > this.buf.length - this.pos) {\n        //not enough space in buffer, will stream :\n        // fill buffer and flush until all data are snd\n        let remainingLen = len;\n\n        while (true) {\n          //filling buffer\n          let lenToFillBuffer = Math.min(MAX_BUFFER_SIZE - this.pos, remainingLen);\n          arr.copy(this.buf, this.pos, off, off + lenToFillBuffer);\n          remainingLen -= lenToFillBuffer;\n          off += lenToFillBuffer;\n          this.pos += lenToFillBuffer;\n\n          if (remainingLen === 0) return;\n          this.flush(false, cmd, remainingLen);\n        }\n      }\n    }\n    arr.copy(this.buf, this.pos, off, off + len);\n    this.pos += len;\n  }\n\n  /**\n   * Flush the internal buffer.\n   */\n  flush(cmdEnd, cmd, remainingLen) {\n    if (this.pos < 1536) {\n      //*******************************************************************************\n      // small packet, no compression\n      //*******************************************************************************\n\n      this.buf[0] = this.pos - 7;\n      this.buf[1] = (this.pos - 7) >>> 8;\n      this.buf[2] = (this.pos - 7) >>> 16;\n      this.buf[3] = ++cmd.compressSequenceNo;\n      this.buf[4] = 0;\n      this.buf[5] = 0;\n      this.buf[6] = 0;\n\n      if (this.opts.debugCompress) {\n        this.opts.logger.network(\n          `==> conn:${this.info.threadId ? this.info.threadId : -1} ${\n            cmd ? cmd.constructor.name + '(0,' + this.pos + ')' : 'unknown'\n          } (compress)\\n${Utils.log(this.opts, this.buf, 0, this.pos)}`\n        );\n      }\n\n      this.writer(this.buf.subarray(0, this.pos));\n    } else {\n      //*******************************************************************************\n      // compressing packet\n      //*******************************************************************************\n      //use synchronous inflating, to ensure FIFO packet order\n      const compressChunk = ZLib.deflateSync(this.buf.subarray(7, this.pos));\n      const compressChunkLen = compressChunk.length;\n\n      this.header[0] = compressChunkLen;\n      this.header[1] = compressChunkLen >>> 8;\n      this.header[2] = compressChunkLen >>> 16;\n      this.header[3] = ++cmd.compressSequenceNo;\n      this.header[4] = this.pos - 7;\n      this.header[5] = (this.pos - 7) >>> 8;\n      this.header[6] = (this.pos - 7) >>> 16;\n\n      if (this.opts.debugCompress) {\n        this.opts.logger.network(\n          `==> conn:${this.info.threadId ? this.info.threadId : -1} ${\n            cmd ? cmd.constructor.name + '(0,' + this.pos + '=>' + compressChunkLen + ')' : 'unknown'\n          } (compress)\\n${Utils.log(this.opts, compressChunk, 0, compressChunkLen, this.header)}`\n        );\n      }\n\n      this.writer(this.header);\n      this.writer(compressChunk);\n      if (cmdEnd && compressChunkLen === MAX_BUFFER_SIZE) this.writeEmptyPacket(cmd);\n      this.header = Buffer.allocUnsafe(7);\n    }\n    this.buf = remainingLen\n      ? CompressionOutputStream.allocateBuffer(remainingLen)\n      : Buffer.allocUnsafe(SMALL_BUFFER_SIZE);\n    this.pos = 7;\n  }\n\n  static allocateBuffer(len) {\n    if (len + 4 < SMALL_BUFFER_SIZE) {\n      return Buffer.allocUnsafe(SMALL_BUFFER_SIZE);\n    } else if (len + 4 < MEDIUM_BUFFER_SIZE) {\n      return Buffer.allocUnsafe(MEDIUM_BUFFER_SIZE);\n    } else if (len + 4 < LARGE_BUFFER_SIZE) {\n      return Buffer.allocUnsafe(LARGE_BUFFER_SIZE);\n    }\n    return Buffer.allocUnsafe(MAX_BUFFER_SIZE);\n  }\n\n  writeEmptyPacket(cmd) {\n    const emptyBuf = Buffer.from([0x00, 0x00, 0x00, cmd.compressSequenceNo, 0x00, 0x00, 0x00]);\n\n    if (this.opts.debugCompress) {\n      this.opts.logger.network(\n        `==> conn:${this.info.threadId ? this.info.threadId : -1} ${\n          cmd ? cmd.constructor.name + '(0,' + this.pos + ')' : 'unknown'\n        } (compress)\\n${Utils.log(this.opts, emptyBuf, 0, 7)}`\n      );\n    }\n\n    this.writer(emptyBuf);\n  }\n}\n\nmodule.exports = CompressionOutputStream;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Parser = require('./parser');\nconst Errors = require('../misc/errors');\nconst BinaryEncoder = require('./encoder/binary-encoder');\nconst FieldType = require('../const/field-type');\nconst Parse = require('../misc/parse');\n\n/**\n * Protocol COM_STMT_EXECUTE\n * see : https://mariadb.com/kb/en/com_stmt_execute/\n */\nclass Execute extends Parser {\n  constructor(resolve, reject, connOpts, cmdParam, prepare) {\n    super(resolve, reject, connOpts, cmdParam);\n    this.writeParam = BinaryEncoder.writeParam;\n    this.binary = true;\n    this.prepare = prepare;\n    this.canSkipMeta = true;\n  }\n\n  /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    this.onPacketReceive = this.readResponsePacket;\n    this.values = [];\n    if (this.opts.namedPlaceholders) {\n      if (this.prepare) {\n        // using named placeholders, so change values accordingly\n        this.values = new Array(this.prepare.parameterCount);\n        this.placeHolderIndex = this.prepare._placeHolderIndex;\n      } else {\n        const res = Parse.searchPlaceholder(this.sql);\n        this.placeHolderIndex = res.placeHolderIndex;\n        this.values = new Array(this.placeHolderIndex.length);\n      }\n      if (this.initialValues) {\n        for (let i = 0; i < this.placeHolderIndex.length; i++) {\n          this.values[i] = this.initialValues[this.placeHolderIndex[i]];\n        }\n      }\n    } else {\n      if (this.initialValues) this.values = Array.isArray(this.initialValues) ? this.initialValues : [this.initialValues];\n    }\n    this.parameterCount = this.prepare ? this.prepare.parameterCount : this.values.length;\n    if (!this.validateParameters(info)) return;\n\n    // send long data using COM_STMT_SEND_LONG_DATA\n    this.longDataStep = false; // send long data\n    for (let i = 0; i < this.parameterCount; i++) {\n      const value = this.values[i];\n      if (value != null && (typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function' || Buffer.isBuffer(value) && this.prepare)) {\n        if (opts.logger.query) opts.logger.query(`EXECUTE: (${this.prepare ? this.prepare.id : -1}) sql: ${opts.logParam ? this.displaySql() : this.sql}`);\n        if (!this.longDataStep) {\n          this.longDataStep = true;\n          this.registerStreamSendEvent(out, info);\n          this.currentParam = i;\n        }\n        this.sendComStmtLongData(out, info, value);\n        return;\n      }\n    }\n    if (!this.longDataStep) {\n      // no stream parameter, so can send directly\n      if (opts.logger.query) opts.logger.query(`EXECUTE: (${this.prepare ? this.prepare.id : -1}) sql: ${opts.logParam ? this.displaySql() : this.sql}`);\n      this.sendComStmtExecute(out, info);\n    }\n  }\n\n  /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */\n  validateParameters(info) {\n    //validate parameter size.\n    if (this.parameterCount > this.values.length) {\n      this.sendCancelled(`Parameter at position ${this.values.length} is not set\\\\nsql: ${this.opts.logParam ? this.displaySql() : this.sql}`, Errors.ER_MISSING_PARAMETER, info);\n      return false;\n    }\n\n    //validate parameter is defined.\n    for (let i = 0; i < this.parameterCount; i++) {\n      if (this.opts.namedPlaceholders && this.placeHolderIndex && this.values[i] === undefined) {\n        let errMsg = `Parameter named ${this.placeHolderIndex[i]} is not set`;\n        if (this.placeHolderIndex.length < this.parameterCount) {\n          errMsg = `Command expect ${this.parameterCount} parameters, but found only ${this.placeHolderIndex.length} named parameters. You probably use question mark in place of named parameters`;\n        }\n        this.sendCancelled(errMsg, Errors.ER_PARAMETER_UNDEFINED, info);\n        return false;\n      }\n\n      // special check for GEOJSON that can be null even if object is not\n      if (this.values[i] && this.values[i].type != null && ['Point', 'LineString', 'Polygon', 'MultiPoint', 'MultiLineString', 'MultiPolygon', 'GeometryCollection'].includes(this.values[i].type)) {\n        const geoBuff = BinaryEncoder.getBufferFromGeometryValue(this.values[i]);\n        if (geoBuff == null) {\n          this.values[i] = null;\n        } else {\n          this.values[i] = Buffer.concat([Buffer.from([0, 0, 0, 0]),\n          // SRID\n          geoBuff // WKB\n          ]);\n        }\n      }\n    }\n    return true;\n  }\n  sendComStmtLongData(out, info, value) {\n    out.startPacket(this);\n    out.writeInt8(0x18);\n    out.writeInt32(this.prepare.id);\n    out.writeInt16(this.currentParam);\n    if (Buffer.isBuffer(value)) {\n      out.writeBuffer(value, 0, value.length);\n      out.flush();\n      this.currentParam++;\n      return this.paramWritten();\n    }\n    this.sending = true;\n\n    // streaming\n    value.on('data', function (chunk) {\n      out.writeBuffer(chunk, 0, chunk.length);\n    });\n    value.on('end', function () {\n      out.flush();\n      this.currentParam++;\n      this.paramWritten();\n    }.bind(this));\n  }\n\n  /**\n   * Send a COM_STMT_EXECUTE\n   * @param out\n   * @param info\n   */\n  sendComStmtExecute(out, info) {\n    let nullCount = Math.floor((this.parameterCount + 7) / 8);\n    const nullBitsBuffer = Buffer.alloc(nullCount);\n    for (let i = 0; i < this.parameterCount; i++) {\n      if (this.values[i] == null) {\n        nullBitsBuffer[Math.floor(i / 8)] |= 1 << i % 8;\n      }\n    }\n    out.startPacket(this);\n    out.writeInt8(0x17); // COM_STMT_EXECUTE\n    out.writeInt32(this.prepare ? this.prepare.id : -1); // Statement id\n    out.writeInt8(0); // no cursor flag\n    out.writeInt32(1); // 1 command\n    out.writeBuffer(nullBitsBuffer, 0, nullCount); // null buffer\n    out.writeInt8(1); // always send type to server\n\n    // send types\n    for (let i = 0; i < this.parameterCount; i++) {\n      const val = this.values[i];\n      if (val != null) {\n        switch (typeof val) {\n          case 'boolean':\n            out.writeInt8(FieldType.TINY);\n            break;\n          case 'bigint':\n            if (val >= 2n ** 63n) {\n              out.writeInt8(FieldType.NEWDECIMAL);\n            } else {\n              out.writeInt8(FieldType.BIGINT);\n            }\n            break;\n          case 'number':\n            // additional verification, to permit query without type,\n            // like 'SELECT ?' returning same type of value\n            if (Number.isSafeInteger(val) && val >= -2147483648 && val < 2147483647) {\n              out.writeInt8(FieldType.INT);\n              break;\n            }\n            out.writeInt8(FieldType.DOUBLE);\n            break;\n          case 'string':\n            out.writeInt8(FieldType.VAR_STRING);\n            break;\n          case 'object':\n            if (val instanceof Date) {\n              out.writeInt8(FieldType.DATETIME);\n            } else if (Buffer.isBuffer(val)) {\n              out.writeInt8(FieldType.BLOB);\n            } else if (typeof val.toSqlString === 'function') {\n              out.writeInt8(FieldType.VAR_STRING);\n            } else if (typeof val.pipe === 'function' && typeof val.read === 'function') {\n              out.writeInt8(FieldType.BLOB);\n            } else {\n              out.writeInt8(FieldType.VAR_STRING);\n            }\n            break;\n          default:\n            out.writeInt8(FieldType.BLOB);\n            break;\n        }\n      } else {\n        out.writeInt8(FieldType.VAR_STRING);\n      }\n      out.writeInt8(0);\n    }\n\n    //********************************************\n    // send not null / not streaming values\n    //********************************************\n    for (let i = 0; i < this.parameterCount; i++) {\n      const value = this.values[i];\n      if (value != null && !(typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') && !(Buffer.isBuffer(value) && this.prepare)) {\n        this.writeParam(out, value, this.opts, info);\n      }\n    }\n    out.flush();\n    this.sending = false;\n    this.emit('send_end');\n  }\n\n  /**\n   * Define params events.\n   * Each parameter indicate that he is written to socket,\n   * emitting event so next stream parameter can be written.\n   */\n  registerStreamSendEvent(out, info) {\n    // note : Implementation use recursive calls, but stack won't get near v8 max call stack size\n    //since event launched for stream parameter only\n    this.paramWritten = function () {\n      if (this.longDataStep) {\n        for (; this.currentParam < this.parameterCount; this.currentParam++) {\n          const value = this.values[this.currentParam];\n          if (value != null && typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function' || Buffer.isBuffer(value)) {\n            this.sendComStmtLongData(out, info, value);\n            return;\n          }\n        }\n        this.longDataStep = false; // all streams have been send\n      }\n      if (!this.longDataStep) {\n        this.sendComStmtExecute(out, info);\n      }\n    }.bind(this);\n  }\n}\nmodule.exports = Execute;","map":{"version":3,"names":["Parser","require","Errors","BinaryEncoder","FieldType","Parse","Execute","constructor","resolve","reject","connOpts","cmdParam","prepare","writeParam","binary","canSkipMeta","start","out","opts","info","onPacketReceive","readResponsePacket","values","namedPlaceholders","Array","parameterCount","placeHolderIndex","_placeHolderIndex","res","searchPlaceholder","sql","length","initialValues","i","isArray","validateParameters","longDataStep","value","pipe","read","Buffer","isBuffer","logger","query","id","logParam","displaySql","registerStreamSendEvent","currentParam","sendComStmtLongData","sendComStmtExecute","sendCancelled","ER_MISSING_PARAMETER","undefined","errMsg","ER_PARAMETER_UNDEFINED","type","includes","geoBuff","getBufferFromGeometryValue","concat","from","startPacket","writeInt8","writeInt32","writeInt16","writeBuffer","flush","paramWritten","sending","on","chunk","bind","nullCount","Math","floor","nullBitsBuffer","alloc","val","TINY","NEWDECIMAL","BIGINT","Number","isSafeInteger","INT","DOUBLE","VAR_STRING","Date","DATETIME","BLOB","toSqlString","emit","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/cmd/execute.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Parser = require('./parser');\nconst Errors = require('../misc/errors');\nconst BinaryEncoder = require('./encoder/binary-encoder');\nconst FieldType = require('../const/field-type');\nconst Parse = require('../misc/parse');\n\n/**\n * Protocol COM_STMT_EXECUTE\n * see : https://mariadb.com/kb/en/com_stmt_execute/\n */\nclass Execute extends Parser {\n  constructor(resolve, reject, connOpts, cmdParam, prepare) {\n    super(resolve, reject, connOpts, cmdParam);\n    this.writeParam = BinaryEncoder.writeParam;\n    this.binary = true;\n    this.prepare = prepare;\n    this.canSkipMeta = true;\n  }\n\n  /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    this.onPacketReceive = this.readResponsePacket;\n    this.values = [];\n\n    if (this.opts.namedPlaceholders) {\n      if (this.prepare) {\n        // using named placeholders, so change values accordingly\n        this.values = new Array(this.prepare.parameterCount);\n        this.placeHolderIndex = this.prepare._placeHolderIndex;\n      } else {\n        const res = Parse.searchPlaceholder(this.sql);\n        this.placeHolderIndex = res.placeHolderIndex;\n        this.values = new Array(this.placeHolderIndex.length);\n      }\n      if (this.initialValues) {\n        for (let i = 0; i < this.placeHolderIndex.length; i++) {\n          this.values[i] = this.initialValues[this.placeHolderIndex[i]];\n        }\n      }\n    } else {\n      if (this.initialValues)\n        this.values = Array.isArray(this.initialValues) ? this.initialValues : [this.initialValues];\n    }\n    this.parameterCount = this.prepare ? this.prepare.parameterCount : this.values.length;\n\n    if (!this.validateParameters(info)) return;\n\n    // send long data using COM_STMT_SEND_LONG_DATA\n    this.longDataStep = false; // send long data\n    for (let i = 0; i < this.parameterCount; i++) {\n      const value = this.values[i];\n      if (\n        value != null &&\n        ((typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') ||\n          (Buffer.isBuffer(value) && this.prepare))\n      ) {\n        if (opts.logger.query)\n          opts.logger.query(\n            `EXECUTE: (${this.prepare ? this.prepare.id : -1}) sql: ${opts.logParam ? this.displaySql() : this.sql}`\n          );\n        if (!this.longDataStep) {\n          this.longDataStep = true;\n          this.registerStreamSendEvent(out, info);\n          this.currentParam = i;\n        }\n        this.sendComStmtLongData(out, info, value);\n        return;\n      }\n    }\n\n    if (!this.longDataStep) {\n      // no stream parameter, so can send directly\n      if (opts.logger.query)\n        opts.logger.query(\n          `EXECUTE: (${this.prepare ? this.prepare.id : -1}) sql: ${opts.logParam ? this.displaySql() : this.sql}`\n        );\n      this.sendComStmtExecute(out, info);\n    }\n  }\n\n  /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */\n  validateParameters(info) {\n    //validate parameter size.\n    if (this.parameterCount > this.values.length) {\n      this.sendCancelled(\n        `Parameter at position ${this.values.length} is not set\\\\nsql: ${\n          this.opts.logParam ? this.displaySql() : this.sql\n        }`,\n        Errors.ER_MISSING_PARAMETER,\n        info\n      );\n      return false;\n    }\n\n    //validate parameter is defined.\n    for (let i = 0; i < this.parameterCount; i++) {\n      if (this.opts.namedPlaceholders && this.placeHolderIndex && this.values[i] === undefined) {\n        let errMsg = `Parameter named ${this.placeHolderIndex[i]} is not set`;\n        if (this.placeHolderIndex.length < this.parameterCount) {\n          errMsg = `Command expect ${this.parameterCount} parameters, but found only ${this.placeHolderIndex.length} named parameters. You probably use question mark in place of named parameters`;\n        }\n        this.sendCancelled(errMsg, Errors.ER_PARAMETER_UNDEFINED, info);\n        return false;\n      }\n\n      // special check for GEOJSON that can be null even if object is not\n      if (\n        this.values[i] &&\n        this.values[i].type != null &&\n        [\n          'Point',\n          'LineString',\n          'Polygon',\n          'MultiPoint',\n          'MultiLineString',\n          'MultiPolygon',\n          'GeometryCollection'\n        ].includes(this.values[i].type)\n      ) {\n        const geoBuff = BinaryEncoder.getBufferFromGeometryValue(this.values[i]);\n        if (geoBuff == null) {\n          this.values[i] = null;\n        } else {\n          this.values[i] = Buffer.concat([\n            Buffer.from([0, 0, 0, 0]), // SRID\n            geoBuff // WKB\n          ]);\n        }\n      }\n    }\n    return true;\n  }\n\n  sendComStmtLongData(out, info, value) {\n    out.startPacket(this);\n    out.writeInt8(0x18);\n    out.writeInt32(this.prepare.id);\n    out.writeInt16(this.currentParam);\n\n    if (Buffer.isBuffer(value)) {\n      out.writeBuffer(value, 0, value.length);\n      out.flush();\n      this.currentParam++;\n      return this.paramWritten();\n    }\n    this.sending = true;\n\n    // streaming\n    value.on('data', function (chunk) {\n      out.writeBuffer(chunk, 0, chunk.length);\n    });\n\n    value.on(\n      'end',\n      function () {\n        out.flush();\n        this.currentParam++;\n        this.paramWritten();\n      }.bind(this)\n    );\n  }\n\n  /**\n   * Send a COM_STMT_EXECUTE\n   * @param out\n   * @param info\n   */\n  sendComStmtExecute(out, info) {\n    let nullCount = Math.floor((this.parameterCount + 7) / 8);\n    const nullBitsBuffer = Buffer.alloc(nullCount);\n    for (let i = 0; i < this.parameterCount; i++) {\n      if (this.values[i] == null) {\n        nullBitsBuffer[Math.floor(i / 8)] |= 1 << i % 8;\n      }\n    }\n\n    out.startPacket(this);\n    out.writeInt8(0x17); // COM_STMT_EXECUTE\n    out.writeInt32(this.prepare ? this.prepare.id : -1); // Statement id\n    out.writeInt8(0); // no cursor flag\n    out.writeInt32(1); // 1 command\n    out.writeBuffer(nullBitsBuffer, 0, nullCount); // null buffer\n    out.writeInt8(1); // always send type to server\n\n    // send types\n    for (let i = 0; i < this.parameterCount; i++) {\n      const val = this.values[i];\n      if (val != null) {\n        switch (typeof val) {\n          case 'boolean':\n            out.writeInt8(FieldType.TINY);\n            break;\n          case 'bigint':\n            if (val >= 2n ** 63n) {\n              out.writeInt8(FieldType.NEWDECIMAL);\n            } else {\n              out.writeInt8(FieldType.BIGINT);\n            }\n            break;\n          case 'number':\n            // additional verification, to permit query without type,\n            // like 'SELECT ?' returning same type of value\n            if (Number.isSafeInteger(val) && val >= -2147483648 && val < 2147483647) {\n              out.writeInt8(FieldType.INT);\n              break;\n            }\n            out.writeInt8(FieldType.DOUBLE);\n            break;\n          case 'string':\n            out.writeInt8(FieldType.VAR_STRING);\n            break;\n          case 'object':\n            if (val instanceof Date) {\n              out.writeInt8(FieldType.DATETIME);\n            } else if (Buffer.isBuffer(val)) {\n              out.writeInt8(FieldType.BLOB);\n            } else if (typeof val.toSqlString === 'function') {\n              out.writeInt8(FieldType.VAR_STRING);\n            } else if (typeof val.pipe === 'function' && typeof val.read === 'function') {\n              out.writeInt8(FieldType.BLOB);\n            } else {\n              out.writeInt8(FieldType.VAR_STRING);\n            }\n            break;\n          default:\n            out.writeInt8(FieldType.BLOB);\n            break;\n        }\n      } else {\n        out.writeInt8(FieldType.VAR_STRING);\n      }\n      out.writeInt8(0);\n    }\n\n    //********************************************\n    // send not null / not streaming values\n    //********************************************\n    for (let i = 0; i < this.parameterCount; i++) {\n      const value = this.values[i];\n      if (\n        value != null &&\n        !(typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') &&\n        !(Buffer.isBuffer(value) && this.prepare)\n      ) {\n        this.writeParam(out, value, this.opts, info);\n      }\n    }\n    out.flush();\n    this.sending = false;\n    this.emit('send_end');\n  }\n\n  /**\n   * Define params events.\n   * Each parameter indicate that he is written to socket,\n   * emitting event so next stream parameter can be written.\n   */\n  registerStreamSendEvent(out, info) {\n    // note : Implementation use recursive calls, but stack won't get near v8 max call stack size\n    //since event launched for stream parameter only\n    this.paramWritten = function () {\n      if (this.longDataStep) {\n        for (; this.currentParam < this.parameterCount; this.currentParam++) {\n          const value = this.values[this.currentParam];\n          if (\n            (value != null &&\n              typeof value === 'object' &&\n              typeof value.pipe === 'function' &&\n              typeof value.read === 'function') ||\n            Buffer.isBuffer(value)\n          ) {\n            this.sendComStmtLongData(out, info, value);\n            return;\n          }\n        }\n        this.longDataStep = false; // all streams have been send\n      }\n\n      if (!this.longDataStep) {\n        this.sendComStmtExecute(out, info);\n      }\n    }.bind(this);\n  }\n}\n\nmodule.exports = Execute;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
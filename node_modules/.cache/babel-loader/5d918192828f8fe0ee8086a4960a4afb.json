{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Collations = require('../const/collations.js');\nconst urlFormat = /mariadb:\\/\\/(([^/@:]+)?(:([^/]+))?@)?(([^/:]+)(:([0-9]+))?)\\/([^?]+)(\\?(.*))?$/;\n\n/**\n * Default option similar to mysql driver.\n * known differences\n * - no queryFormat option. Permitting client to parse is a security risk. Best is to give SQL + parameters\n *   Only possible Objects are :\n *   - Buffer\n *   - Date\n *   - Object that implement toSqlString function\n *   - JSON object\n * + rowsAsArray (in mysql2) permit to have rows by index, not by name. Avoiding to parsing metadata string => faster\n */\nclass ConnectionOptions {\n  constructor(opts) {\n    if (typeof opts === 'string') {\n      opts = ConnectionOptions.parse(opts);\n    }\n    if (!opts) opts = {};\n    this.host = opts.host || 'localhost';\n    this.port = opts.port || 3306;\n    this.keepEof = opts.keepEof || false;\n    this.user = opts.user || process.env.USERNAME;\n    this.password = opts.password;\n    this.database = opts.database;\n    this.stream = opts.stream;\n\n    // log\n    this.debug = opts.debug || false;\n    this.debugCompress = opts.debugCompress || false;\n    this.debugLen = opts.debugLen || 256;\n    this.logParam = opts.logParam === undefined ? true : opts.logParam === true;\n    if (opts.logger) {\n      if (typeof opts.logger === 'function') {\n        this.logger = {\n          network: opts.logger,\n          query: opts.logger,\n          error: opts.logger,\n          warning: opts.logger\n        };\n      } else {\n        this.logger = {\n          network: opts.logger.network,\n          query: opts.logger.query,\n          error: opts.logger.error,\n          warning: opts.logger.warning || console.log\n        };\n        if (opts.logger.logParam !== undefined) this.logParam = opts.logger.logParam;\n      }\n    } else {\n      this.logger = {\n        network: this.debug || this.debugCompress ? console.log : null,\n        query: null,\n        error: null,\n        warning: console.log\n      };\n    }\n    this.debug = !!this.logger.network;\n    if (opts.charset && typeof opts.charset === 'string') {\n      this.collation = Collations.fromCharset(opts.charset.toLowerCase());\n      if (this.collation === undefined) {\n        this.collation = Collations.fromName(opts.charset.toUpperCase());\n        if (this.collation !== undefined) {\n          this.logger.warning(\"warning: please use option 'collation' \" + \"in replacement of 'charset' when using a collation name ('\" + opts.charset + \"')\\n\" + \"(collation looks like 'UTF8MB4_UNICODE_CI', charset like 'utf8').\");\n        } else {\n          this.charset = opts.charset;\n        }\n      }\n    } else if (opts.collation && typeof opts.collation === 'string') {\n      this.collation = Collations.fromName(opts.collation.toUpperCase());\n      if (this.collation === undefined) throw new RangeError(\"Unknown collation '\" + opts.collation + \"'\");\n    } else {\n      this.collation = opts.charsetNumber ? Collations.fromIndex(opts.charsetNumber) : undefined;\n    }\n\n    // connection options\n    this.permitRedirect = opts.permitRedirect === undefined ? true : opts.permitRedirect;\n    this.initSql = opts.initSql;\n    this.connectTimeout = opts.connectTimeout === undefined ? 1000 : opts.connectTimeout;\n    this.connectAttributes = opts.connectAttributes || false;\n    this.compress = opts.compress || false;\n    this.rsaPublicKey = opts.rsaPublicKey;\n    this.cachingRsaPublicKey = opts.cachingRsaPublicKey;\n    this.allowPublicKeyRetrieval = opts.allowPublicKeyRetrieval || false;\n    this.forceVersionCheck = opts.forceVersionCheck || false;\n    this.maxAllowedPacket = opts.maxAllowedPacket;\n    this.permitConnectionWhenExpired = opts.permitConnectionWhenExpired || false;\n    this.pipelining = opts.pipelining;\n    this.timezone = opts.timezone || 'local';\n    this.socketPath = opts.socketPath;\n    this.sessionVariables = opts.sessionVariables;\n    this.infileStreamFactory = opts.infileStreamFactory;\n    this.ssl = opts.ssl;\n    if (opts.ssl) {\n      if (typeof opts.ssl !== 'boolean' && typeof opts.ssl !== 'string') {\n        this.ssl.rejectUnauthorized = opts.ssl.rejectUnauthorized !== false;\n      }\n    }\n\n    // socket\n    this.queryTimeout = opts.queryTimeout === undefined ? 0 : opts.queryTimeout;\n    this.socketTimeout = opts.socketTimeout === undefined ? 0 : opts.socketTimeout;\n    this.keepAliveDelay = opts.keepAliveDelay === undefined ? 0 : opts.keepAliveDelay;\n    this.trace = opts.trace || false;\n\n    // result-set\n    this.checkDuplicate = opts.checkDuplicate === undefined ? true : opts.checkDuplicate;\n    this.dateStrings = opts.dateStrings || false;\n    this.foundRows = opts.foundRows === undefined || opts.foundRows;\n    this.metaAsArray = opts.metaAsArray || false;\n    this.metaEnumerable = opts.metaEnumerable || false;\n    this.multipleStatements = opts.multipleStatements || false;\n    this.namedPlaceholders = opts.namedPlaceholders || false;\n    this.nestTables = opts.nestTables;\n    this.autoJsonMap = opts.autoJsonMap === undefined ? true : opts.autoJsonMap;\n    this.bitOneIsBoolean = opts.bitOneIsBoolean === undefined ? true : opts.bitOneIsBoolean;\n    this.arrayParenthesis = opts.arrayParenthesis || false;\n    this.permitSetMultiParamEntries = opts.permitSetMultiParamEntries || false;\n    this.rowsAsArray = opts.rowsAsArray || false;\n    this.typeCast = opts.typeCast;\n    if (this.typeCast !== undefined && typeof this.typeCast !== 'function') {\n      this.typeCast = undefined;\n    }\n    this.bulk = opts.bulk === undefined || opts.bulk;\n    this.checkNumberRange = opts.checkNumberRange || false;\n\n    // coherence check\n    if (opts.pipelining === undefined) {\n      this.permitLocalInfile = opts.permitLocalInfile || false;\n      this.pipelining = !this.permitLocalInfile;\n    } else {\n      this.pipelining = opts.pipelining;\n      if (opts.permitLocalInfile === true && this.pipelining) {\n        throw new Error('enabling options `permitLocalInfile` and `pipelining` is not possible, options are incompatible.');\n      }\n      this.permitLocalInfile = this.pipelining ? false : opts.permitLocalInfile || false;\n    }\n    this.prepareCacheLength = opts.prepareCacheLength === undefined ? 256 : opts.prepareCacheLength;\n    this.restrictedAuth = opts.restrictedAuth;\n    if (this.restrictedAuth != null) {\n      if (!Array.isArray(this.restrictedAuth)) {\n        this.restrictedAuth = this.restrictedAuth.split(',');\n      }\n    }\n\n    // for compatibility with 2.x version and mysql/mysql2\n    this.bigIntAsNumber = opts.bigIntAsNumber || false;\n    this.insertIdAsNumber = opts.insertIdAsNumber || false;\n    this.decimalAsNumber = opts.decimalAsNumber || false;\n    this.supportBigNumbers = opts.supportBigNumbers || false;\n    this.bigNumberStrings = opts.bigNumberStrings || false;\n    if (this.maxAllowedPacket && !Number.isInteger(this.maxAllowedPacket)) {\n      throw new RangeError(\"maxAllowedPacket must be an integer. was '\" + this.maxAllowedPacket + \"'\");\n    }\n  }\n\n  /**\n   * When parsing from String, correcting type.\n   *\n   * @param opts options\n   * @return {opts}\n   */\n  static parseOptionDataType(opts) {\n    if (opts.bulk) opts.bulk = opts.bulk === 'true';\n    if (opts.allowPublicKeyRetrieval) opts.allowPublicKeyRetrieval = opts.allowPublicKeyRetrieval === 'true';\n    if (opts.insertIdAsNumber) opts.insertIdAsNumber = opts.insertIdAsNumber === 'true';\n    if (opts.decimalAsNumber) opts.decimalAsNumber = opts.decimalAsNumber === 'true';\n    if (opts.bigIntAsNumber) opts.bigIntAsNumber = opts.bigIntAsNumber === 'true';\n    if (opts.charsetNumber && !isNaN(Number.parseInt(opts.charsetNumber))) {\n      opts.charsetNumber = Number.parseInt(opts.charsetNumber);\n    }\n    if (opts.permitRedirect) opts.permitRedirect = opts.permitRedirect === 'true';\n    if (opts.logParam) opts.logParam = opts.logParam === 'true';\n    if (opts.compress) opts.compress = opts.compress === 'true';\n    if (opts.connectAttributes) opts.connectAttributes = JSON.parse(opts.connectAttributes);\n    if (opts.connectTimeout) opts.connectTimeout = parseInt(opts.connectTimeout);\n    if (opts.keepAliveDelay) opts.keepAliveDelay = parseInt(opts.keepAliveDelay);\n    if (opts.socketTimeout) opts.socketTimeout = parseInt(opts.socketTimeout);\n    if (opts.dateStrings) opts.dateStrings = opts.dateStrings === 'true';\n    if (opts.debug) opts.debug = opts.debug === 'true';\n    if (opts.autoJsonMap) opts.autoJsonMap = opts.autoJsonMap === 'true';\n    if (opts.arrayParenthesis) opts.arrayParenthesis = opts.arrayParenthesis === 'true';\n    if (opts.checkDuplicate) opts.checkDuplicate = opts.checkDuplicate === 'true';\n    if (opts.debugCompress) opts.debugCompress = opts.debugCompress === 'true';\n    if (opts.debugLen) opts.debugLen = parseInt(opts.debugLen);\n    if (opts.prepareCacheLength) opts.prepareCacheLength = parseInt(opts.prepareCacheLength);\n    if (opts.queryTimeout) opts.queryTimeout = parseInt(opts.queryTimeout);\n    if (opts.foundRows) opts.foundRows = opts.foundRows === 'true';\n    if (opts.maxAllowedPacket && !isNaN(Number.parseInt(opts.maxAllowedPacket))) opts.maxAllowedPacket = parseInt(opts.maxAllowedPacket);\n    if (opts.metaAsArray) opts.metaAsArray = opts.metaAsArray === 'true';\n    if (opts.metaEnumerable) opts.metaEnumerable = opts.metaEnumerable === 'true';\n    if (opts.multipleStatements) opts.multipleStatements = opts.multipleStatements === 'true';\n    if (opts.namedPlaceholders) opts.namedPlaceholders = opts.namedPlaceholders === 'true';\n    if (opts.nestTables) opts.nestTables = opts.nestTables === 'true';\n    if (opts.permitSetMultiParamEntries) opts.permitSetMultiParamEntries = opts.permitSetMultiParamEntries === 'true';\n    if (opts.pipelining) opts.pipelining = opts.pipelining === 'true';\n    if (opts.forceVersionCheck) opts.forceVersionCheck = opts.forceVersionCheck === 'true';\n    if (opts.rowsAsArray) opts.rowsAsArray = opts.rowsAsArray === 'true';\n    if (opts.trace) opts.trace = opts.trace === 'true';\n    if (opts.ssl && (opts.ssl === 'true' || opts.ssl === 'false')) opts.ssl = opts.ssl === 'true';\n    if (opts.bitOneIsBoolean) opts.bitOneIsBoolean = opts.bitOneIsBoolean === 'true';\n    return opts;\n  }\n  static parse(opts) {\n    const matchResults = opts.match(urlFormat);\n    if (!matchResults) {\n      throw new Error(`error parsing connection string '${opts}'. format must be 'mariadb://[<user>[:<password>]@]<host>[:<port>]/[<db>[?<opt1>=<value1>[&<opt2>=<value2>]]]'`);\n    }\n    const options = {\n      user: matchResults[2] ? decodeURIComponent(matchResults[2]) : undefined,\n      password: matchResults[4] ? decodeURIComponent(matchResults[4]) : undefined,\n      host: matchResults[6] ? decodeURIComponent(matchResults[6]) : matchResults[6],\n      port: matchResults[8] ? parseInt(matchResults[8]) : undefined,\n      database: matchResults[9] ? decodeURIComponent(matchResults[9]) : matchResults[9]\n    };\n    const variousOptsString = matchResults[11];\n    if (variousOptsString) {\n      const keyValues = variousOptsString.split('&');\n      keyValues.forEach(function (keyVal) {\n        const equalIdx = keyVal.indexOf('=');\n        if (equalIdx !== 1) {\n          let val = keyVal.substring(equalIdx + 1);\n          val = val ? decodeURIComponent(val) : undefined;\n          options[keyVal.substring(0, equalIdx)] = val;\n        }\n      });\n    }\n    return this.parseOptionDataType(options);\n  }\n}\nmodule.exports = ConnectionOptions;","map":null,"metadata":{},"sourceType":"script"}
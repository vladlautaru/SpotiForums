{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst PluginAuth = require('./plugin-auth');\nconst Crypto = require('crypto');\n\n/**\n * Standard authentication plugin\n */\nclass NativePasswordAuth extends PluginAuth {\n  constructor(packSeq, compressPackSeq, pluginData, cmdParam, reject, multiAuthResolver) {\n    super(cmdParam, multiAuthResolver, reject);\n    this.pluginData = pluginData;\n    this.sequenceNo = packSeq;\n    this.compressSequenceNo = compressPackSeq;\n  }\n  start(out, opts, info) {\n    //seed is ended with a null byte value.\n    const data = this.pluginData.slice(0, 20);\n    let authToken = NativePasswordAuth.encryptSha1Password(opts.password, data);\n    out.startPacket(this);\n    if (authToken.length > 0) {\n      out.writeBuffer(authToken, 0, authToken.length);\n      out.flushPacket();\n    } else {\n      out.writeEmptyPacket(true);\n    }\n    this.emit('send_end');\n  }\n  static encryptSha1Password(password, seed) {\n    if (!password) return Buffer.alloc(0);\n    let hash = Crypto.createHash('sha1');\n    let stage1 = hash.update(password, 'utf8').digest();\n    hash = Crypto.createHash('sha1');\n    let stage2 = hash.update(stage1).digest();\n    hash = Crypto.createHash('sha1');\n    hash.update(seed);\n    hash.update(stage2);\n    let digest = hash.digest();\n    let returnBytes = Buffer.allocUnsafe(digest.length);\n    for (let i = 0; i < digest.length; i++) {\n      returnBytes[i] = stage1[i] ^ digest[i];\n    }\n    return returnBytes;\n  }\n  permitHash() {\n    return true;\n  }\n  hash(conf) {\n    let hash = Crypto.createHash('sha1');\n    let stage1 = hash.update(conf.password, 'utf8').digest();\n    hash = Crypto.createHash('sha1');\n    return hash.update(stage1).digest();\n  }\n}\nmodule.exports = NativePasswordAuth;","map":{"version":3,"names":["PluginAuth","require","Crypto","NativePasswordAuth","constructor","packSeq","compressPackSeq","pluginData","cmdParam","reject","multiAuthResolver","sequenceNo","compressSequenceNo","start","out","opts","info","data","slice","authToken","encryptSha1Password","password","startPacket","length","writeBuffer","flushPacket","writeEmptyPacket","emit","seed","Buffer","alloc","hash","createHash","stage1","update","digest","stage2","returnBytes","allocUnsafe","i","permitHash","conf","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/cmd/handshake/auth/native-password-auth.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst PluginAuth = require('./plugin-auth');\nconst Crypto = require('crypto');\n\n/**\n * Standard authentication plugin\n */\nclass NativePasswordAuth extends PluginAuth {\n  constructor(packSeq, compressPackSeq, pluginData, cmdParam, reject, multiAuthResolver) {\n    super(cmdParam, multiAuthResolver, reject);\n    this.pluginData = pluginData;\n    this.sequenceNo = packSeq;\n    this.compressSequenceNo = compressPackSeq;\n  }\n\n  start(out, opts, info) {\n    //seed is ended with a null byte value.\n    const data = this.pluginData.slice(0, 20);\n    let authToken = NativePasswordAuth.encryptSha1Password(opts.password, data);\n\n    out.startPacket(this);\n    if (authToken.length > 0) {\n      out.writeBuffer(authToken, 0, authToken.length);\n      out.flushPacket();\n    } else {\n      out.writeEmptyPacket(true);\n    }\n    this.emit('send_end');\n  }\n\n  static encryptSha1Password(password, seed) {\n    if (!password) return Buffer.alloc(0);\n\n    let hash = Crypto.createHash('sha1');\n    let stage1 = hash.update(password, 'utf8').digest();\n    hash = Crypto.createHash('sha1');\n\n    let stage2 = hash.update(stage1).digest();\n    hash = Crypto.createHash('sha1');\n\n    hash.update(seed);\n    hash.update(stage2);\n\n    let digest = hash.digest();\n    let returnBytes = Buffer.allocUnsafe(digest.length);\n    for (let i = 0; i < digest.length; i++) {\n      returnBytes[i] = stage1[i] ^ digest[i];\n    }\n    return returnBytes;\n  }\n\n  permitHash() {\n    return true;\n  }\n\n  hash(conf) {\n    let hash = Crypto.createHash('sha1');\n    let stage1 = hash.update(conf.password, 'utf8').digest();\n    hash = Crypto.createHash('sha1');\n    return hash.update(stage1).digest();\n  }\n}\n\nmodule.exports = NativePasswordAuth;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
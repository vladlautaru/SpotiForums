{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Parser = require('./parser');\nconst Parse = require('../misc/parse');\nconst BinaryEncoder = require('./encoder/binary-encoder');\nconst PrepareCacheWrapper = require('./class/prepare-cache-wrapper');\nconst PrepareResult = require('./class/prepare-result-packet');\nconst ServerStatus = require('../const/server-status');\nconst Errors = require('../misc/errors');\nconst ColumnDefinition = require('./column-definition');\n\n/**\n * send a COM_STMT_PREPARE: permits sending a prepare packet\n * see https://mariadb.com/kb/en/com_stmt_prepare/\n */\nclass Prepare extends Parser {\n  constructor(resolve, reject, connOpts, cmdParam, conn) {\n    super(resolve, reject, connOpts, cmdParam);\n    this.encoder = new BinaryEncoder(this.opts);\n    this.binary = true;\n    this.conn = conn;\n    this.executeCommand = cmdParam.executeCommand;\n  }\n\n  /**\n   * Send COM_STMT_PREPARE\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    // check in cache if enabled\n    if (this.conn.prepareCache) {\n      let cachedPrepare = this.conn.prepareCache.get(this.sql);\n      if (cachedPrepare) {\n        this.emit('send_end');\n        return this.successEnd(cachedPrepare);\n      }\n    }\n    if (opts.logger.query) opts.logger.query(`PREPARE: ${this.sql}`);\n    this.onPacketReceive = this.readPrepareResultPacket;\n    if (this.opts.namedPlaceholders) {\n      const res = Parse.searchPlaceholder(this.sql);\n      this.sql = res.sql;\n      this.placeHolderIndex = res.placeHolderIndex;\n    }\n    out.startPacket(this);\n    out.writeInt8(0x16);\n    out.writeString(this.sql);\n    out.flush();\n    this.emit('send_end');\n  }\n  successPrepare(info, opts) {\n    let prepare = new PrepareResult(this.statementId, this.parameterCount, this._columns, info.database, this.sql, this.placeHolderIndex, this.conn);\n    if (this.conn.prepareCache) {\n      let cached = new PrepareCacheWrapper(prepare);\n      this.conn.prepareCache.set(this.sql, cached);\n      const cachedWrappedPrepared = cached.incrementUse();\n      if (this.executeCommand) this.executeCommand.prepare = cachedWrappedPrepared;\n      return this.successEnd(cachedWrappedPrepared);\n    }\n    if (this.executeCommand) this.executeCommand.prepare = prepare;\n    return this.successEnd(prepare);\n  }\n\n  /**\n   * Read COM_STMT_PREPARE response Packet.\n   * see https://mariadb.com/kb/en/library/com_stmt_prepare/#com_stmt_prepare-response\n   *\n   * @param packet    COM_STMT_PREPARE_OK packet\n   * @param opts      connection options\n   * @param info      connection information\n   * @param out       output writer\n   * @returns {*}     null or {Result.readResponsePacket} in case of multi-result-set\n   */\n  readPrepareResultPacket(packet, out, opts, info) {\n    switch (packet.peek()) {\n      //*********************************************************************************************************\n      //* PREPARE response\n      //*********************************************************************************************************\n      case 0x00:\n        packet.skip(1); //skip header\n        this.statementId = packet.readInt32();\n        this.columnNo = packet.readUInt16();\n        this.parameterCount = packet.readUInt16();\n        this._parameterNo = this.parameterCount;\n        this._columns = [];\n        if (this._parameterNo > 0) return this.onPacketReceive = this.skipPrepareParameterPacket;\n        if (this.columnNo > 0) return this.onPacketReceive = this.readPrepareColumnsPacket;\n        return this.successPrepare(info, opts);\n\n      //*********************************************************************************************************\n      //* ERROR response\n      //*********************************************************************************************************\n      case 0xff:\n        const err = packet.readError(info, this.displaySql(), this.stack);\n        //force in transaction status, since query will have created a transaction if autocommit is off\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        this.onPacketReceive = this.readResponsePacket;\n        return this.throwError(err, info);\n\n      //*********************************************************************************************************\n      //* Unexpected response\n      //*********************************************************************************************************\n      default:\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        this.onPacketReceive = this.readResponsePacket;\n        return this.throwError(Errors.ER_UNEXPECTED_PACKET, info);\n    }\n  }\n  readPrepareColumnsPacket(packet, out, opts, info) {\n    this.columnNo--;\n    this._columns.push(new ColumnDefinition(packet, info, opts.rowsAsArray));\n    if (this.columnNo === 0) {\n      if (info.eofDeprecated) {\n        return this.successPrepare(info, opts);\n      }\n      return this.onPacketReceive = this.skipEofPacket;\n    }\n  }\n  skipEofPacket(packet, out, opts, info) {\n    if (this.columnNo > 0) return this.onPacketReceive = this.readPrepareColumnsPacket;\n    return this.successPrepare(info, opts);\n  }\n  skipPrepareParameterPacket(packet, out, opts, info) {\n    this._parameterNo--;\n    if (this._parameterNo === 0) {\n      if (info.eofDeprecated) {\n        if (this.columnNo > 0) return this.onPacketReceive = this.readPrepareColumnsPacket;\n        return this.successPrepare(info, opts);\n      }\n      return this.onPacketReceive = this.skipEofPacket;\n    }\n  }\n\n  /**\n   * Display current SQL with parameters (truncated if too big)\n   *\n   * @returns {string}\n   */\n  displaySql() {\n    if (this.opts) {\n      if (this.sql.length > this.opts.debugLen) {\n        return this.sql.substring(0, this.opts.debugLen) + '...';\n      }\n    }\n    return this.sql;\n  }\n}\nmodule.exports = Prepare;","map":{"version":3,"names":["Parser","require","Parse","BinaryEncoder","PrepareCacheWrapper","PrepareResult","ServerStatus","Errors","ColumnDefinition","Prepare","constructor","resolve","reject","connOpts","cmdParam","conn","encoder","opts","binary","executeCommand","start","out","info","prepareCache","cachedPrepare","get","sql","emit","successEnd","logger","query","onPacketReceive","readPrepareResultPacket","namedPlaceholders","res","searchPlaceholder","placeHolderIndex","startPacket","writeInt8","writeString","flush","successPrepare","prepare","statementId","parameterCount","_columns","database","cached","set","cachedWrappedPrepared","incrementUse","packet","peek","skip","readInt32","columnNo","readUInt16","_parameterNo","skipPrepareParameterPacket","readPrepareColumnsPacket","err","readError","displaySql","stack","status","STATUS_IN_TRANS","readResponsePacket","throwError","ER_UNEXPECTED_PACKET","push","rowsAsArray","eofDeprecated","skipEofPacket","length","debugLen","substring","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/cmd/prepare.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\nconst Parser = require('./parser');\nconst Parse = require('../misc/parse');\nconst BinaryEncoder = require('./encoder/binary-encoder');\nconst PrepareCacheWrapper = require('./class/prepare-cache-wrapper');\nconst PrepareResult = require('./class/prepare-result-packet');\nconst ServerStatus = require('../const/server-status');\nconst Errors = require('../misc/errors');\nconst ColumnDefinition = require('./column-definition');\n\n/**\n * send a COM_STMT_PREPARE: permits sending a prepare packet\n * see https://mariadb.com/kb/en/com_stmt_prepare/\n */\nclass Prepare extends Parser {\n  constructor(resolve, reject, connOpts, cmdParam, conn) {\n    super(resolve, reject, connOpts, cmdParam);\n    this.encoder = new BinaryEncoder(this.opts);\n    this.binary = true;\n    this.conn = conn;\n    this.executeCommand = cmdParam.executeCommand;\n  }\n\n  /**\n   * Send COM_STMT_PREPARE\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    // check in cache if enabled\n    if (this.conn.prepareCache) {\n      let cachedPrepare = this.conn.prepareCache.get(this.sql);\n      if (cachedPrepare) {\n        this.emit('send_end');\n        return this.successEnd(cachedPrepare);\n      }\n    }\n    if (opts.logger.query) opts.logger.query(`PREPARE: ${this.sql}`);\n    this.onPacketReceive = this.readPrepareResultPacket;\n\n    if (this.opts.namedPlaceholders) {\n      const res = Parse.searchPlaceholder(this.sql);\n      this.sql = res.sql;\n      this.placeHolderIndex = res.placeHolderIndex;\n    }\n\n    out.startPacket(this);\n    out.writeInt8(0x16);\n    out.writeString(this.sql);\n    out.flush();\n    this.emit('send_end');\n  }\n\n  successPrepare(info, opts) {\n    let prepare = new PrepareResult(\n      this.statementId,\n      this.parameterCount,\n      this._columns,\n      info.database,\n      this.sql,\n      this.placeHolderIndex,\n      this.conn\n    );\n\n    if (this.conn.prepareCache) {\n      let cached = new PrepareCacheWrapper(prepare);\n      this.conn.prepareCache.set(this.sql, cached);\n      const cachedWrappedPrepared = cached.incrementUse();\n      if (this.executeCommand) this.executeCommand.prepare = cachedWrappedPrepared;\n      return this.successEnd(cachedWrappedPrepared);\n    }\n    if (this.executeCommand) this.executeCommand.prepare = prepare;\n    return this.successEnd(prepare);\n  }\n\n  /**\n   * Read COM_STMT_PREPARE response Packet.\n   * see https://mariadb.com/kb/en/library/com_stmt_prepare/#com_stmt_prepare-response\n   *\n   * @param packet    COM_STMT_PREPARE_OK packet\n   * @param opts      connection options\n   * @param info      connection information\n   * @param out       output writer\n   * @returns {*}     null or {Result.readResponsePacket} in case of multi-result-set\n   */\n  readPrepareResultPacket(packet, out, opts, info) {\n    switch (packet.peek()) {\n      //*********************************************************************************************************\n      //* PREPARE response\n      //*********************************************************************************************************\n      case 0x00:\n        packet.skip(1); //skip header\n        this.statementId = packet.readInt32();\n        this.columnNo = packet.readUInt16();\n        this.parameterCount = packet.readUInt16();\n        this._parameterNo = this.parameterCount;\n        this._columns = [];\n        if (this._parameterNo > 0) return (this.onPacketReceive = this.skipPrepareParameterPacket);\n        if (this.columnNo > 0) return (this.onPacketReceive = this.readPrepareColumnsPacket);\n        return this.successPrepare(info, opts);\n\n      //*********************************************************************************************************\n      //* ERROR response\n      //*********************************************************************************************************\n      case 0xff:\n        const err = packet.readError(info, this.displaySql(), this.stack);\n        //force in transaction status, since query will have created a transaction if autocommit is off\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        this.onPacketReceive = this.readResponsePacket;\n        return this.throwError(err, info);\n\n      //*********************************************************************************************************\n      //* Unexpected response\n      //*********************************************************************************************************\n      default:\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        this.onPacketReceive = this.readResponsePacket;\n        return this.throwError(Errors.ER_UNEXPECTED_PACKET, info);\n    }\n  }\n\n  readPrepareColumnsPacket(packet, out, opts, info) {\n    this.columnNo--;\n    this._columns.push(new ColumnDefinition(packet, info, opts.rowsAsArray));\n    if (this.columnNo === 0) {\n      if (info.eofDeprecated) {\n        return this.successPrepare(info, opts);\n      }\n      return (this.onPacketReceive = this.skipEofPacket);\n    }\n  }\n\n  skipEofPacket(packet, out, opts, info) {\n    if (this.columnNo > 0) return (this.onPacketReceive = this.readPrepareColumnsPacket);\n    return this.successPrepare(info, opts);\n  }\n\n  skipPrepareParameterPacket(packet, out, opts, info) {\n    this._parameterNo--;\n    if (this._parameterNo === 0) {\n      if (info.eofDeprecated) {\n        if (this.columnNo > 0) return (this.onPacketReceive = this.readPrepareColumnsPacket);\n        return this.successPrepare(info, opts);\n      }\n      return (this.onPacketReceive = this.skipEofPacket);\n    }\n  }\n\n  /**\n   * Display current SQL with parameters (truncated if too big)\n   *\n   * @returns {string}\n   */\n  displaySql() {\n    if (this.opts) {\n      if (this.sql.length > this.opts.debugLen) {\n        return this.sql.substring(0, this.opts.debugLen) + '...';\n      }\n    }\n    return this.sql;\n  }\n}\n\nmodule.exports = Prepare;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
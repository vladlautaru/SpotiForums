{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\nconst PluginAuth = require('./plugin-auth');\nconst InitialHandshake = require('./initial-handshake');\nconst ClientCapabilities = require('../client-capabilities');\nconst Capabilities = require('../../../const/capabilities');\nconst SslRequest = require('../ssl-request');\nconst Errors = require('../../../misc/errors');\nconst NativePasswordAuth = require('./native-password-auth');\nconst os = require('os');\nconst Iconv = require('iconv-lite');\nconst Crypto = require('crypto');\nconst driverVersion = require('../../../../package.json').version;\n\n/**\n * Handshake response\n */\nclass Handshake extends PluginAuth {\n  constructor(auth, getSocket, multiAuthResolver, reject) {\n    super(null, multiAuthResolver, reject);\n    this.sequenceNo = 0;\n    this.compressSequenceNo = 0;\n    this.auth = auth;\n    this.getSocket = getSocket;\n    this.counter = 0;\n    this.onPacketReceive = this.parseHandshakeInit;\n  }\n  start(out, opts, info) {}\n  parseHandshakeInit(packet, out, opts, info) {\n    if (packet.peek() === 0xff) {\n      //in case that some host is not permit to connect server\n      const authErr = packet.readError(info);\n      authErr.fatal = true;\n      return this.throwError(authErr, info);\n    }\n    let handshake = new InitialHandshake(packet, info);\n    ClientCapabilities.init(opts, info);\n    this.pluginName = handshake.pluginName;\n    if (opts.ssl) {\n      if (info.serverCapabilities & Capabilities.SSL) {\n        info.clientCapabilities |= Capabilities.SSL;\n        SslRequest.send(this, out, info, opts);\n        this.auth._createSecureContext(info, () => {\n          // mark self-signed error only if was not explicitly forced\n          const secureSocket = this.getSocket();\n          info.selfSignedCertificate = !secureSocket.authorized;\n          info.tlsAuthorizationError = secureSocket.authorizationError;\n          const serverCert = secureSocket.getPeerCertificate(false);\n          info.tlsFingerprint = serverCert ? serverCert.fingerprint256.replace(/:/gi, '').toLowerCase() : null;\n          Handshake.send.call(this, this, out, opts, handshake.pluginName, info);\n        });\n      } else {\n        return this.throwNewError('Trying to connect with ssl, but ssl not enabled in the server', true, info, '08S01', Errors.ER_SERVER_SSL_DISABLED);\n      }\n    } else {\n      Handshake.send(this, out, opts, handshake.pluginName, info);\n    }\n    this.onPacketReceive = this.auth.handshakeResult.bind(this.auth);\n  }\n  permitHash() {\n    return this.pluginName !== 'mysql_clear_password';\n  }\n  hash(conf) {\n    // mysql_native_password hash\n    let hash = Crypto.createHash('sha1');\n    let stage1 = hash.update(conf.password, 'utf8').digest();\n    hash = Crypto.createHash('sha1');\n    return hash.update(stage1).digest();\n  }\n\n  /**\n   * Send Handshake response packet\n   * see https://mariadb.com/kb/en/library/1-connecting-connecting/#handshake-response-packet\n   *\n   * @param cmd         current handshake command\n   * @param out         output writer\n   * @param opts        connection options\n   * @param pluginName  plugin name\n   * @param info        connection information\n   */\n  static send(cmd, out, opts, pluginName, info) {\n    out.startPacket(cmd);\n    info.defaultPluginName = pluginName;\n    const pwd = Array.isArray(opts.password) ? opts.password[0] : opts.password;\n    let authToken;\n    let authPlugin;\n    switch (pluginName) {\n      case 'mysql_clear_password':\n        authToken = Buffer.from(pwd);\n        authPlugin = 'mysql_clear_password';\n        break;\n      default:\n        authToken = NativePasswordAuth.encryptSha1Password(pwd, info.seed);\n        authPlugin = 'mysql_native_password';\n        break;\n    }\n    out.writeInt32(Number(info.clientCapabilities & BigInt(0xffffffff)));\n    out.writeInt32(1024 * 1024 * 1024); // max packet size\n\n    // if collation and id < 255, set it directly\n    // is not, additional command SET NAMES xx [COLLATE yy] will be issued\n    out.writeInt8(opts.collation && opts.collation.index <= 255 ? opts.collation.index : 224);\n    for (let i = 0; i < 19; i++) {\n      out.writeInt8(0);\n    }\n    out.writeInt32(Number(info.clientCapabilities >> 32n));\n\n    //null encoded user\n    out.writeString(opts.user || '');\n    out.writeInt8(0);\n    if (info.serverCapabilities & Capabilities.PLUGIN_AUTH_LENENC_CLIENT_DATA) {\n      out.writeLengthCoded(authToken.length);\n      out.writeBuffer(authToken, 0, authToken.length);\n    } else if (info.serverCapabilities & Capabilities.SECURE_CONNECTION) {\n      out.writeInt8(authToken.length);\n      out.writeBuffer(authToken, 0, authToken.length);\n    } else {\n      out.writeBuffer(authToken, 0, authToken.length);\n      out.writeInt8(0);\n    }\n    if (info.clientCapabilities & Capabilities.CONNECT_WITH_DB) {\n      out.writeString(opts.database);\n      out.writeInt8(0);\n      info.database = opts.database;\n    }\n    if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n      out.writeString(authPlugin);\n      out.writeInt8(0);\n    }\n    if (info.clientCapabilities & Capabilities.CONNECT_ATTRS) {\n      out.writeInt8(0xfc);\n      let initPos = out.pos; //save position, assuming connection attributes length will be less than 2 bytes length\n      out.writeInt16(0);\n      const encoding = info.collation ? info.collation.charset : 'utf8';\n      Handshake.writeAttribute(out, '_client_name', encoding);\n      Handshake.writeAttribute(out, 'MariaDB connector/Node', encoding);\n      Handshake.writeAttribute(out, '_client_version', encoding);\n      Handshake.writeAttribute(out, driverVersion, encoding);\n      const address = cmd.getSocket().address().address;\n      if (address) {\n        Handshake.writeAttribute(out, '_server_host', encoding);\n        Handshake.writeAttribute(out, address, encoding);\n      }\n      Handshake.writeAttribute(out, '_os', encoding);\n      Handshake.writeAttribute(out, process.platform, encoding);\n      Handshake.writeAttribute(out, '_client_host', encoding);\n      Handshake.writeAttribute(out, os.hostname(), encoding);\n      Handshake.writeAttribute(out, '_node_version', encoding);\n      Handshake.writeAttribute(out, process.versions.node, encoding);\n      if (opts.connectAttributes !== true) {\n        let attrNames = Object.keys(opts.connectAttributes);\n        for (let k = 0; k < attrNames.length; ++k) {\n          Handshake.writeAttribute(out, attrNames[k], encoding);\n          Handshake.writeAttribute(out, opts.connectAttributes[attrNames[k]], encoding);\n        }\n      }\n\n      //write end size\n      out.writeInt16AtPos(initPos);\n    }\n    out.flushPacket();\n  }\n  static writeAttribute(out, val, encoding) {\n    let param = Buffer.isEncoding(encoding) ? Buffer.from(val, encoding) : Iconv.encode(val, encoding);\n    out.writeLengthCoded(param.length);\n    out.writeBuffer(param, 0, param.length);\n  }\n}\nmodule.exports = Handshake;","map":{"version":3,"names":["PluginAuth","require","InitialHandshake","ClientCapabilities","Capabilities","SslRequest","Errors","NativePasswordAuth","os","Iconv","Crypto","driverVersion","version","Handshake","constructor","auth","getSocket","multiAuthResolver","reject","sequenceNo","compressSequenceNo","counter","onPacketReceive","parseHandshakeInit","start","out","opts","info","packet","peek","authErr","readError","fatal","throwError","handshake","init","pluginName","ssl","serverCapabilities","SSL","clientCapabilities","send","_createSecureContext","secureSocket","selfSignedCertificate","authorized","tlsAuthorizationError","authorizationError","serverCert","getPeerCertificate","tlsFingerprint","fingerprint256","replace","toLowerCase","call","throwNewError","ER_SERVER_SSL_DISABLED","handshakeResult","bind","permitHash","hash","conf","createHash","stage1","update","password","digest","cmd","startPacket","defaultPluginName","pwd","Array","isArray","authToken","authPlugin","Buffer","from","encryptSha1Password","seed","writeInt32","Number","BigInt","writeInt8","collation","index","i","writeString","user","PLUGIN_AUTH_LENENC_CLIENT_DATA","writeLengthCoded","length","writeBuffer","SECURE_CONNECTION","CONNECT_WITH_DB","database","PLUGIN_AUTH","CONNECT_ATTRS","initPos","pos","writeInt16","encoding","charset","writeAttribute","address","process","platform","hostname","versions","node","connectAttributes","attrNames","Object","keys","k","writeInt16AtPos","flushPacket","val","param","isEncoding","encode","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/cmd/handshake/auth/handshake.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\nconst PluginAuth = require('./plugin-auth');\nconst InitialHandshake = require('./initial-handshake');\nconst ClientCapabilities = require('../client-capabilities');\nconst Capabilities = require('../../../const/capabilities');\nconst SslRequest = require('../ssl-request');\nconst Errors = require('../../../misc/errors');\nconst NativePasswordAuth = require('./native-password-auth');\nconst os = require('os');\nconst Iconv = require('iconv-lite');\nconst Crypto = require('crypto');\nconst driverVersion = require('../../../../package.json').version;\n\n/**\n * Handshake response\n */\nclass Handshake extends PluginAuth {\n  constructor(auth, getSocket, multiAuthResolver, reject) {\n    super(null, multiAuthResolver, reject);\n    this.sequenceNo = 0;\n    this.compressSequenceNo = 0;\n    this.auth = auth;\n    this.getSocket = getSocket;\n    this.counter = 0;\n    this.onPacketReceive = this.parseHandshakeInit;\n  }\n\n  start(out, opts, info) {}\n\n  parseHandshakeInit(packet, out, opts, info) {\n    if (packet.peek() === 0xff) {\n      //in case that some host is not permit to connect server\n      const authErr = packet.readError(info);\n      authErr.fatal = true;\n      return this.throwError(authErr, info);\n    }\n\n    let handshake = new InitialHandshake(packet, info);\n    ClientCapabilities.init(opts, info);\n    this.pluginName = handshake.pluginName;\n    if (opts.ssl) {\n      if (info.serverCapabilities & Capabilities.SSL) {\n        info.clientCapabilities |= Capabilities.SSL;\n        SslRequest.send(this, out, info, opts);\n        this.auth._createSecureContext(info, () => {\n          // mark self-signed error only if was not explicitly forced\n          const secureSocket = this.getSocket();\n          info.selfSignedCertificate = !secureSocket.authorized;\n          info.tlsAuthorizationError = secureSocket.authorizationError;\n          const serverCert = secureSocket.getPeerCertificate(false);\n          info.tlsFingerprint = serverCert ? serverCert.fingerprint256.replace(/:/gi, '').toLowerCase() : null;\n\n          Handshake.send.call(this, this, out, opts, handshake.pluginName, info);\n        });\n      } else {\n        return this.throwNewError(\n          'Trying to connect with ssl, but ssl not enabled in the server',\n          true,\n          info,\n          '08S01',\n          Errors.ER_SERVER_SSL_DISABLED\n        );\n      }\n    } else {\n      Handshake.send(this, out, opts, handshake.pluginName, info);\n    }\n    this.onPacketReceive = this.auth.handshakeResult.bind(this.auth);\n  }\n\n  permitHash() {\n    return this.pluginName !== 'mysql_clear_password';\n  }\n\n  hash(conf) {\n    // mysql_native_password hash\n    let hash = Crypto.createHash('sha1');\n    let stage1 = hash.update(conf.password, 'utf8').digest();\n    hash = Crypto.createHash('sha1');\n    return hash.update(stage1).digest();\n  }\n\n  /**\n   * Send Handshake response packet\n   * see https://mariadb.com/kb/en/library/1-connecting-connecting/#handshake-response-packet\n   *\n   * @param cmd         current handshake command\n   * @param out         output writer\n   * @param opts        connection options\n   * @param pluginName  plugin name\n   * @param info        connection information\n   */\n  static send(cmd, out, opts, pluginName, info) {\n    out.startPacket(cmd);\n    info.defaultPluginName = pluginName;\n    const pwd = Array.isArray(opts.password) ? opts.password[0] : opts.password;\n    let authToken;\n    let authPlugin;\n    switch (pluginName) {\n      case 'mysql_clear_password':\n        authToken = Buffer.from(pwd);\n        authPlugin = 'mysql_clear_password';\n        break;\n\n      default:\n        authToken = NativePasswordAuth.encryptSha1Password(pwd, info.seed);\n        authPlugin = 'mysql_native_password';\n        break;\n    }\n    out.writeInt32(Number(info.clientCapabilities & BigInt(0xffffffff)));\n    out.writeInt32(1024 * 1024 * 1024); // max packet size\n\n    // if collation and id < 255, set it directly\n    // is not, additional command SET NAMES xx [COLLATE yy] will be issued\n    out.writeInt8(opts.collation && opts.collation.index <= 255 ? opts.collation.index : 224);\n    for (let i = 0; i < 19; i++) {\n      out.writeInt8(0);\n    }\n\n    out.writeInt32(Number(info.clientCapabilities >> 32n));\n\n    //null encoded user\n    out.writeString(opts.user || '');\n    out.writeInt8(0);\n\n    if (info.serverCapabilities & Capabilities.PLUGIN_AUTH_LENENC_CLIENT_DATA) {\n      out.writeLengthCoded(authToken.length);\n      out.writeBuffer(authToken, 0, authToken.length);\n    } else if (info.serverCapabilities & Capabilities.SECURE_CONNECTION) {\n      out.writeInt8(authToken.length);\n      out.writeBuffer(authToken, 0, authToken.length);\n    } else {\n      out.writeBuffer(authToken, 0, authToken.length);\n      out.writeInt8(0);\n    }\n\n    if (info.clientCapabilities & Capabilities.CONNECT_WITH_DB) {\n      out.writeString(opts.database);\n      out.writeInt8(0);\n      info.database = opts.database;\n    }\n\n    if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n      out.writeString(authPlugin);\n      out.writeInt8(0);\n    }\n\n    if (info.clientCapabilities & Capabilities.CONNECT_ATTRS) {\n      out.writeInt8(0xfc);\n      let initPos = out.pos; //save position, assuming connection attributes length will be less than 2 bytes length\n      out.writeInt16(0);\n      const encoding = info.collation ? info.collation.charset : 'utf8';\n\n      Handshake.writeAttribute(out, '_client_name', encoding);\n      Handshake.writeAttribute(out, 'MariaDB connector/Node', encoding);\n\n      Handshake.writeAttribute(out, '_client_version', encoding);\n      Handshake.writeAttribute(out, driverVersion, encoding);\n\n      const address = cmd.getSocket().address().address;\n      if (address) {\n        Handshake.writeAttribute(out, '_server_host', encoding);\n        Handshake.writeAttribute(out, address, encoding);\n      }\n\n      Handshake.writeAttribute(out, '_os', encoding);\n      Handshake.writeAttribute(out, process.platform, encoding);\n\n      Handshake.writeAttribute(out, '_client_host', encoding);\n      Handshake.writeAttribute(out, os.hostname(), encoding);\n\n      Handshake.writeAttribute(out, '_node_version', encoding);\n      Handshake.writeAttribute(out, process.versions.node, encoding);\n\n      if (opts.connectAttributes !== true) {\n        let attrNames = Object.keys(opts.connectAttributes);\n        for (let k = 0; k < attrNames.length; ++k) {\n          Handshake.writeAttribute(out, attrNames[k], encoding);\n          Handshake.writeAttribute(out, opts.connectAttributes[attrNames[k]], encoding);\n        }\n      }\n\n      //write end size\n      out.writeInt16AtPos(initPos);\n    }\n\n    out.flushPacket();\n  }\n\n  static writeAttribute(out, val, encoding) {\n    let param = Buffer.isEncoding(encoding) ? Buffer.from(val, encoding) : Iconv.encode(val, encoding);\n    out.writeLengthCoded(param.length);\n    out.writeBuffer(param, 0, param.length);\n  }\n}\n\nmodule.exports = Handshake;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
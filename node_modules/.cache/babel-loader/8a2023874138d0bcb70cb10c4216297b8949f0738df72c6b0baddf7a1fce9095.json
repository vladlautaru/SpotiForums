{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n/**\n * Similar to pool cluster with pre-set pattern and selector.\n * Additional method query\n *\n * @param poolCluster    cluster\n * @param patternArg     pre-set pattern\n * @param selectorArg    pre-set selector\n * @constructor\n */\nclass FilteredCluster {\n  #cluster;\n  #pattern;\n  #selector;\n  constructor(poolCluster, patternArg, selectorArg) {\n    this.#cluster = poolCluster;\n    this.#pattern = patternArg;\n    this.#selector = selectorArg;\n  }\n\n  /**\n   * Get a connection according to previously indicated pattern and selector.\n   *\n   * @return {Promise}\n   */\n  getConnection() {\n    return this.#cluster.getConnection(this.#pattern, this.#selector);\n  }\n\n  /**\n   * Execute a text query on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command (not mandatory)\n   * @return {Promise}\n   */\n  query(sql, value) {\n    return this.#cluster.getConnection(this.#pattern, this.#selector).then(conn => {\n      return conn.query(sql, value).then(res => {\n        conn.release();\n        return res;\n      }).catch(err => {\n        conn.release();\n        return Promise.reject(err);\n      });\n    }).catch(err => {\n      return Promise.reject(err);\n    });\n  }\n\n  /**\n   * Execute a binary query on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command (not mandatory)\n   * @return {Promise}\n   */\n  execute(sql, value) {\n    return this.#cluster.getConnection(this.#pattern, this.#selector).then(conn => {\n      return conn.execute(sql, value).then(res => {\n        conn.release();\n        return res;\n      }).catch(err => {\n        conn.release();\n        return Promise.reject(err);\n      });\n    }).catch(err => {\n      return Promise.reject(err);\n    });\n  }\n\n  /**\n   * Execute a batch on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command\n   * @return {Promise}\n   */\n  batch(sql, value) {\n    return this.#cluster.getConnection(this.#pattern, this.#selector).then(conn => {\n      return conn.batch(sql, value).then(res => {\n        conn.release();\n        return res;\n      }).catch(err => {\n        conn.release();\n        return Promise.reject(err);\n      });\n    }).catch(err => {\n      return Promise.reject(err);\n    });\n  }\n}\nmodule.exports = FilteredCluster;","map":{"version":3,"names":["FilteredCluster","cluster","pattern","selector","constructor","poolCluster","patternArg","selectorArg","getConnection","query","sql","value","then","conn","res","release","catch","err","Promise","reject","execute","batch","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/filtered-cluster.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n/**\n * Similar to pool cluster with pre-set pattern and selector.\n * Additional method query\n *\n * @param poolCluster    cluster\n * @param patternArg     pre-set pattern\n * @param selectorArg    pre-set selector\n * @constructor\n */\nclass FilteredCluster {\n  #cluster;\n  #pattern;\n  #selector;\n\n  constructor(poolCluster, patternArg, selectorArg) {\n    this.#cluster = poolCluster;\n    this.#pattern = patternArg;\n    this.#selector = selectorArg;\n  }\n\n  /**\n   * Get a connection according to previously indicated pattern and selector.\n   *\n   * @return {Promise}\n   */\n  getConnection() {\n    return this.#cluster.getConnection(this.#pattern, this.#selector);\n  }\n\n  /**\n   * Execute a text query on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command (not mandatory)\n   * @return {Promise}\n   */\n  query(sql, value) {\n    return this.#cluster\n      .getConnection(this.#pattern, this.#selector)\n      .then((conn) => {\n        return conn\n          .query(sql, value)\n          .then((res) => {\n            conn.release();\n            return res;\n          })\n          .catch((err) => {\n            conn.release();\n            return Promise.reject(err);\n          });\n      })\n      .catch((err) => {\n        return Promise.reject(err);\n      });\n  }\n\n  /**\n   * Execute a binary query on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command (not mandatory)\n   * @return {Promise}\n   */\n  execute(sql, value) {\n    return this.#cluster\n      .getConnection(this.#pattern, this.#selector)\n      .then((conn) => {\n        return conn\n          .execute(sql, value)\n          .then((res) => {\n            conn.release();\n            return res;\n          })\n          .catch((err) => {\n            conn.release();\n            return Promise.reject(err);\n          });\n      })\n      .catch((err) => {\n        return Promise.reject(err);\n      });\n  }\n\n  /**\n   * Execute a batch on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command\n   * @return {Promise}\n   */\n  batch(sql, value) {\n    return this.#cluster\n      .getConnection(this.#pattern, this.#selector)\n      .then((conn) => {\n        return conn\n          .batch(sql, value)\n          .then((res) => {\n            conn.release();\n            return res;\n          })\n          .catch((err) => {\n            conn.release();\n            return Promise.reject(err);\n          });\n      })\n      .catch((err) => {\n        return Promise.reject(err);\n      });\n  }\n}\n\nmodule.exports = FilteredCluster;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
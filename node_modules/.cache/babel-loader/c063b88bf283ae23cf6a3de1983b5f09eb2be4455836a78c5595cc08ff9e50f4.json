{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Command = require('../command');\nconst Errors = require('../../misc/errors');\nconst Capabilities = require('../../const/capabilities');\nconst Handshake = require('./auth/handshake');\nconst ServerStatus = require('../../const/server-status');\nconst StateChange = require('../../const/state-change');\nconst Collations = require('../../const/collations');\nconst Crypto = require('crypto');\nconst utils = require('../../misc/utils');\nconst authenticationPlugins = {\n  mysql_native_password: require('./auth/native-password-auth.js'),\n  mysql_clear_password: require('./auth/clear-password-auth'),\n  client_ed25519: require('./auth/ed25519-password-auth'),\n  dialog: require('./auth/pam-password-auth'),\n  sha256_password: require('./auth/sha256-password-auth'),\n  caching_sha2_password: require('./auth/caching-sha2-password-auth')\n};\n\n/**\n * Handle handshake.\n * see https://mariadb.com/kb/en/library/1-connecting-connecting/\n */\nclass Authentication extends Command {\n  constructor(cmdParam, resolve, reject, _createSecureContext, getSocket) {\n    super(cmdParam, resolve, reject);\n    this.cmdParam = cmdParam;\n    this._createSecureContext = _createSecureContext;\n    this.getSocket = getSocket;\n    this.plugin = new Handshake(this, getSocket, this.handshakeResult, reject);\n  }\n  onPacketReceive(packet, out, opts, info) {\n    this.plugin.sequenceNo = this.sequenceNo;\n    this.plugin.compressSequenceNo = this.compressSequenceNo;\n    this.plugin.onPacketReceive(packet, out, opts, info);\n  }\n\n  /**\n   * Fast-path handshake results :\n   *  - if plugin was the one expected by server, server will send OK_Packet / ERR_Packet.\n   *  - if not, server send an AuthSwitchRequest packet, indicating the specific PLUGIN to use with this user.\n   *    dispatching to plugin handler then.\n   *\n   * @param packet    current packet\n   * @param out       output buffer\n   * @param opts      options\n   * @param info      connection info\n   * @returns {*}     return null if authentication succeed, depending on plugin conversation if not finished\n   */\n  handshakeResult(packet, out, opts, info) {\n    const marker = packet.peek();\n    switch (marker) {\n      //*********************************************************************************************************\n      //* AuthSwitchRequest packet\n      //*********************************************************************************************************\n      case 0xfe:\n        this.dispatchAuthSwitchRequest(packet, out, opts, info);\n        return;\n\n      //*********************************************************************************************************\n      //* OK_Packet - authentication succeeded\n      //*********************************************************************************************************\n      case 0x00:\n        this.plugin.onPacketReceive = null;\n        packet.skip(1); //skip header\n        packet.skipLengthCodedNumber(); //skip affected rows\n        packet.skipLengthCodedNumber(); //skip last insert id\n        info.status = packet.readUInt16();\n        if (info.requireValidCert && info.selfSignedCertificate) {\n          // TLS was forced to trust, and certificate validation is required\n          packet.skip(2); //skip warning count\n          if (packet.remaining()) {\n            const validationHash = packet.readBufferLengthEncoded();\n            if (validationHash.length > 0) {\n              if (!this.plugin.permitHash() || !this.cmdParam.opts.password || this.cmdParam.opts.password === '') {\n                return this.throwNewError('Self signed certificates. Either set `ssl: { rejectUnauthorized: false }` (trust mode) or provide server certificate to client', true, info, '08000', Errors.ER_SELF_SIGNED_NO_PWD);\n              }\n              if (this.validateFingerPrint(validationHash, info)) {\n                return this.successEnd();\n              }\n            }\n          }\n          return this.throwNewError('self-signed certificate', true, info, '08000', Errors.ER_SELF_SIGNED);\n        }\n        let mustRedirect = false;\n        if (info.status & ServerStatus.SESSION_STATE_CHANGED) {\n          packet.skip(2); //skip warning count\n          packet.skipLengthCodedNumber();\n          while (packet.remaining()) {\n            const len = packet.readUnsignedLength();\n            if (len > 0) {\n              const subPacket = packet.subPacketLengthEncoded(len);\n              while (subPacket.remaining()) {\n                const type = subPacket.readUInt8();\n                switch (type) {\n                  case StateChange.SESSION_TRACK_SYSTEM_VARIABLES:\n                    let subSubPacket;\n                    do {\n                      subSubPacket = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                      const variable = subSubPacket.readStringLengthEncoded();\n                      const value = subSubPacket.readStringLengthEncoded();\n                      switch (variable) {\n                        case 'character_set_client':\n                          info.collation = Collations.fromCharset(value);\n                          if (info.collation === undefined) {\n                            this.throwError(new Error(\"unknown charset : '\" + value + \"'\"), info);\n                            return;\n                          }\n                          opts.emit('collation', info.collation);\n                          break;\n                        case 'redirect_url':\n                          mustRedirect = true;\n                          info.redirect(value, this.successEnd);\n                          break;\n                        case 'maxscale':\n                          info.maxscaleVersion = value;\n                          break;\n                        case 'connection_id':\n                          info.threadId = parseInt(value);\n                          break;\n                        default:\n                        //variable not used by driver\n                      }\n                    } while (subSubPacket.remaining() > 0);\n                    break;\n                  case StateChange.SESSION_TRACK_SCHEMA:\n                    const subSubPacket2 = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                    info.database = subSubPacket2.readStringLengthEncoded();\n                    break;\n                }\n              }\n            }\n          }\n        }\n        if (!mustRedirect) this.successEnd();\n        return;\n\n      //*********************************************************************************************************\n      //* ERR_Packet\n      //*********************************************************************************************************\n      case 0xff:\n        this.plugin.onPacketReceive = null;\n        const authErr = packet.readError(info, this.displaySql(), undefined);\n        authErr.fatal = true;\n        return this.plugin.throwError(authErr, info);\n\n      //*********************************************************************************************************\n      //* unexpected\n      //*********************************************************************************************************\n      default:\n        this.throwNewError(`Unexpected type of packet during handshake phase : ${marker}`, true, info, '42000', Errors.ER_AUTHENTICATION_BAD_PACKET);\n    }\n  }\n  validateFingerPrint(validationHash, info) {\n    if (validationHash.length === 0 || !info.tlsFingerprint) return false;\n\n    // 0x01 = SHA256 encryption\n    if (validationHash[0] !== 0x01) {\n      const err = Errors.createFatalError(`Unexpected hash format for fingerprint hash encoding`, Errors.ER_UNEXPECTED_PACKET, this.info);\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      return false;\n    }\n    const pwdHash = this.plugin.hash(this.cmdParam.opts);\n    let hash = Crypto.createHash('sha256');\n    let digest = hash.update(pwdHash).update(info.seed).update(Buffer.from(info.tlsFingerprint, 'hex')).digest();\n    const hashHex = utils.toHexString(digest);\n    const serverValidationHex = validationHash.toString('ascii', 1, validationHash.length).toLowerCase();\n    return hashHex === serverValidationHex;\n  }\n\n  /**\n   * Handle authentication switch request : dispatch to plugin handler.\n   *\n   * @param packet  packet\n   * @param out     output writer\n   * @param opts    options\n   * @param info    connection information\n   */\n  dispatchAuthSwitchRequest(packet, out, opts, info) {\n    let pluginName, pluginData;\n    if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n      packet.skip(1); //header\n      if (packet.remaining()) {\n        //AuthSwitchRequest packet.\n        pluginName = packet.readStringNullEnded();\n        pluginData = packet.readBufferRemaining();\n      } else {\n        //OldAuthSwitchRequest\n        pluginName = 'mysql_old_password';\n        pluginData = info.seed.subarray(0, 8);\n      }\n    } else {\n      pluginName = packet.readStringNullEnded('ascii');\n      pluginData = packet.readBufferRemaining();\n    }\n    if (opts.restrictedAuth && !opts.restrictedAuth.includes(pluginName)) {\n      this.throwNewError(`Unsupported authentication plugin ${pluginName}. Authorized plugin: ${opts.restrictedAuth.toString()}`, true, info, '42000', Errors.ER_NOT_SUPPORTED_AUTH_PLUGIN);\n      return;\n    }\n    try {\n      this.plugin.emit('end');\n      this.plugin.onPacketReceive = null;\n      this.plugin = Authentication.pluginHandler(pluginName, this.plugin.sequenceNo, this.plugin.compressSequenceNo, pluginData, info, opts, out, this.cmdParam, this.reject, this.handshakeResult.bind(this));\n      this.plugin.start(out, opts, info);\n    } catch (err) {\n      this.reject(err);\n    }\n  }\n  static pluginHandler(pluginName, packSeq, compressPackSeq, pluginData, info, opts, out, cmdParam, authReject, multiAuthResolver) {\n    let pluginAuth = authenticationPlugins[pluginName];\n    if (!pluginAuth) {\n      throw Errors.createFatalError(`Client does not support authentication protocol '${pluginName}' requested by server.`, Errors.ER_AUTHENTICATION_PLUGIN_NOT_SUPPORTED, info, '08004');\n    }\n    return new pluginAuth(packSeq, compressPackSeq, pluginData, cmdParam, authReject, multiAuthResolver);\n  }\n}\nmodule.exports = Authentication;","map":{"version":3,"names":["Command","require","Errors","Capabilities","Handshake","ServerStatus","StateChange","Collations","Crypto","utils","authenticationPlugins","mysql_native_password","mysql_clear_password","client_ed25519","dialog","sha256_password","caching_sha2_password","Authentication","constructor","cmdParam","resolve","reject","_createSecureContext","getSocket","plugin","handshakeResult","onPacketReceive","packet","out","opts","info","sequenceNo","compressSequenceNo","marker","peek","dispatchAuthSwitchRequest","skip","skipLengthCodedNumber","status","readUInt16","requireValidCert","selfSignedCertificate","remaining","validationHash","readBufferLengthEncoded","length","permitHash","password","throwNewError","ER_SELF_SIGNED_NO_PWD","validateFingerPrint","successEnd","ER_SELF_SIGNED","mustRedirect","SESSION_STATE_CHANGED","len","readUnsignedLength","subPacket","subPacketLengthEncoded","type","readUInt8","SESSION_TRACK_SYSTEM_VARIABLES","subSubPacket","variable","readStringLengthEncoded","value","collation","fromCharset","undefined","throwError","Error","emit","redirect","maxscaleVersion","threadId","parseInt","SESSION_TRACK_SCHEMA","subSubPacket2","database","authErr","readError","displaySql","fatal","ER_AUTHENTICATION_BAD_PACKET","tlsFingerprint","err","createFatalError","ER_UNEXPECTED_PACKET","logger","error","pwdHash","hash","createHash","digest","update","seed","Buffer","from","hashHex","toHexString","serverValidationHex","toString","toLowerCase","pluginName","pluginData","clientCapabilities","PLUGIN_AUTH","readStringNullEnded","readBufferRemaining","subarray","restrictedAuth","includes","ER_NOT_SUPPORTED_AUTH_PLUGIN","pluginHandler","bind","start","packSeq","compressPackSeq","authReject","multiAuthResolver","pluginAuth","ER_AUTHENTICATION_PLUGIN_NOT_SUPPORTED","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/cmd/handshake/authentication.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst Command = require('../command');\nconst Errors = require('../../misc/errors');\nconst Capabilities = require('../../const/capabilities');\nconst Handshake = require('./auth/handshake');\nconst ServerStatus = require('../../const/server-status');\nconst StateChange = require('../../const/state-change');\nconst Collations = require('../../const/collations');\nconst Crypto = require('crypto');\nconst utils = require('../../misc/utils');\nconst authenticationPlugins = {\n  mysql_native_password: require('./auth/native-password-auth.js'),\n  mysql_clear_password: require('./auth/clear-password-auth'),\n  client_ed25519: require('./auth/ed25519-password-auth'),\n  dialog: require('./auth/pam-password-auth'),\n  sha256_password: require('./auth/sha256-password-auth'),\n  caching_sha2_password: require('./auth/caching-sha2-password-auth')\n};\n\n/**\n * Handle handshake.\n * see https://mariadb.com/kb/en/library/1-connecting-connecting/\n */\nclass Authentication extends Command {\n  constructor(cmdParam, resolve, reject, _createSecureContext, getSocket) {\n    super(cmdParam, resolve, reject);\n    this.cmdParam = cmdParam;\n    this._createSecureContext = _createSecureContext;\n    this.getSocket = getSocket;\n    this.plugin = new Handshake(this, getSocket, this.handshakeResult, reject);\n  }\n\n  onPacketReceive(packet, out, opts, info) {\n    this.plugin.sequenceNo = this.sequenceNo;\n    this.plugin.compressSequenceNo = this.compressSequenceNo;\n    this.plugin.onPacketReceive(packet, out, opts, info);\n  }\n\n  /**\n   * Fast-path handshake results :\n   *  - if plugin was the one expected by server, server will send OK_Packet / ERR_Packet.\n   *  - if not, server send an AuthSwitchRequest packet, indicating the specific PLUGIN to use with this user.\n   *    dispatching to plugin handler then.\n   *\n   * @param packet    current packet\n   * @param out       output buffer\n   * @param opts      options\n   * @param info      connection info\n   * @returns {*}     return null if authentication succeed, depending on plugin conversation if not finished\n   */\n  handshakeResult(packet, out, opts, info) {\n    const marker = packet.peek();\n    switch (marker) {\n      //*********************************************************************************************************\n      //* AuthSwitchRequest packet\n      //*********************************************************************************************************\n      case 0xfe:\n        this.dispatchAuthSwitchRequest(packet, out, opts, info);\n        return;\n\n      //*********************************************************************************************************\n      //* OK_Packet - authentication succeeded\n      //*********************************************************************************************************\n      case 0x00:\n        this.plugin.onPacketReceive = null;\n        packet.skip(1); //skip header\n        packet.skipLengthCodedNumber(); //skip affected rows\n        packet.skipLengthCodedNumber(); //skip last insert id\n        info.status = packet.readUInt16();\n\n        if (info.requireValidCert && info.selfSignedCertificate) {\n          // TLS was forced to trust, and certificate validation is required\n          packet.skip(2); //skip warning count\n          if (packet.remaining()) {\n            const validationHash = packet.readBufferLengthEncoded();\n            if (validationHash.length > 0) {\n              if (!this.plugin.permitHash() || !this.cmdParam.opts.password || this.cmdParam.opts.password === '') {\n                return this.throwNewError(\n                  'Self signed certificates. Either set `ssl: { rejectUnauthorized: false }` (trust mode) or provide server certificate to client',\n                  true,\n                  info,\n                  '08000',\n                  Errors.ER_SELF_SIGNED_NO_PWD\n                );\n              }\n              if (this.validateFingerPrint(validationHash, info)) {\n                return this.successEnd();\n              }\n            }\n          }\n          return this.throwNewError('self-signed certificate', true, info, '08000', Errors.ER_SELF_SIGNED);\n        }\n\n        let mustRedirect = false;\n        if (info.status & ServerStatus.SESSION_STATE_CHANGED) {\n          packet.skip(2); //skip warning count\n          packet.skipLengthCodedNumber();\n          while (packet.remaining()) {\n            const len = packet.readUnsignedLength();\n            if (len > 0) {\n              const subPacket = packet.subPacketLengthEncoded(len);\n              while (subPacket.remaining()) {\n                const type = subPacket.readUInt8();\n                switch (type) {\n                  case StateChange.SESSION_TRACK_SYSTEM_VARIABLES:\n                    let subSubPacket;\n                    do {\n                      subSubPacket = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                      const variable = subSubPacket.readStringLengthEncoded();\n                      const value = subSubPacket.readStringLengthEncoded();\n\n                      switch (variable) {\n                        case 'character_set_client':\n                          info.collation = Collations.fromCharset(value);\n                          if (info.collation === undefined) {\n                            this.throwError(new Error(\"unknown charset : '\" + value + \"'\"), info);\n                            return;\n                          }\n                          opts.emit('collation', info.collation);\n                          break;\n\n                        case 'redirect_url':\n                          mustRedirect = true;\n                          info.redirect(value, this.successEnd);\n                          break;\n\n                        case 'maxscale':\n                          info.maxscaleVersion = value;\n                          break;\n\n                        case 'connection_id':\n                          info.threadId = parseInt(value);\n                          break;\n\n                        default:\n                        //variable not used by driver\n                      }\n                    } while (subSubPacket.remaining() > 0);\n                    break;\n\n                  case StateChange.SESSION_TRACK_SCHEMA:\n                    const subSubPacket2 = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                    info.database = subSubPacket2.readStringLengthEncoded();\n                    break;\n                }\n              }\n            }\n          }\n        }\n        if (!mustRedirect) this.successEnd();\n        return;\n\n      //*********************************************************************************************************\n      //* ERR_Packet\n      //*********************************************************************************************************\n      case 0xff:\n        this.plugin.onPacketReceive = null;\n        const authErr = packet.readError(info, this.displaySql(), undefined);\n        authErr.fatal = true;\n        return this.plugin.throwError(authErr, info);\n\n      //*********************************************************************************************************\n      //* unexpected\n      //*********************************************************************************************************\n      default:\n        this.throwNewError(\n          `Unexpected type of packet during handshake phase : ${marker}`,\n          true,\n          info,\n          '42000',\n          Errors.ER_AUTHENTICATION_BAD_PACKET\n        );\n    }\n  }\n\n  validateFingerPrint(validationHash, info) {\n    if (validationHash.length === 0 || !info.tlsFingerprint) return false;\n\n    // 0x01 = SHA256 encryption\n    if (validationHash[0] !== 0x01) {\n      const err = Errors.createFatalError(\n        `Unexpected hash format for fingerprint hash encoding`,\n        Errors.ER_UNEXPECTED_PACKET,\n        this.info\n      );\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      return false;\n    }\n\n    const pwdHash = this.plugin.hash(this.cmdParam.opts);\n\n    let hash = Crypto.createHash('sha256');\n    let digest = hash.update(pwdHash).update(info.seed).update(Buffer.from(info.tlsFingerprint, 'hex')).digest();\n    const hashHex = utils.toHexString(digest);\n    const serverValidationHex = validationHash.toString('ascii', 1, validationHash.length).toLowerCase();\n    return hashHex === serverValidationHex;\n  }\n\n  /**\n   * Handle authentication switch request : dispatch to plugin handler.\n   *\n   * @param packet  packet\n   * @param out     output writer\n   * @param opts    options\n   * @param info    connection information\n   */\n  dispatchAuthSwitchRequest(packet, out, opts, info) {\n    let pluginName, pluginData;\n    if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n      packet.skip(1); //header\n      if (packet.remaining()) {\n        //AuthSwitchRequest packet.\n        pluginName = packet.readStringNullEnded();\n        pluginData = packet.readBufferRemaining();\n      } else {\n        //OldAuthSwitchRequest\n        pluginName = 'mysql_old_password';\n        pluginData = info.seed.subarray(0, 8);\n      }\n    } else {\n      pluginName = packet.readStringNullEnded('ascii');\n      pluginData = packet.readBufferRemaining();\n    }\n\n    if (opts.restrictedAuth && !opts.restrictedAuth.includes(pluginName)) {\n      this.throwNewError(\n        `Unsupported authentication plugin ${pluginName}. Authorized plugin: ${opts.restrictedAuth.toString()}`,\n        true,\n        info,\n        '42000',\n        Errors.ER_NOT_SUPPORTED_AUTH_PLUGIN\n      );\n      return;\n    }\n    try {\n      this.plugin.emit('end');\n      this.plugin.onPacketReceive = null;\n      this.plugin = Authentication.pluginHandler(\n        pluginName,\n        this.plugin.sequenceNo,\n        this.plugin.compressSequenceNo,\n        pluginData,\n        info,\n        opts,\n        out,\n        this.cmdParam,\n        this.reject,\n        this.handshakeResult.bind(this)\n      );\n      this.plugin.start(out, opts, info);\n    } catch (err) {\n      this.reject(err);\n    }\n  }\n\n  static pluginHandler(\n    pluginName,\n    packSeq,\n    compressPackSeq,\n    pluginData,\n    info,\n    opts,\n    out,\n    cmdParam,\n    authReject,\n    multiAuthResolver\n  ) {\n    let pluginAuth = authenticationPlugins[pluginName];\n    if (!pluginAuth) {\n      throw Errors.createFatalError(\n        `Client does not support authentication protocol '${pluginName}' requested by server.`,\n        Errors.ER_AUTHENTICATION_PLUGIN_NOT_SUPPORTED,\n        info,\n        '08004'\n      );\n    }\n    return new pluginAuth(packSeq, compressPackSeq, pluginData, cmdParam, authReject, multiAuthResolver);\n  }\n}\n\nmodule.exports = Authentication;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst PacketNodeEncoded = require('./packet-node-encoded');\nconst PacketIconvEncoded = require('./packet-node-iconv');\nconst Collations = require('../const/collations');\nconst Utils = require('../misc/utils');\n\n/**\n * MySQL packet parser\n * see : https://mariadb.com/kb/en/library/0-packet/\n */\nclass PacketInputStream {\n  constructor(unexpectedPacket, receiveQueue, out, opts, info) {\n    this.unexpectedPacket = unexpectedPacket;\n    this.opts = opts;\n    this.receiveQueue = receiveQueue;\n    this.info = info;\n    this.out = out;\n\n    //in case packet is not complete\n    this.header = Buffer.allocUnsafe(4);\n    this.headerLen = 0;\n    this.packetLen = null;\n    this.remainingLen = null;\n    this.parts = null;\n    this.partsTotalLen = 0;\n    this.changeEncoding(this.opts.collation ? this.opts.collation : Collations.fromIndex(224));\n    this.changeDebug(this.opts.debug);\n    this.opts.on('collation', this.changeEncoding.bind(this));\n    this.opts.on('debug', this.changeDebug.bind(this));\n  }\n  changeEncoding(collation) {\n    this.encoding = collation.charset;\n    this.packet = Buffer.isEncoding(this.encoding) ? new PacketNodeEncoded(this.encoding) : new PacketIconvEncoded(this.encoding);\n  }\n  changeDebug(debug) {\n    this.receivePacket = debug ? this.receivePacketDebug : this.receivePacketBasic;\n  }\n  receivePacketDebug(packet) {\n    let cmd = this.currentCmd();\n    this.header[0] = this.packetLen;\n    this.header[1] = this.packetLen >> 8;\n    this.header[2] = this.packetLen >> 16;\n    this.header[3] = this.sequenceNo;\n    if (packet) {\n      this.opts.logger.network(`<== conn:${this.info.threadId ? this.info.threadId : -1} ${cmd ? cmd.onPacketReceive ? cmd.constructor.name + '.' + cmd.onPacketReceive.name : cmd.constructor.name : 'no command'} (${packet.pos},${packet.end})\\n${Utils.log(this.opts, packet.buf, packet.pos, packet.end, this.header)}`);\n    }\n    if (!cmd) {\n      this.unexpectedPacket(packet);\n      return;\n    }\n    cmd.sequenceNo = this.sequenceNo;\n    cmd.onPacketReceive(packet, this.out, this.opts, this.info);\n    if (!cmd.onPacketReceive) {\n      this.receiveQueue.shift();\n    }\n  }\n  receivePacketBasic(packet) {\n    let cmd = this.currentCmd();\n    if (!cmd) {\n      this.unexpectedPacket(packet);\n      return;\n    }\n    cmd.sequenceNo = this.sequenceNo;\n    cmd.onPacketReceive(packet, this.out, this.opts, this.info);\n    if (!cmd.onPacketReceive) this.receiveQueue.shift();\n  }\n  resetHeader() {\n    this.remainingLen = null;\n    this.headerLen = 0;\n  }\n  currentCmd() {\n    let cmd;\n    while (cmd = this.receiveQueue.peek()) {\n      if (cmd.onPacketReceive) return cmd;\n      this.receiveQueue.shift();\n    }\n    return null;\n  }\n  onData(chunk) {\n    let pos = 0;\n    let length;\n    const chunkLen = chunk.length;\n    do {\n      //read header\n      if (this.remainingLen) {\n        length = this.remainingLen;\n      } else if (this.headerLen === 0 && chunkLen - pos >= 4) {\n        this.packetLen = chunk[pos] + (chunk[pos + 1] << 8) + (chunk[pos + 2] << 16);\n        this.sequenceNo = chunk[pos + 3];\n        pos += 4;\n        length = this.packetLen;\n      } else {\n        length = null;\n        while (chunkLen - pos > 0) {\n          this.header[this.headerLen++] = chunk[pos++];\n          if (this.headerLen === 4) {\n            this.packetLen = this.header[0] + (this.header[1] << 8) + (this.header[2] << 16);\n            this.sequenceNo = this.header[3];\n            length = this.packetLen;\n            break;\n          }\n        }\n      }\n      if (length) {\n        if (chunkLen - pos >= length) {\n          pos += length;\n          if (!this.parts) {\n            if (this.packetLen < 0xffffff) {\n              this.receivePacket(this.packet.update(chunk, pos - length, pos));\n              // fast path, knowing there is no parts\n              // loop can be simplified until reaching the end of the packet.\n              while (pos + 4 < chunkLen) {\n                this.packetLen = chunk[pos] + (chunk[pos + 1] << 8) + (chunk[pos + 2] << 16);\n                this.sequenceNo = chunk[pos + 3];\n                pos += 4;\n                if (chunkLen - pos >= this.packetLen) {\n                  pos += this.packetLen;\n                  if (this.packetLen < 0xffffff) {\n                    this.receivePacket(this.packet.update(chunk, pos - this.packetLen, pos));\n                  } else {\n                    this.parts = [chunk.subarray(pos - this.packetLen, pos)];\n                    this.partsTotalLen = this.packetLen;\n                    break;\n                  }\n                } else {\n                  const buf = chunk.subarray(pos, chunkLen);\n                  if (!this.parts) {\n                    this.parts = [buf];\n                    this.partsTotalLen = chunkLen - pos;\n                  } else {\n                    this.parts.push(buf);\n                    this.partsTotalLen += chunkLen - pos;\n                  }\n                  this.remainingLen = this.packetLen - (chunkLen - pos);\n                  return;\n                }\n              }\n            } else {\n              this.parts = [chunk.subarray(pos - length, pos)];\n              this.partsTotalLen = length;\n            }\n          } else {\n            this.parts.push(chunk.subarray(pos - length, pos));\n            this.partsTotalLen += length;\n            if (this.packetLen < 0xffffff) {\n              let buf = Buffer.concat(this.parts, this.partsTotalLen);\n              this.parts = null;\n              this.receivePacket(this.packet.update(buf, 0, this.partsTotalLen));\n            }\n          }\n          this.resetHeader();\n        } else {\n          const buf = chunk.subarray(pos, chunkLen);\n          if (!this.parts) {\n            this.parts = [buf];\n            this.partsTotalLen = chunkLen - pos;\n          } else {\n            this.parts.push(buf);\n            this.partsTotalLen += chunkLen - pos;\n          }\n          this.remainingLen = length - (chunkLen - pos);\n          return;\n        }\n      }\n    } while (pos < chunkLen);\n  }\n}\nmodule.exports = PacketInputStream;","map":{"version":3,"names":["PacketNodeEncoded","require","PacketIconvEncoded","Collations","Utils","PacketInputStream","constructor","unexpectedPacket","receiveQueue","out","opts","info","header","Buffer","allocUnsafe","headerLen","packetLen","remainingLen","parts","partsTotalLen","changeEncoding","collation","fromIndex","changeDebug","debug","on","bind","encoding","charset","packet","isEncoding","receivePacket","receivePacketDebug","receivePacketBasic","cmd","currentCmd","sequenceNo","logger","network","threadId","onPacketReceive","name","pos","end","log","buf","shift","resetHeader","peek","onData","chunk","length","chunkLen","update","subarray","push","concat","module","exports"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/node_modules/mariadb/lib/io/packet-input-stream.js"],"sourcesContent":["//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst PacketNodeEncoded = require('./packet-node-encoded');\nconst PacketIconvEncoded = require('./packet-node-iconv');\nconst Collations = require('../const/collations');\nconst Utils = require('../misc/utils');\n\n/**\n * MySQL packet parser\n * see : https://mariadb.com/kb/en/library/0-packet/\n */\nclass PacketInputStream {\n  constructor(unexpectedPacket, receiveQueue, out, opts, info) {\n    this.unexpectedPacket = unexpectedPacket;\n    this.opts = opts;\n    this.receiveQueue = receiveQueue;\n    this.info = info;\n    this.out = out;\n\n    //in case packet is not complete\n    this.header = Buffer.allocUnsafe(4);\n    this.headerLen = 0;\n    this.packetLen = null;\n    this.remainingLen = null;\n\n    this.parts = null;\n    this.partsTotalLen = 0;\n    this.changeEncoding(this.opts.collation ? this.opts.collation : Collations.fromIndex(224));\n    this.changeDebug(this.opts.debug);\n    this.opts.on('collation', this.changeEncoding.bind(this));\n    this.opts.on('debug', this.changeDebug.bind(this));\n  }\n\n  changeEncoding(collation) {\n    this.encoding = collation.charset;\n    this.packet = Buffer.isEncoding(this.encoding)\n      ? new PacketNodeEncoded(this.encoding)\n      : new PacketIconvEncoded(this.encoding);\n  }\n\n  changeDebug(debug) {\n    this.receivePacket = debug ? this.receivePacketDebug : this.receivePacketBasic;\n  }\n\n  receivePacketDebug(packet) {\n    let cmd = this.currentCmd();\n    this.header[0] = this.packetLen;\n    this.header[1] = this.packetLen >> 8;\n    this.header[2] = this.packetLen >> 16;\n    this.header[3] = this.sequenceNo;\n    if (packet) {\n      this.opts.logger.network(\n        `<== conn:${this.info.threadId ? this.info.threadId : -1} ${\n          cmd\n            ? cmd.onPacketReceive\n              ? cmd.constructor.name + '.' + cmd.onPacketReceive.name\n              : cmd.constructor.name\n            : 'no command'\n        } (${packet.pos},${packet.end})\\n${Utils.log(this.opts, packet.buf, packet.pos, packet.end, this.header)}`\n      );\n    }\n\n    if (!cmd) {\n      this.unexpectedPacket(packet);\n      return;\n    }\n\n    cmd.sequenceNo = this.sequenceNo;\n    cmd.onPacketReceive(packet, this.out, this.opts, this.info);\n    if (!cmd.onPacketReceive) {\n      this.receiveQueue.shift();\n    }\n  }\n\n  receivePacketBasic(packet) {\n    let cmd = this.currentCmd();\n    if (!cmd) {\n      this.unexpectedPacket(packet);\n      return;\n    }\n    cmd.sequenceNo = this.sequenceNo;\n    cmd.onPacketReceive(packet, this.out, this.opts, this.info);\n    if (!cmd.onPacketReceive) this.receiveQueue.shift();\n  }\n\n  resetHeader() {\n    this.remainingLen = null;\n    this.headerLen = 0;\n  }\n\n  currentCmd() {\n    let cmd;\n    while ((cmd = this.receiveQueue.peek())) {\n      if (cmd.onPacketReceive) return cmd;\n      this.receiveQueue.shift();\n    }\n    return null;\n  }\n\n  onData(chunk) {\n    let pos = 0;\n    let length;\n    const chunkLen = chunk.length;\n\n    do {\n      //read header\n      if (this.remainingLen) {\n        length = this.remainingLen;\n      } else if (this.headerLen === 0 && chunkLen - pos >= 4) {\n        this.packetLen = chunk[pos] + (chunk[pos + 1] << 8) + (chunk[pos + 2] << 16);\n        this.sequenceNo = chunk[pos + 3];\n        pos += 4;\n        length = this.packetLen;\n      } else {\n        length = null;\n        while (chunkLen - pos > 0) {\n          this.header[this.headerLen++] = chunk[pos++];\n          if (this.headerLen === 4) {\n            this.packetLen = this.header[0] + (this.header[1] << 8) + (this.header[2] << 16);\n            this.sequenceNo = this.header[3];\n            length = this.packetLen;\n            break;\n          }\n        }\n      }\n\n      if (length) {\n        if (chunkLen - pos >= length) {\n          pos += length;\n          if (!this.parts) {\n            if (this.packetLen < 0xffffff) {\n              this.receivePacket(this.packet.update(chunk, pos - length, pos));\n              // fast path, knowing there is no parts\n              // loop can be simplified until reaching the end of the packet.\n              while (pos + 4 < chunkLen) {\n                this.packetLen = chunk[pos] + (chunk[pos + 1] << 8) + (chunk[pos + 2] << 16);\n                this.sequenceNo = chunk[pos + 3];\n                pos += 4;\n                if (chunkLen - pos >= this.packetLen) {\n                  pos += this.packetLen;\n                  if (this.packetLen < 0xffffff) {\n                    this.receivePacket(this.packet.update(chunk, pos - this.packetLen, pos));\n                  } else {\n                    this.parts = [chunk.subarray(pos - this.packetLen, pos)];\n                    this.partsTotalLen = this.packetLen;\n                    break;\n                  }\n                } else {\n                  const buf = chunk.subarray(pos, chunkLen);\n                  if (!this.parts) {\n                    this.parts = [buf];\n                    this.partsTotalLen = chunkLen - pos;\n                  } else {\n                    this.parts.push(buf);\n                    this.partsTotalLen += chunkLen - pos;\n                  }\n                  this.remainingLen = this.packetLen - (chunkLen - pos);\n                  return;\n                }\n              }\n            } else {\n              this.parts = [chunk.subarray(pos - length, pos)];\n              this.partsTotalLen = length;\n            }\n          } else {\n            this.parts.push(chunk.subarray(pos - length, pos));\n            this.partsTotalLen += length;\n\n            if (this.packetLen < 0xffffff) {\n              let buf = Buffer.concat(this.parts, this.partsTotalLen);\n              this.parts = null;\n              this.receivePacket(this.packet.update(buf, 0, this.partsTotalLen));\n            }\n          }\n          this.resetHeader();\n        } else {\n          const buf = chunk.subarray(pos, chunkLen);\n          if (!this.parts) {\n            this.parts = [buf];\n            this.partsTotalLen = chunkLen - pos;\n          } else {\n            this.parts.push(buf);\n            this.partsTotalLen += chunkLen - pos;\n          }\n          this.remainingLen = length - (chunkLen - pos);\n          return;\n        }\n      }\n    } while (pos < chunkLen);\n  }\n}\n\nmodule.exports = PacketInputStream;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
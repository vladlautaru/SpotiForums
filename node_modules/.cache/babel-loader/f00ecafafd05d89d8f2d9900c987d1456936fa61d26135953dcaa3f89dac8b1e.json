{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ale lui Vlad\\\\Projects\\\\SpotiForums\\\\spotiforums\\\\src\\\\pages\\\\Post.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = () => {\n  _s();\n  var _post$post_title, _post$post_desc;\n  const [post, setPost] = useState({});\n  const {\n    postId\n  } = useParams();\n  console.log(\"postId:\", postId);\n  const getPost = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/getposts');\n      return response.data.find(item => item.post_id === parseInt(postId)) || {};\n    } catch (error) {\n      alert('Error:' + error);\n      return {};\n    }\n  };\n  useEffect(() => {\n    const fetchPost = async () => {\n      const postData = await getPost();\n      setPost(postData);\n    };\n    fetchPost();\n  }, [postId]); // Empty dependency array to only run once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: (_post$post_title = post.post_title) !== null && _post$post_title !== void 0 ? _post$post_title : 'Untitled'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: (_post$post_desc = post.post_desc) !== null && _post$post_desc !== void 0 ? _post$post_desc : 'Empty'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(Post, \"AbKb7DBXeh8BLNbhKXJxskyOEPQ=\", false, function () {\n  return [useParams];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","jsxDEV","_jsxDEV","Post","_s","_post$post_title","_post$post_desc","post","setPost","postId","console","log","getPost","response","get","data","find","item","post_id","parseInt","error","alert","fetchPost","postData","children","post_title","fileName","_jsxFileName","lineNumber","columnNumber","post_desc","_c","$RefreshReg$"],"sources":["D:/Ale lui Vlad/Projects/SpotiForums/spotiforums/src/pages/Post.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst Post = () => {\r\n    const [post, setPost] = useState({});\r\n    const {postId} = useParams();\r\n\r\n    console.log(\"postId:\", postId);\r\n\r\n    const getPost = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:5000/getposts');\r\n            return response.data.find(item => item.post_id === parseInt(postId)) || {};\r\n        } catch (error) {\r\n            alert('Error:' + error);\r\n            return {};\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchPost = async () => {\r\n            const postData = await getPost();\r\n            setPost(postData);\r\n        };\r\n\r\n        fetchPost();\r\n    }, [postId]); // Empty dependency array to only run once on component mount\r\n\r\n    return (\r\n        <div>\r\n            <span>{post.post_title ?? 'Untitled'}</span>\r\n            <br/>\r\n            <span>{post.post_desc ?? 'Empty'}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,gBAAA,EAAAC,eAAA;EACf,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM;IAACW;EAAM,CAAC,GAAGV,SAAS,CAAC,CAAC;EAE5BW,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,MAAM,CAAC;EAE9B,MAAMG,OAAO,GAAG,MAAAA,CAAA,KAAY;IACxB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,gCAAgC,CAAC;MAClE,OAAOD,QAAQ,CAACE,IAAI,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,OAAO,KAAKC,QAAQ,CAACV,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC;IAC9E,CAAC,CAAC,OAAOW,KAAK,EAAE;MACZC,KAAK,CAAC,QAAQ,GAAGD,KAAK,CAAC;MACvB,OAAO,CAAC,CAAC;IACb;EACJ,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACZ,MAAMyB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMX,OAAO,CAAC,CAAC;MAChCJ,OAAO,CAACe,QAAQ,CAAC;IACrB,CAAC;IAEDD,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACb,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,oBACIP,OAAA;IAAAsB,QAAA,gBACItB,OAAA;MAAAsB,QAAA,GAAAnB,gBAAA,GAAOE,IAAI,CAACkB,UAAU,cAAApB,gBAAA,cAAAA,gBAAA,GAAI;IAAU;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC5C3B,OAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACL3B,OAAA;MAAAsB,QAAA,GAAAlB,eAAA,GAAOC,IAAI,CAACuB,SAAS,cAAAxB,eAAA,cAAAA,eAAA,GAAI;IAAO;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEd,CAAC;AAAAzB,EAAA,CAhCKD,IAAI;EAAA,QAEWJ,SAAS;AAAA;AAAAgC,EAAA,GAFxB5B,IAAI;AAkCV,eAAeA,IAAI;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
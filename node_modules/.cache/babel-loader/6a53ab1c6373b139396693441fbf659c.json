{"ast":null,"code":"//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2024 MariaDB Corporation Ab\n\n'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\nconst Pool = require('./pool');\nconst ConnectionPromise = require('./connection-promise');\nconst CommandParameter = require('./command-parameter');\nconst Errors = require('./misc/errors');\nclass PoolPromise extends EventEmitter {\n  #pool;\n  constructor(options) {\n    super();\n    this.pool = new Pool(options);\n    this.pool.on('acquire', this.emit.bind(this, 'acquire'));\n    this.pool.on('connection', this.emit.bind(this, 'connection'));\n    this.pool.on('enqueue', this.emit.bind(this, 'enqueue'));\n    this.pool.on('release', this.emit.bind(this, 'release'));\n    this.pool.on('error', this.emit.bind(this, 'error'));\n  }\n  get closed() {\n    return this.pool.closed;\n  }\n\n  /**\n   * Get current total connection number.\n   * @return {number}\n   */\n  totalConnections() {\n    return this.pool.totalConnections();\n  }\n\n  /**\n   * Get current active connections.\n   * @return {number}\n   */\n  activeConnections() {\n    return this.pool.activeConnections();\n  }\n\n  /**\n   * Get current idle connection number.\n   * @return {number}\n   */\n  idleConnections() {\n    return this.pool.idleConnections();\n  }\n\n  /**\n   * Get current stacked connection request.\n   * @return {number}\n   */\n  taskQueueSize() {\n    return this.pool.taskQueueSize();\n  }\n  escape(value) {\n    return this.pool.escape(value);\n  }\n  escapeId(value) {\n    return this.pool.escapeId(value);\n  }\n\n  /**\n   * Ends pool\n   *\n   * @return Promise\n   **/\n  end() {\n    return this.pool.end();\n  }\n\n  /**\n   * Retrieve a connection from pool.\n   * Create a new one, if limit is not reached.\n   * wait until acquireTimeout.\n   *\n   */\n  async getConnection() {\n    const cmdParam = new CommandParameter();\n    if (this.pool.opts.connOptions.trace) Error.captureStackTrace(cmdParam);\n    const baseConn = await this.pool.getConnection(cmdParam);\n    const conn = new ConnectionPromise(baseConn);\n    conn.release = () => new Promise(baseConn.release);\n    conn.end = conn.release;\n    conn.close = conn.release;\n    return conn;\n  }\n\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   */\n  query(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.pool.opts.connOptions, sql, values);\n    return this.pool.getConnection(cmdParam).then(baseConn => {\n      return new Promise(baseConn.query.bind(baseConn, cmdParam)).finally(() => {\n        this.pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * Execute query using binary protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   */\n  execute(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.pool.opts.connOptions, sql, values);\n    return this.pool.getConnection(cmdParam).then(baseConn => {\n      return ConnectionPromise._EXECUTE_CMD(baseConn, cmdParam).finally(() => {\n        this.pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * execute a batch\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  array of placeholder values\n   */\n  batch(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.pool.opts.connOptions, sql, values);\n    return this.pool.getConnection(cmdParam).then(baseConn => {\n      return ConnectionPromise._BATCH_CMD(baseConn, cmdParam).finally(() => {\n        this.pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * Import sql file.\n   *\n   * @param opts JSON array with 2 possible fields: file and database\n   */\n  importFile(opts) {\n    if (!opts) {\n      return Promise.reject(Errors.createError('SQL file parameter is mandatory', Errors.ER_MISSING_SQL_PARAMETER, null, 'HY000', null, false, null));\n    }\n    return this.pool.getConnection({}).then(baseConn => {\n      return new Promise(baseConn.importFile.bind(baseConn, {\n        file: opts.file,\n        database: opts.database\n      })).finally(() => {\n        this.pool.release(baseConn);\n      });\n    });\n  }\n}\nmodule.exports = PoolPromise;","map":null,"metadata":{},"sourceType":"script"}